{
  "env": {
    "node": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/strict-type-checked",
    "plugin:@typescript-eslint/stylistic-type-checked",
    "plugin:import/recommended",
    "plugin:import/typescript"
  ],
  "parser": "@typescript-eslint/parser",
  "plugins": ["@typescript-eslint", "simple-import-sort"],
  "root": true,
  "reportUnusedDisableDirectives": true,
  "rules": {
    "@typescript-eslint/array-type": [
      "error",
      {
        "default": "generic"
      }
    ],
    "@typescript-eslint/consistent-type-exports": "error",
    "@typescript-eslint/consistent-type-imports": [
      "error",
      {
        "fixStyle": "inline-type-imports"
      }
    ],
    "@typescript-eslint/dot-notation": "error",
    "@typescript-eslint/explicit-module-boundary-types": "error",
    "@typescript-eslint/member-ordering": [
      "error",
      {
        "default": {
          "order": "alphabetically"
        },
        "classes": {
          "memberTypes": ["field", "constructor", ["get", "set"], "method"],
          "order": "alphabetically"
        }
      }
    ],
    "@typescript-eslint/method-signature-style": "error",
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "default",
        "format": ["strictCamelCase"]
      },
      {
        "selector": "class",
        "format": ["PascalCase"]
      },
      {
        "selector": "enumMember",
        "format": ["StrictPascalCase"]
      },
      {
        "selector": "import",
        "format": ["camelCase", "PascalCase"]
      },
      {
        "selector": "objectLiteralProperty",
        "format": ["StrictPascalCase", "strictCamelCase"]
      },
      {
        "selector": "parameter",
        "format": ["strictCamelCase"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "typeLike",
        "format": ["StrictPascalCase"]
      },
      {
        "selector": "variable",
        "format": ["StrictPascalCase", "strictCamelCase"]
      }
    ],
    "@typescript-eslint/no-extraneous-class": [
      "error",
      {
        "allowStaticOnly": true
      }
    ],
    "@typescript-eslint/no-import-type-side-effects": "error",
    "@typescript-eslint/no-unused-expressions": "error",
    "@typescript-eslint/no-unused-vars": ["error", { "caughtErrors": "all" }],
    "@typescript-eslint/no-use-before-define": "error",
    "@typescript-eslint/prefer-literal-enum-member": [
      "error",
      {
        "allowBitwiseExpressions": true
      }
    ],
    "@typescript-eslint/prefer-string-starts-ends-with": "error",
    "@typescript-eslint/promise-function-async": "error",
    "@typescript-eslint/strict-boolean-expressions": "error",
    "@typescript-eslint/switch-exhaustiveness-check": "error",
    "import/first": "error",
    "import/newline-after-import": "error",
    "import/no-duplicates": "error",
    "import/no-extraneous-dependencies": [
      "error",
      {
        "devDependencies": [
          "*.js",
          "**/__tests__/*",
          "**/__typetests__/*",
          "**/benchmarks/*",
          "**/scripts/*",
          "**/tests/*",
          "**/typetests/*"
        ]
      }
    ],
    "simple-import-sort/imports": [
      "error",
      {
        // the default grouping, but with no blank lines.
        "groups": [["^\\u0000", "^node:", "^@?\\w", "^", "^\\."]]
      }
    ],
    "simple-import-sort/exports": "error",
    "curly": "error",
    "eqeqeq": ["error", "smart"],
    "func-style": ["error", "declaration"],
    "object-shorthand": "error",
    "no-console": "warn",
    "no-implicit-coercion": "error",
    "no-negated-condition": "error",
    "no-nested-ternary": "error",
    "no-return-await": "off",
    "no-underscore-dangle": "error",
    "no-unused-expressions": "off",
    "no-unused-private-class-members": "error",
    "no-use-before-define": "off",
    "no-useless-concat": "error",
    "prefer-object-has-own": "error",
    "prefer-template": "error",
    "sort-keys": "error",
    "yoda": "error"
  },
  "overrides": [
    {
      "files": ["*.ts", "*.tsx"],
      "plugins": ["eslint-plugin-tsdoc"],
      "rules": {
        "tsdoc/syntax": "error"
      }
    },
    {
      "files": ["benchmarks/tstyche.bench.js"],
      "rules": {
        "no-console": "off"
      }
    },
    {
      "files": ["src/result/ResultManager.ts", "src/store/Version.ts"],
      "rules": {
        "@typescript-eslint/no-non-null-assertion": "off"
      }
    },
    {
      "files": ["src/types.ts"],
      "rules": {
        "@typescript-eslint/no-unused-vars": "off"
      }
    },
    {
      "files": ["**/__tests__/*.test.ts?(x)", "tests/*.test.ts"],
      "extends": ["plugin:jest/recommended", "plugin:jest/style", "plugin:jest-formatting/recommended"],
      "plugins": ["jest", "jest-formatting"],
      "rules": {
        "@typescript-eslint/unbound-method": "off",
        "jest/no-conditional-in-test": "error",
        "jest/no-duplicate-hooks": "error",
        "jest/no-test-return-statement": "error",
        "jest/prefer-each": "error",
        "jest/prefer-hooks-in-order": "error",
        "jest/prefer-hooks-on-top": "error",
        "jest/prefer-lowercase-title": [
          "error",
          {
            "ignoreTopLevelDescribe": true
          }
        ],
        "jest/prefer-spy-on": "error",
        "jest/require-to-throw-message": "error",
        "jest/unbound-method": "error"
      }
    },
    {
      "files": ["**/*.tst.*", "**/__typetests__/*.test.ts", "examples/*.test.ts", "typetests/*.test.ts"],
      "rules": {
        "@typescript-eslint/no-confusing-void-expression": "off",
        "@typescript-eslint/no-invalid-void-type": "off",
        "@typescript-eslint/no-unused-expressions": "off",
        "@typescript-eslint/no-unused-vars": "off"
      }
    }
  ],
  "parserOptions": {
    "EXPERIMENTAL_useProjectService": true
  },
  "settings": {
    "import/ignore": ["typescript"],
    "import/resolver": {
      "typescript": {}
    }
  }
}
