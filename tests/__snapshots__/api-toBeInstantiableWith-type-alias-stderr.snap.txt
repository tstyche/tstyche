Error: Generic type 'Single<T>' can be instantiated without type arguments.

  11 |     expect<Single<_>>().type.toBeInstantiableWith<[]>();
  12 |     expect<Single<_>>().type.toBeInstantiableWith<[string]>();
  13 |     expect<Single<_>>().type.not.toBeInstantiableWith<[]>(); // fail
     |                                                       ~~
  14 | 
  15 |     expect<Double<_, _>>().type.toBeInstantiableWith<[string, number]>();
  16 |     expect<Double<_, _>>().type.not.toBeInstantiableWith<[string, number]>(); // fail

       at ./__typetests__/type-alias.tst.ts:13:55

Error: Generic type 'Double<T, V>' can be instantiated with given type arguments.

  14 | 
  15 |     expect<Double<_, _>>().type.toBeInstantiableWith<[string, number]>();
  16 |     expect<Double<_, _>>().type.not.toBeInstantiableWith<[string, number]>(); // fail
     |                                                          ~~~~~~~~~~~~~~~~
  17 | 
  18 |     expect<Triple<_>>().type.toBeInstantiableWith<[string]>();
  19 |     expect<Triple<_>>().type.not.toBeInstantiableWith<[string]>(); // fail

       at ./__typetests__/type-alias.tst.ts:16:58

Error: Generic type 'Triple<T, U, V>' can be instantiated with given type argument.

  17 | 
  18 |     expect<Triple<_>>().type.toBeInstantiableWith<[string]>();
  19 |     expect<Triple<_>>().type.not.toBeInstantiableWith<[string]>(); // fail
     |                                                       ~~~~~~~~
  20 |     expect<Triple<_>>().type.toBeInstantiableWith<[string, number]>();
  21 |     expect<Triple<_>>().type.not.toBeInstantiableWith<[string, number]>(); // fail
  22 |     expect<Triple<_>>().type.toBeInstantiableWith<[string, number, boolean]>();

       at ./__typetests__/type-alias.tst.ts:19:55

Error: Generic type 'Triple<T, U, V>' can be instantiated with given type arguments.

  19 |     expect<Triple<_>>().type.not.toBeInstantiableWith<[string]>(); // fail
  20 |     expect<Triple<_>>().type.toBeInstantiableWith<[string, number]>();
  21 |     expect<Triple<_>>().type.not.toBeInstantiableWith<[string, number]>(); // fail
     |                                                       ~~~~~~~~~~~~~~~~
  22 |     expect<Triple<_>>().type.toBeInstantiableWith<[string, number, boolean]>();
  23 |     expect<Triple<_>>().type.not.toBeInstantiableWith<[string, number, boolean]>(); // fail
  24 |   });

       at ./__typetests__/type-alias.tst.ts:21:55

Error: Generic type 'Triple<T, U, V>' can be instantiated with given type arguments.

  21 |     expect<Triple<_>>().type.not.toBeInstantiableWith<[string, number]>(); // fail
  22 |     expect<Triple<_>>().type.toBeInstantiableWith<[string, number, boolean]>();
  23 |     expect<Triple<_>>().type.not.toBeInstantiableWith<[string, number, boolean]>(); // fail
     |                                                       ~~~~~~~~~~~~~~~~~~~~~~~~~
  24 |   });
  25 | 
  26 |   test("requires at least type arguments", () => {

       at ./__typetests__/type-alias.tst.ts:23:55

Error: Generic type 'Triple<T, U, V>' requires at least 1 type argument.

  26 |   test("requires at least type arguments", () => {
  27 |     expect<Triple<_>>().type.not.toBeInstantiableWith<[]>();
  28 |     expect<Triple<_>>().type.toBeInstantiableWith<[]>(); // fail
     |                                                   ~~
  29 | 
  30 |     expect<Double<_, _>>().type.not.toBeInstantiableWith<[]>();
  31 |     expect<Double<_, _>>().type.toBeInstantiableWith<[]>(); // fail

       at ./__typetests__/type-alias.tst.ts:28:51 ❭ when target is a type alias ❭ requires at least type arguments

Error: Generic type 'Double<T, V>' requires 2 type arguments.

  29 | 
  30 |     expect<Double<_, _>>().type.not.toBeInstantiableWith<[]>();
  31 |     expect<Double<_, _>>().type.toBeInstantiableWith<[]>(); // fail
     |                                                      ~~
  32 |     expect<Double<_, _>>().type.not.toBeInstantiableWith<[string]>();
  33 |     expect<Double<_, _>>().type.toBeInstantiableWith<[string]>(); // fail
  34 |   });

       at ./__typetests__/type-alias.tst.ts:31:54 ❭ when target is a type alias ❭ requires at least type arguments

Error: Generic type 'Double<T, V>' requires 2 type arguments.

  31 |     expect<Double<_, _>>().type.toBeInstantiableWith<[]>(); // fail
  32 |     expect<Double<_, _>>().type.not.toBeInstantiableWith<[string]>();
  33 |     expect<Double<_, _>>().type.toBeInstantiableWith<[string]>(); // fail
     |                                                      ~~~~~~~~
  34 |   });
  35 | 
  36 |   test("takes at most type arguments", () => {

       at ./__typetests__/type-alias.tst.ts:33:54 ❭ when target is a type alias ❭ requires at least type arguments

Error: Generic type 'Triple<T, U, V>' takes at most 3 type arguments.

  36 |   test("takes at most type arguments", () => {
  37 |     expect<Triple<_>>().type.not.toBeInstantiableWith<[string, number, boolean, boolean]>();
  38 |     expect<Triple<_>>().type.toBeInstantiableWith<[string, number, boolean, boolean]>(); // fail
     |                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  39 | 
  40 |     expect<Double<_, _>>().type.not.toBeInstantiableWith<[number, number, number]>();
  41 |     expect<Double<_, _>>().type.toBeInstantiableWith<[number, number, number]>(); // fail

       at ./__typetests__/type-alias.tst.ts:38:51 ❭ when target is a type alias ❭ takes at most type arguments

Error: Generic type 'Double<T, V>' takes only 2 type arguments.

  39 | 
  40 |     expect<Double<_, _>>().type.not.toBeInstantiableWith<[number, number, number]>();
  41 |     expect<Double<_, _>>().type.toBeInstantiableWith<[number, number, number]>(); // fail
     |                                                      ~~~~~~~~~~~~~~~~~~~~~~~~
  42 |   });
  43 | 
  44 |   test("constraint is not satisfied", () => {

       at ./__typetests__/type-alias.tst.ts:41:54 ❭ when target is a type alias ❭ takes at most type arguments

Error: The constraint 'string' is not satisfied with type 'number'.

  44 |   test("constraint is not satisfied", () => {
  45 |     expect<Triple<_>>().type.not.toBeInstantiableWith<[number]>(); // fail
  46 |     expect<Triple<_>>().type.toBeInstantiableWith<[number]>();
     |                                                    ~~~~~~
  47 | 
  48 |     expect<Triple<_>>().type.toBeInstantiableWith<[string, string]>();
  49 |     expect<Triple<_>>().type.not.toBeInstantiableWith<[string, string]>(); // fail

       at ./__typetests__/type-alias.tst.ts:46:52

Error: The constraint 'number' is not satisfied with type 'string'.

  46 |     expect<Triple<_>>().type.toBeInstantiableWith<[number]>();
  47 | 
  48 |     expect<Triple<_>>().type.toBeInstantiableWith<[string, string]>();
     |                                                            ~~~~~~
  49 |     expect<Triple<_>>().type.not.toBeInstantiableWith<[string, string]>(); // fail
  50 |   });
  51 | });

       at ./__typetests__/type-alias.tst.ts:48:60

