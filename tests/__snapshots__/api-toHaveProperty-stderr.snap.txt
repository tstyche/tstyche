Error: Property 'runTest' exists on type 'Worker<Sample>'.

  48 |     expect<Worker<Sample>>().type.toHaveProperty("runTest");
  49 | 
  50 |     expect<Worker<Sample>>().type.not.toHaveProperty("runTest");
     |                                       ~~~~~~~~~~~~~~
  51 |   });
  52 | 
  53 |   test("has expected optional string property key", () => {

       at ./__typetests__/toHaveProperty.tst.ts:50:39 ❭ when source is a type ❭ has expected string property key

Error: Property 'isBusy' exists on type 'Worker<Sample>'.

  54 |     expect<Worker<Sample>>().type.toHaveProperty("isBusy");
  55 | 
  56 |     expect<Worker<Sample>>().type.not.toHaveProperty("isBusy");
     |                                       ~~~~~~~~~~~~~~
  57 |   });
  58 | 
  59 |   test("has expected escaped string property key", () => {

       at ./__typetests__/toHaveProperty.tst.ts:56:39 ❭ when source is a type ❭ has expected optional string property key

Error: Property '__check' exists on type 'Worker<Sample>'.

  60 |     expect<Worker<Sample>>().type.toHaveProperty("__check");
  61 | 
  62 |     expect<Worker<Sample>>().type.not.toHaveProperty("__check");
     |                                       ~~~~~~~~~~~~~~
  63 |   });
  64 | 
  65 |   test("does NOT have expected string property key", () => {

       at ./__typetests__/toHaveProperty.tst.ts:62:39 ❭ when source is a type ❭ has expected escaped string property key

Error: Property 'endTest' does not exist on type 'Worker<Sample>'.

  66 |     expect<Worker<Sample>>().type.not.toHaveProperty("endTest");
  67 | 
  68 |     expect<Worker<Sample>>().type.toHaveProperty("endTest");
     |                                   ~~~~~~~~~~~~~~
  69 |   });
  70 | 
  71 |   test("has expected number property key", () => {

       at ./__typetests__/toHaveProperty.tst.ts:68:35 ❭ when source is a type ❭ does NOT have expected string property key

Error: Property '123' exists on type 'Worker<Sample>'.

  72 |     expect<Worker<Sample>>().type.toHaveProperty(123);
  73 | 
  74 |     expect<Worker<Sample>>().type.not.toHaveProperty(123);
     |                                       ~~~~~~~~~~~~~~
  75 |   });
  76 | 
  77 |   test("has expected optional number property key", () => {

       at ./__typetests__/toHaveProperty.tst.ts:74:39 ❭ when source is a type ❭ has expected number property key

Error: Property '789' exists on type 'Worker<Sample>'.

  78 |     expect<Worker<Sample>>().type.toHaveProperty(789);
  79 | 
  80 |     expect<Worker<Sample>>().type.not.toHaveProperty(789);
     |                                       ~~~~~~~~~~~~~~
  81 |   });
  82 | 
  83 |   test("does NOT have expected number property key", () => {

       at ./__typetests__/toHaveProperty.tst.ts:80:39 ❭ when source is a type ❭ has expected optional number property key

Error: Property '456' does not exist on type 'Worker<Sample>'.

  84 |     expect<Worker<Sample>>().type.not.toHaveProperty(456);
  85 | 
  86 |     expect<Worker<Sample>>().type.toHaveProperty(456);
     |                                   ~~~~~~~~~~~~~~
  87 |   });
  88 | 
  89 |   test("has expected symbol property key", () => {

       at ./__typetests__/toHaveProperty.tst.ts:86:35 ❭ when source is a type ❭ does NOT have expected number property key

Error: Property '[kOne]' exists on type 'Worker<Sample>'.

  90 |     expect<Worker<Sample>>().type.toHaveProperty(kOne);
  91 | 
  92 |     expect<Worker<Sample>>().type.not.toHaveProperty(kOne);
     |                                       ~~~~~~~~~~~~~~
  93 |   });
  94 | 
  95 |   test("has expected global symbol property key", () => {

       at ./__typetests__/toHaveProperty.tst.ts:92:39 ❭ when source is a type ❭ has expected symbol property key

Error: Property '[kTwo]' exists on type 'Worker<Sample>'.

   96 |     expect<Worker<Sample>>().type.toHaveProperty(kTwo);
   97 | 
   98 |     expect<Worker<Sample>>().type.not.toHaveProperty(kTwo);
      |                                       ~~~~~~~~~~~~~~
   99 |   });
  100 | 
  101 |   test("does NOT have expected symbol property key", () => {

        at ./__typetests__/toHaveProperty.tst.ts:98:39 ❭ when source is a type ❭ has expected global symbol property key

Error: Property '[kFour]' does not exist on type 'Worker<Sample>'.

  102 |     expect<Worker<Sample>>().type.not.toHaveProperty(kFour);
  103 | 
  104 |     expect<Worker<Sample>>().type.toHaveProperty(kFour);
      |                                   ~~~~~~~~~~~~~~
  105 |   });
  106 | 
  107 |   test("has expected numeric enum property key", () => {

        at ./__typetests__/toHaveProperty.tst.ts:104:35 ❭ when source is a type ❭ does NOT have expected symbol property key

Error: Property '0' exists on type 'Worker<Sample>'.

  108 |     expect<Worker<Sample>>().type.toHaveProperty(E1.A);
  109 | 
  110 |     expect<Worker<Sample>>().type.not.toHaveProperty(E1.A);
      |                                       ~~~~~~~~~~~~~~
  111 |   });
  112 | 
  113 |   test("does NOT have expected numeric enum property key", () => {

        at ./__typetests__/toHaveProperty.tst.ts:110:39 ❭ when source is a type ❭ has expected numeric enum property key

Error: Property '1' does not exist on type 'Worker<Sample>'.

  114 |     expect<Worker<Sample>>().type.not.toHaveProperty(E1.B);
  115 | 
  116 |     expect<Worker<Sample>>().type.toHaveProperty(E1.B);
      |                                   ~~~~~~~~~~~~~~
  117 |   });
  118 | 
  119 |   test("has expected string enum property key", () => {

        at ./__typetests__/toHaveProperty.tst.ts:116:35 ❭ when source is a type ❭ does NOT have expected numeric enum property key

Error: Property 'B' exists on type 'Worker<Sample>'.

  120 |     expect<Worker<Sample>>().type.toHaveProperty(E2.B);
  121 | 
  122 |     expect<Worker<Sample>>().type.not.toHaveProperty(E2.B);
      |                                       ~~~~~~~~~~~~~~
  123 |   });
  124 | 
  125 |   test("does NOT have expected string enum property key", () => {

        at ./__typetests__/toHaveProperty.tst.ts:122:39 ❭ when source is a type ❭ has expected string enum property key

Error: Property 'A' does not exist on type 'Worker<Sample>'.

  126 |     expect<Worker<Sample>>().type.not.toHaveProperty(E2.A);
  127 | 
  128 |     expect<Worker<Sample>>().type.toHaveProperty(E2.A);
      |                                   ~~~~~~~~~~~~~~
  129 |   });
  130 | });
  131 | 

        at ./__typetests__/toHaveProperty.tst.ts:128:35 ❭ when source is a type ❭ does NOT have expected string enum property key

Error: Property 'A' exists on type 'typeof E1'.

  134 |     expect<typeof E1>().type.toHaveProperty("A");
  135 | 
  136 |     expect<typeof E1>().type.not.toHaveProperty("A");
      |                                  ~~~~~~~~~~~~~~
  137 |   });
  138 | 
  139 |   test("does NOT have expected property key", () => {

        at ./__typetests__/toHaveProperty.tst.ts:136:34 ❭ when source is an enum ❭ has expected property key

Error: Property 'F' does not exist on type 'typeof E1'.

  140 |     expect<typeof E1>().type.not.toHaveProperty("F");
  141 | 
  142 |     expect<typeof E1>().type.toHaveProperty("F");
      |                              ~~~~~~~~~~~~~~
  143 |   });
  144 | });
  145 | 

        at ./__typetests__/toHaveProperty.tst.ts:142:30 ❭ when source is an enum ❭ does NOT have expected property key

Error: Property 'radius' exists on type 'ColorfulCircle'.

  158 |     expect<ColorfulCircle>().type.toHaveProperty("radius");
  159 | 
  160 |     expect<ColorfulCircle>().type.not.toHaveProperty("radius");
      |                                       ~~~~~~~~~~~~~~
  161 |   });
  162 | 
  163 |   test("does NOT have expected property key", () => {

        at ./__typetests__/toHaveProperty.tst.ts:160:39 ❭ when source is an intersection ❭ has expected property key

Error: Property 'shade' does not exist on type 'ColorfulCircle'.

  164 |     expect<ColorfulCircle>().type.not.toHaveProperty("shade");
  165 | 
  166 |     expect<ColorfulCircle>().type.toHaveProperty("shade");
      |                                   ~~~~~~~~~~~~~~
  167 |   });
  168 | });
  169 | 

        at ./__typetests__/toHaveProperty.tst.ts:166:35 ❭ when source is an intersection ❭ does NOT have expected property key

Error: Property 'runTest' exists on type '{ 123: number; 0: boolean; B: null; __check: boolean; [kOne]: string; [kTwo]: string; runTest: () => boolean; }'.

  172 |     expect(sample).type.toHaveProperty("runTest");
  173 | 
  174 |     expect(sample).type.not.toHaveProperty("runTest");
      |                             ~~~~~~~~~~~~~~
  175 |   });
  176 | 
  177 |   test("has expected escaped string property key", () => {

        at ./__typetests__/toHaveProperty.tst.ts:174:29 ❭ when source is a value ❭ has expected string property key

Error: Property '__check' exists on type '{ 123: number; 0: boolean; B: null; __check: boolean; [kOne]: string; [kTwo]: string; runTest: () => boolean; }'.

  178 |     expect(sample).type.toHaveProperty("__check");
  179 | 
  180 |     expect(sample).type.not.toHaveProperty("__check");
      |                             ~~~~~~~~~~~~~~
  181 |   });
  182 | 
  183 |   test("does NOT have expected string property key", () => {

        at ./__typetests__/toHaveProperty.tst.ts:180:29 ❭ when source is a value ❭ has expected escaped string property key

Error: Property 'endTest' does not exist on type '{ 123: number; 0: boolean; B: null; __check: boolean; [kOne]: string; [kTwo]: string; runTest: () => boolean; }'.

  184 |     expect(sample).type.not.toHaveProperty("endTest");
  185 | 
  186 |     expect(sample).type.toHaveProperty("endTest");
      |                         ~~~~~~~~~~~~~~
  187 |   });
  188 | 
  189 |   test("has expected number property key", () => {

        at ./__typetests__/toHaveProperty.tst.ts:186:25 ❭ when source is a value ❭ does NOT have expected string property key

Error: Property '123' exists on type '{ 123: number; 0: boolean; B: null; __check: boolean; [kOne]: string; [kTwo]: string; runTest: () => boolean; }'.

  190 |     expect(sample).type.toHaveProperty(123);
  191 | 
  192 |     expect(sample).type.not.toHaveProperty(123);
      |                             ~~~~~~~~~~~~~~
  193 |   });
  194 | 
  195 |   test("does NOT have expected number property key", () => {

        at ./__typetests__/toHaveProperty.tst.ts:192:29 ❭ when source is a value ❭ has expected number property key

Error: Property '456' does not exist on type '{ 123: number; 0: boolean; B: null; __check: boolean; [kOne]: string; [kTwo]: string; runTest: () => boolean; }'.

  196 |     expect(sample).type.not.toHaveProperty(456);
  197 | 
  198 |     expect(sample).type.toHaveProperty(456);
      |                         ~~~~~~~~~~~~~~
  199 |   });
  200 | 
  201 |   test("has expected symbol property key", () => {

        at ./__typetests__/toHaveProperty.tst.ts:198:25 ❭ when source is a value ❭ does NOT have expected number property key

Error: Property '[kOne]' exists on type '{ 123: number; 0: boolean; B: null; __check: boolean; [kOne]: string; [kTwo]: string; runTest: () => boolean; }'.

  202 |     expect(sample).type.toHaveProperty(kOne);
  203 | 
  204 |     expect(sample).type.not.toHaveProperty(kOne);
      |                             ~~~~~~~~~~~~~~
  205 |   });
  206 | 
  207 |   test("has expected global symbol property key", () => {

        at ./__typetests__/toHaveProperty.tst.ts:204:29 ❭ when source is a value ❭ has expected symbol property key

Error: Property '[kTwo]' exists on type '{ 123: number; 0: boolean; B: null; __check: boolean; [kOne]: string; [kTwo]: string; runTest: () => boolean; }'.

  208 |     expect(sample).type.toHaveProperty(kTwo);
  209 | 
  210 |     expect(sample).type.not.toHaveProperty(kTwo);
      |                             ~~~~~~~~~~~~~~
  211 |   });
  212 | 
  213 |   test("does NOT have expected symbol property key", () => {

        at ./__typetests__/toHaveProperty.tst.ts:210:29 ❭ when source is a value ❭ has expected global symbol property key

Error: Property '[kFour]' does not exist on type '{ 123: number; 0: boolean; B: null; __check: boolean; [kOne]: string; [kTwo]: string; runTest: () => boolean; }'.

  214 |     expect(sample).type.not.toHaveProperty(kFour);
  215 | 
  216 |     expect(sample).type.toHaveProperty(kFour);
      |                         ~~~~~~~~~~~~~~
  217 |   });
  218 | 
  219 |   test("has expected numeric enum property key", () => {

        at ./__typetests__/toHaveProperty.tst.ts:216:25 ❭ when source is a value ❭ does NOT have expected symbol property key

Error: Property '0' exists on type '{ 123: number; 0: boolean; B: null; __check: boolean; [kOne]: string; [kTwo]: string; runTest: () => boolean; }'.

  220 |     expect(sample).type.toHaveProperty(E1.A);
  221 | 
  222 |     expect(sample).type.not.toHaveProperty(E1.A);
      |                             ~~~~~~~~~~~~~~
  223 |   });
  224 | 
  225 |   test("does NOT have expected numeric enum property key", () => {

        at ./__typetests__/toHaveProperty.tst.ts:222:29 ❭ when source is a value ❭ has expected numeric enum property key

Error: Property '1' does not exist on type '{ 123: number; 0: boolean; B: null; __check: boolean; [kOne]: string; [kTwo]: string; runTest: () => boolean; }'.

  226 |     expect(sample).type.not.toHaveProperty(E1.B);
  227 | 
  228 |     expect(sample).type.toHaveProperty(E1.B);
      |                         ~~~~~~~~~~~~~~
  229 |   });
  230 | 
  231 |   test("has expected string enum property key", () => {

        at ./__typetests__/toHaveProperty.tst.ts:228:25 ❭ when source is a value ❭ does NOT have expected numeric enum property key

Error: Property 'B' exists on type '{ 123: number; 0: boolean; B: null; __check: boolean; [kOne]: string; [kTwo]: string; runTest: () => boolean; }'.

  232 |     expect(sample).type.toHaveProperty(E2.B);
  233 | 
  234 |     expect(sample).type.not.toHaveProperty(E2.B);
      |                             ~~~~~~~~~~~~~~
  235 |   });
  236 | 
  237 |   test("does NOT have expected string enum property key", () => {

        at ./__typetests__/toHaveProperty.tst.ts:234:29 ❭ when source is a value ❭ has expected string enum property key

Error: Property 'A' does not exist on type '{ 123: number; 0: boolean; B: null; __check: boolean; [kOne]: string; [kTwo]: string; runTest: () => boolean; }'.

  238 |     expect(sample).type.not.toHaveProperty(E2.A);
  239 | 
  240 |     expect(sample).type.toHaveProperty(E2.A);
      |                         ~~~~~~~~~~~~~~
  241 |   });
  242 | });
  243 | 

        at ./__typetests__/toHaveProperty.tst.ts:240:25 ❭ when source is a value ❭ does NOT have expected string enum property key

