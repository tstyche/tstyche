Error: Component accepts props of the given type.

Overload 1 of 2, '(props: BbProps): React.JSX.Element', gave the following error.
Type '{}' is assignable to type 'BbProps'.

  31 |   test("accepts props of the given type", () => {
  32 |     expect(First).type.toAcceptProps({});
  33 |     expect(First).type.not.toAcceptProps({}); // fail
     |                                          ~~
  34 | 
  35 |     expect(First).type.toAcceptProps({ one: "sample" });
  36 |     expect(First).type.not.toAcceptProps({ one: "sample" }); // fail

       at ./__typetests__/overloaded-components.tst.tsx:33:42 ❭ when target is a function component ❭ accepts props of the given type

Error: Component does not accept props of the given type.

Overload 1 of 2, '(props: BbProps): React.JSX.Element', gave the following error.
Type '{ one: string; }' is not assignable to type 'BbProps'.
Types of property 'one' are incompatible.
Type 'string' is not assignable to type 'undefined'.

  33 |     expect(First).type.not.toAcceptProps({}); // fail
  34 | 
  35 |     expect(First).type.toAcceptProps({ one: "sample" });
     |                                        ~~~
  36 |     expect(First).type.not.toAcceptProps({ one: "sample" }); // fail
  37 |   });
  38 | 

       at ./__typetests__/overloaded-components.tst.tsx:35:40 ❭ when target is a function component ❭ accepts props of the given type

Error: Component does not accept props of the given type.

Overload 2 of 2, '(props: AaProps): React.JSX.Element', gave the following error.
Type '{ one: string; }' is not assignable to type 'AaProps'.
Property 'two' is required in type 'AaProps'.

  33 |     expect(First).type.not.toAcceptProps({}); // fail
  34 | 
  35 |     expect(First).type.toAcceptProps({ one: "sample" });
     |                                      ~~~~~~~~~~~~~~~~~
  36 |     expect(First).type.not.toAcceptProps({ one: "sample" }); // fail
  37 |   });
  38 | 

       at ./__typetests__/overloaded-components.tst.tsx:35:38 ❭ when target is a function component ❭ accepts props of the given type

Error: Component does not accept props of the given type.

Overload 1 of 2, '(props: BbProps): React.JSX.Element', gave the following error.
Type '{ enable: boolean; }' is not compatible with type 'BbProps'.
Property 'enable' does not exist in type 'BbProps'.

  39 |   test("property does not exist in props type", () => {
  40 |     expect(First).type.not.toAcceptProps({ enable: true });
  41 |     expect(First).type.toAcceptProps({ enable: true }); // fail
     |                                        ~~~~~~
  42 |   });
  43 | 
  44 |   test("property type is not assignable to prop type", () => {

       at ./__typetests__/overloaded-components.tst.tsx:41:40 ❭ when target is a function component ❭ property does not exist in props type

Error: Component does not accept props of the given type.

Overload 2 of 2, '(props: AaProps): React.JSX.Element', gave the following error.
Type '{ enable: boolean; }' is not compatible with type 'AaProps'.
Property 'enable' does not exist in type 'AaProps'.

  39 |   test("property does not exist in props type", () => {
  40 |     expect(First).type.not.toAcceptProps({ enable: true });
  41 |     expect(First).type.toAcceptProps({ enable: true }); // fail
     |                                        ~~~~~~
  42 |   });
  43 | 
  44 |   test("property type is not assignable to prop type", () => {

       at ./__typetests__/overloaded-components.tst.tsx:41:40 ❭ when target is a function component ❭ property does not exist in props type

Error: Component does not accept props of the given type.

Overload 2 of 2, '(props: AaProps): React.JSX.Element', gave the following error.
Type '{ enable: boolean; }' is not assignable to type 'AaProps'.
Property 'one' is required in type 'AaProps'.

  39 |   test("property does not exist in props type", () => {
  40 |     expect(First).type.not.toAcceptProps({ enable: true });
  41 |     expect(First).type.toAcceptProps({ enable: true }); // fail
     |                                      ~~~~~~~~~~~~~~~~
  42 |   });
  43 | 
  44 |   test("property type is not assignable to prop type", () => {

       at ./__typetests__/overloaded-components.tst.tsx:41:38 ❭ when target is a function component ❭ property does not exist in props type

Error: Component does not accept props of the given type.

Overload 2 of 2, '(props: AaProps): React.JSX.Element', gave the following error.
Type '{ enable: boolean; }' is not assignable to type 'AaProps'.
Property 'two' is required in type 'AaProps'.

  39 |   test("property does not exist in props type", () => {
  40 |     expect(First).type.not.toAcceptProps({ enable: true });
  41 |     expect(First).type.toAcceptProps({ enable: true }); // fail
     |                                      ~~~~~~~~~~~~~~~~
  42 |   });
  43 | 
  44 |   test("property type is not assignable to prop type", () => {

       at ./__typetests__/overloaded-components.tst.tsx:41:38 ❭ when target is a function component ❭ property does not exist in props type

Error: Component does not accept props of the given type.

Overload 1 of 2, '(props: BbProps): React.JSX.Element', gave the following error.
Type '{ one: boolean; }' is not assignable to type 'BbProps'.
Types of property 'one' are incompatible.
Type 'boolean' is not assignable to type 'undefined'.

  44 |   test("property type is not assignable to prop type", () => {
  45 |     expect(First).type.not.toAcceptProps({ one: true });
  46 |     expect(First).type.toAcceptProps({ one: true }); // fail
     |                                        ~~~
  47 |   });
  48 | });
  49 | 

       at ./__typetests__/overloaded-components.tst.tsx:46:40 ❭ when target is a function component ❭ property type is not assignable to prop type

Error: Component does not accept props of the given type.

Overload 2 of 2, '(props: AaProps): React.JSX.Element', gave the following error.
Type '{ one: boolean; }' is not assignable to type 'AaProps'.
Types of property 'one' are incompatible.
Type 'boolean' is not assignable to type 'string'.

  44 |   test("property type is not assignable to prop type", () => {
  45 |     expect(First).type.not.toAcceptProps({ one: true });
  46 |     expect(First).type.toAcceptProps({ one: true }); // fail
     |                                        ~~~
  47 |   });
  48 | });
  49 | 

       at ./__typetests__/overloaded-components.tst.tsx:46:40 ❭ when target is a function component ❭ property type is not assignable to prop type

Error: Component does not accept props of the given type.

Overload 2 of 2, '(props: AaProps): React.JSX.Element', gave the following error.
Type '{ one: boolean; }' is not assignable to type 'AaProps'.
Property 'two' is required in type 'AaProps'.

  44 |   test("property type is not assignable to prop type", () => {
  45 |     expect(First).type.not.toAcceptProps({ one: true });
  46 |     expect(First).type.toAcceptProps({ one: true }); // fail
     |                                      ~~~~~~~~~~~~~
  47 |   });
  48 | });
  49 | 

       at ./__typetests__/overloaded-components.tst.tsx:46:38 ❭ when target is a function component ❭ property type is not assignable to prop type

Error: Component type accepts props of the given type.

Overload 1 of 2, '(props: BbProps): React.JSX.Element', gave the following error.
Type '{}' is assignable to type 'BbProps'.

  51 |   test("accepts props of the given type", () => {
  52 |     expect<FirstOverload>().type.toAcceptProps<{}>();
  53 |     expect<FirstOverload>().type.not.toAcceptProps<{}>(); // fail
     |                                                    ~~
  54 | 
  55 |     expect<FirstOverload>().type.toAcceptProps<{ one: string }>();
  56 |     expect<FirstOverload>().type.not.toAcceptProps<{ one: string }>(); // fail

       at ./__typetests__/overloaded-components.tst.tsx:53:52 ❭ when target is a type ❭ accepts props of the given type

Error: Component type does not accept props of the given type.

Overload 1 of 2, '(props: BbProps): React.JSX.Element', gave the following error.
Type '{ one: string; }' is not assignable to type 'BbProps'.
Types of property 'one' are incompatible.
Type 'string' is not assignable to type 'undefined'.

  53 |     expect<FirstOverload>().type.not.toAcceptProps<{}>(); // fail
  54 | 
  55 |     expect<FirstOverload>().type.toAcceptProps<{ one: string }>();
     |                                                  ~~~
  56 |     expect<FirstOverload>().type.not.toAcceptProps<{ one: string }>(); // fail
  57 |   });
  58 | 

       at ./__typetests__/overloaded-components.tst.tsx:55:50 ❭ when target is a type ❭ accepts props of the given type

Error: Component type does not accept props of the given type.

Overload 2 of 2, '(props: AaProps): React.JSX.Element', gave the following error.
Type '{ one: string; }' is not assignable to type 'AaProps'.
Property 'two' is required in type 'AaProps'.

  53 |     expect<FirstOverload>().type.not.toAcceptProps<{}>(); // fail
  54 | 
  55 |     expect<FirstOverload>().type.toAcceptProps<{ one: string }>();
     |                                                ~~~~~~~~~~~~~~~
  56 |     expect<FirstOverload>().type.not.toAcceptProps<{ one: string }>(); // fail
  57 |   });
  58 | 

       at ./__typetests__/overloaded-components.tst.tsx:55:48 ❭ when target is a type ❭ accepts props of the given type

Error: Component type does not accept props of the given type.

Overload 1 of 2, '(props: BbProps): React.JSX.Element', gave the following error.
Type '{ two?: boolean | undefined; }' is not compatible with type 'BbProps'.
Property 'two' does not exist in type 'BbProps'.

  59 |   test("property is required in props type", () => {
  60 |     expect<FirstOverload>().type.not.toAcceptProps<{ two?: boolean }>();
  61 |     expect<FirstOverload>().type.toAcceptProps<{ two?: boolean }>(); // fail
     |                                                  ~~~
  62 |   });
  63 | 
  64 |   test("property does not exist in props type", () => {

       at ./__typetests__/overloaded-components.tst.tsx:61:50 ❭ when target is a type ❭ property is required in props type

Error: Component type does not accept props of the given type.

Overload 2 of 2, '(props: AaProps): React.JSX.Element', gave the following error.
Type '{ two?: boolean | undefined; }' is not assignable to type 'AaProps'.
Property 'two' is required in type 'AaProps'.

  59 |   test("property is required in props type", () => {
  60 |     expect<FirstOverload>().type.not.toAcceptProps<{ two?: boolean }>();
  61 |     expect<FirstOverload>().type.toAcceptProps<{ two?: boolean }>(); // fail
     |                                                  ~~~
  62 |   });
  63 | 
  64 |   test("property does not exist in props type", () => {

       at ./__typetests__/overloaded-components.tst.tsx:61:50 ❭ when target is a type ❭ property is required in props type

Error: Component type does not accept props of the given type.

Overload 2 of 2, '(props: AaProps): React.JSX.Element', gave the following error.
Type '{ two?: boolean | undefined; }' is not assignable to type 'AaProps'.
Property 'one' is required in type 'AaProps'.

  59 |   test("property is required in props type", () => {
  60 |     expect<FirstOverload>().type.not.toAcceptProps<{ two?: boolean }>();
  61 |     expect<FirstOverload>().type.toAcceptProps<{ two?: boolean }>(); // fail
     |                                                ~~~~~~~~~~~~~~~~~
  62 |   });
  63 | 
  64 |   test("property does not exist in props type", () => {

       at ./__typetests__/overloaded-components.tst.tsx:61:48 ❭ when target is a type ❭ property is required in props type

Error: Component type does not accept props of the given type.

Overload 1 of 2, '(props: BbProps): React.JSX.Element', gave the following error.
Type '{ enable: boolean; }' is not compatible with type 'BbProps'.
Property 'enable' does not exist in type 'BbProps'.

  64 |   test("property does not exist in props type", () => {
  65 |     expect<FirstOverload>().type.not.toAcceptProps<{ enable: boolean }>();
  66 |     expect<FirstOverload>().type.toAcceptProps<{ enable: boolean }>(); // fail
     |                                                  ~~~~~~
  67 |   });
  68 | 
  69 |   test("property type is not assignable to prop type", () => {

       at ./__typetests__/overloaded-components.tst.tsx:66:50 ❭ when target is a type ❭ property does not exist in props type

Error: Component type does not accept props of the given type.

Overload 2 of 2, '(props: AaProps): React.JSX.Element', gave the following error.
Type '{ enable: boolean; }' is not compatible with type 'AaProps'.
Property 'enable' does not exist in type 'AaProps'.

  64 |   test("property does not exist in props type", () => {
  65 |     expect<FirstOverload>().type.not.toAcceptProps<{ enable: boolean }>();
  66 |     expect<FirstOverload>().type.toAcceptProps<{ enable: boolean }>(); // fail
     |                                                  ~~~~~~
  67 |   });
  68 | 
  69 |   test("property type is not assignable to prop type", () => {

       at ./__typetests__/overloaded-components.tst.tsx:66:50 ❭ when target is a type ❭ property does not exist in props type

Error: Component type does not accept props of the given type.

Overload 2 of 2, '(props: AaProps): React.JSX.Element', gave the following error.
Type '{ enable: boolean; }' is not assignable to type 'AaProps'.
Property 'one' is required in type 'AaProps'.

  64 |   test("property does not exist in props type", () => {
  65 |     expect<FirstOverload>().type.not.toAcceptProps<{ enable: boolean }>();
  66 |     expect<FirstOverload>().type.toAcceptProps<{ enable: boolean }>(); // fail
     |                                                ~~~~~~~~~~~~~~~~~~~
  67 |   });
  68 | 
  69 |   test("property type is not assignable to prop type", () => {

       at ./__typetests__/overloaded-components.tst.tsx:66:48 ❭ when target is a type ❭ property does not exist in props type

Error: Component type does not accept props of the given type.

Overload 2 of 2, '(props: AaProps): React.JSX.Element', gave the following error.
Type '{ enable: boolean; }' is not assignable to type 'AaProps'.
Property 'two' is required in type 'AaProps'.

  64 |   test("property does not exist in props type", () => {
  65 |     expect<FirstOverload>().type.not.toAcceptProps<{ enable: boolean }>();
  66 |     expect<FirstOverload>().type.toAcceptProps<{ enable: boolean }>(); // fail
     |                                                ~~~~~~~~~~~~~~~~~~~
  67 |   });
  68 | 
  69 |   test("property type is not assignable to prop type", () => {

       at ./__typetests__/overloaded-components.tst.tsx:66:48 ❭ when target is a type ❭ property does not exist in props type

Error: Component type does not accept props of the given type.

Overload 1 of 2, '(props: BbProps): React.JSX.Element', gave the following error.
Type '{ one: boolean; }' is not assignable to type 'BbProps'.
Types of property 'one' are incompatible.
Type 'boolean' is not assignable to type 'undefined'.

  69 |   test("property type is not assignable to prop type", () => {
  70 |     expect<FirstOverload>().type.not.toAcceptProps<{ one: boolean }>();
  71 |     expect<FirstOverload>().type.toAcceptProps<{ one: boolean }>(); // fail
     |                                                  ~~~
  72 |   });
  73 | });
  74 | 

       at ./__typetests__/overloaded-components.tst.tsx:71:50 ❭ when target is a type ❭ property type is not assignable to prop type

Error: Component type does not accept props of the given type.

Overload 2 of 2, '(props: AaProps): React.JSX.Element', gave the following error.
Type '{ one: boolean; }' is not assignable to type 'AaProps'.
Types of property 'one' are incompatible.
Type 'boolean' is not assignable to type 'string'.

  69 |   test("property type is not assignable to prop type", () => {
  70 |     expect<FirstOverload>().type.not.toAcceptProps<{ one: boolean }>();
  71 |     expect<FirstOverload>().type.toAcceptProps<{ one: boolean }>(); // fail
     |                                                  ~~~
  72 |   });
  73 | });
  74 | 

       at ./__typetests__/overloaded-components.tst.tsx:71:50 ❭ when target is a type ❭ property type is not assignable to prop type

Error: Component type does not accept props of the given type.

Overload 2 of 2, '(props: AaProps): React.JSX.Element', gave the following error.
Type '{ one: boolean; }' is not assignable to type 'AaProps'.
Property 'two' is required in type 'AaProps'.

  69 |   test("property type is not assignable to prop type", () => {
  70 |     expect<FirstOverload>().type.not.toAcceptProps<{ one: boolean }>();
  71 |     expect<FirstOverload>().type.toAcceptProps<{ one: boolean }>(); // fail
     |                                                ~~~~~~~~~~~~~~~~
  72 |   });
  73 | });
  74 | 

       at ./__typetests__/overloaded-components.tst.tsx:71:48 ❭ when target is a type ❭ property type is not assignable to prop type

