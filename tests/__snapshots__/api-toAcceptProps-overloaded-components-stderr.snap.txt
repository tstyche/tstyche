Error: Component accepts props of the given type.

Overload 1 of 2, '(props: ButtonProps): React.JSX.Element', gave the following error.
Type '{}' is assignable to type 'ButtonProps'.

  30 |   test("accepts props of the given type", () => {
  31 |     expect(Button).type.toAcceptProps();
> 32 |     expect(Button).type.not.toAcceptProps(); // fail
     |                             ^
  33 | 
  34 |     expect(Button).type.toAcceptProps({});
  35 |     expect(Button).type.not.toAcceptProps({}); // fail

       at ./__typetests__/overloaded-components.tst.tsx:32:29 ❭ when target is a function component ❭ accepts props of the given type

Error: Component accepts props of the given type.

Overload 2 of 2, '(props: AnchorProps): React.JSX.Element', gave the following error.
Type '{}' is assignable to type 'AnchorProps'.

  30 |   test("accepts props of the given type", () => {
  31 |     expect(Button).type.toAcceptProps();
> 32 |     expect(Button).type.not.toAcceptProps(); // fail
     |                             ^
  33 | 
  34 |     expect(Button).type.toAcceptProps({});
  35 |     expect(Button).type.not.toAcceptProps({}); // fail

       at ./__typetests__/overloaded-components.tst.tsx:32:29 ❭ when target is a function component ❭ accepts props of the given type

Error: Component accepts props of the given type.

Overload 1 of 2, '(props: ButtonProps): React.JSX.Element', gave the following error.
Type '{}' is assignable to type 'ButtonProps'.

  33 | 
  34 |     expect(Button).type.toAcceptProps({});
> 35 |     expect(Button).type.not.toAcceptProps({}); // fail
     |                                           ^
  36 | 
  37 |     expect(Button).type.toAcceptProps({ href: "sample" });
  38 |     expect(Button).type.not.toAcceptProps({ href: "sample" }); // fail

       at ./__typetests__/overloaded-components.tst.tsx:35:43 ❭ when target is a function component ❭ accepts props of the given type

Error: Component accepts props of the given type.

Overload 2 of 2, '(props: AnchorProps): React.JSX.Element', gave the following error.
Type '{}' is assignable to type 'AnchorProps'.

  33 | 
  34 |     expect(Button).type.toAcceptProps({});
> 35 |     expect(Button).type.not.toAcceptProps({}); // fail
     |                                           ^
  36 | 
  37 |     expect(Button).type.toAcceptProps({ href: "sample" });
  38 |     expect(Button).type.not.toAcceptProps({ href: "sample" }); // fail

       at ./__typetests__/overloaded-components.tst.tsx:35:43 ❭ when target is a function component ❭ accepts props of the given type

Error: Component accepts props of the given type.

Overload 2 of 2, '(props: AnchorProps): React.JSX.Element', gave the following error.
Type '{ href: string; }' is assignable to type 'AnchorProps'.

  36 | 
  37 |     expect(Button).type.toAcceptProps({ href: "sample" });
> 38 |     expect(Button).type.not.toAcceptProps({ href: "sample" }); // fail
     |                                           ^
  39 |   });
  40 | 
  41 |   test.todo("property is required in props type", () => {

       at ./__typetests__/overloaded-components.tst.tsx:38:43 ❭ when target is a function component ❭ accepts props of the given type

Error: Component does not accept props of the given type.

Overload 1 of 2, '(props: ButtonProps): React.JSX.Element', gave the following error.
Type '{ enable: boolean; }' is not compatible with type 'ButtonProps'.
Property 'enable' does not exist in type 'ButtonProps'.

  45 |   test("property does not exist in props type", () => {
  46 |     expect(Button).type.not.toAcceptProps({ enable: true });
> 47 |     expect(Button).type.toAcceptProps({ enable: true }); // fail
     |                                         ^
  48 |   });
  49 | 
  50 |   test.todo("property type is not assignable to prop type", () => {

       at ./__typetests__/overloaded-components.tst.tsx:47:41 ❭ when target is a function component ❭ property does not exist in props type

Error: Component does not accept props of the given type.

Overload 2 of 2, '(props: AnchorProps): React.JSX.Element', gave the following error.
Type '{ enable: boolean; }' is not compatible with type 'AnchorProps'.
Property 'enable' does not exist in type 'AnchorProps'.

  45 |   test("property does not exist in props type", () => {
  46 |     expect(Button).type.not.toAcceptProps({ enable: true });
> 47 |     expect(Button).type.toAcceptProps({ enable: true }); // fail
     |                                         ^
  48 |   });
  49 | 
  50 |   test.todo("property type is not assignable to prop type", () => {

       at ./__typetests__/overloaded-components.tst.tsx:47:41 ❭ when target is a function component ❭ property does not exist in props type

Error: Component type accepts props of the given type.

Overload 1 of 2, '(props: ButtonProps): React.JSX.Element', gave the following error.
Type '{}' is assignable to type 'ButtonProps'.

  56 |   test("accepts props of the given type", () => {
  57 |     expect<Overload>().type.toAcceptProps();
> 58 |     expect<Overload>().type.not.toAcceptProps(); // fail
     |                                 ^
  59 | 
  60 |     expect<Overload>().type.toAcceptProps<{}>();
  61 |     expect<Overload>().type.not.toAcceptProps<{}>(); // fail

       at ./__typetests__/overloaded-components.tst.tsx:58:33 ❭ when target is a type ❭ accepts props of the given type

Error: Component type accepts props of the given type.

Overload 2 of 2, '(props: AnchorProps): React.JSX.Element', gave the following error.
Type '{}' is assignable to type 'AnchorProps'.

  56 |   test("accepts props of the given type", () => {
  57 |     expect<Overload>().type.toAcceptProps();
> 58 |     expect<Overload>().type.not.toAcceptProps(); // fail
     |                                 ^
  59 | 
  60 |     expect<Overload>().type.toAcceptProps<{}>();
  61 |     expect<Overload>().type.not.toAcceptProps<{}>(); // fail

       at ./__typetests__/overloaded-components.tst.tsx:58:33 ❭ when target is a type ❭ accepts props of the given type

Error: Component type accepts props of the given type.

Overload 1 of 2, '(props: ButtonProps): React.JSX.Element', gave the following error.
Type '{}' is assignable to type 'ButtonProps'.

  59 | 
  60 |     expect<Overload>().type.toAcceptProps<{}>();
> 61 |     expect<Overload>().type.not.toAcceptProps<{}>(); // fail
     |                                               ^
  62 | 
  63 |     expect<Overload>().type.toAcceptProps({ href: "sample" });
  64 |     expect<Overload>().type.not.toAcceptProps({ href: "sample" });

       at ./__typetests__/overloaded-components.tst.tsx:61:47 ❭ when target is a type ❭ accepts props of the given type

Error: Component type accepts props of the given type.

Overload 2 of 2, '(props: AnchorProps): React.JSX.Element', gave the following error.
Type '{}' is assignable to type 'AnchorProps'.

  59 | 
  60 |     expect<Overload>().type.toAcceptProps<{}>();
> 61 |     expect<Overload>().type.not.toAcceptProps<{}>(); // fail
     |                                               ^
  62 | 
  63 |     expect<Overload>().type.toAcceptProps({ href: "sample" });
  64 |     expect<Overload>().type.not.toAcceptProps({ href: "sample" });

       at ./__typetests__/overloaded-components.tst.tsx:61:47 ❭ when target is a type ❭ accepts props of the given type

Error: Component type accepts props of the given type.

Overload 2 of 2, '(props: AnchorProps): React.JSX.Element', gave the following error.
Type '{ href: string; }' is assignable to type 'AnchorProps'.

  62 | 
  63 |     expect<Overload>().type.toAcceptProps({ href: "sample" });
> 64 |     expect<Overload>().type.not.toAcceptProps({ href: "sample" });
     |                                               ^
  65 |   });
  66 | 
  67 |   test.todo("property is required in props type", () => {

       at ./__typetests__/overloaded-components.tst.tsx:64:47 ❭ when target is a type ❭ accepts props of the given type

Error: Component type does not accept props of the given type.

Overload 1 of 2, '(props: ButtonProps): React.JSX.Element', gave the following error.
Type '{ enable: boolean; }' is not compatible with type 'ButtonProps'.
Property 'enable' does not exist in type 'ButtonProps'.

  71 |   test("property does not exist in props type", () => {
  72 |     expect<Overload>().type.not.toAcceptProps({ enable: true });
> 73 |     expect<Overload>().type.toAcceptProps({ enable: true }); // fail
     |                                             ^
  74 |   });
  75 | 
  76 |   test.todo("property type is not assignable to prop type", () => {

       at ./__typetests__/overloaded-components.tst.tsx:73:45 ❭ when target is a type ❭ property does not exist in props type

Error: Component type does not accept props of the given type.

Overload 2 of 2, '(props: AnchorProps): React.JSX.Element', gave the following error.
Type '{ enable: boolean; }' is not compatible with type 'AnchorProps'.
Property 'enable' does not exist in type 'AnchorProps'.

  71 |   test("property does not exist in props type", () => {
  72 |     expect<Overload>().type.not.toAcceptProps({ enable: true });
> 73 |     expect<Overload>().type.toAcceptProps({ enable: true }); // fail
     |                                             ^
  74 |   });
  75 | 
  76 |   test.todo("property type is not assignable to prop type", () => {

       at ./__typetests__/overloaded-components.tst.tsx:73:45 ❭ when target is a type ❭ property does not exist in props type

