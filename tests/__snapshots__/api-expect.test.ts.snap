// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`expect.fail: stderr 1`] = `
"Error: The assertion was supposed to fail, but it passed.

Consider removing the '.fail' flag.

   7 | 
   8 | expect<string>().type.toBeString();
>  9 | expect.fail<string>().type.toBeString();
     | ^
  10 | 
  11 | expect.fail<never>().type.toBeString();
  12 | 

       at ./__typetests__/expect-fail.test.ts:9:1

Error: The assertion was supposed to fail, but it passed.

Consider removing the '.fail' flag.

  14 |   test("is string?", () => {
  15 |     expect<string>().type.toBeString();
> 16 |     expect.fail<string>().type.toBeString();
     |     ^
  17 | 
  18 |     expect.fail<never>().type.toBeVoid();
  19 |   });

       at ./__typetests__/expect-fail.test.ts:16:5

Error: The assertion was supposed to fail, but it passed.

Consider removing the '.fail' flag.

  22 | test("is number?", () => {
  23 |   expect<number>().type.toBeNumber();
> 24 |   expect.fail<number>().type.toBeNumber();
     |   ^
  25 | 
  26 |   expect.fail<never>().type.toBeVoid();
  27 | });

       at ./__typetests__/expect-fail.test.ts:24:3

"
`;

exports[`expect.fail: stdout 1`] = `
"uses TypeScript <<version>> with ./tsconfig.json

fail ./__typetests__/expect-fail.test.ts
  is describe?
    × is string?
  × is number?

Targets:    1 failed, 1 total
Test files: 1 failed, 1 total
Tests:      2 failed, 2 total
Assertions: 3 failed, 6 passed, 9 total
Duration:   <<timestamp>>

Ran test files matching 'expect-fail.test.ts'.
"
`;

exports[`expect.only.fail: stderr 1`] = `
"Error: The assertion was supposed to fail, but it passed.

Consider removing the '.fail' flag.

   7 | 
   8 | expect<string>().type.toBeString();
>  9 | expect.only.fail<string>().type.toBeString();
     | ^
  10 | 
  11 | expect.only.fail<never>().type.toBeString();
  12 | 

       at ./__typetests__/expect-only-fail.test.ts:9:1

Error: The assertion was supposed to fail, but it passed.

Consider removing the '.fail' flag.

  14 |   test("is skipped?", () => {
  15 |     expect<never>().type.toBeVoid();
> 16 |     expect.only.fail<string>().type.toBeString();
     |     ^
  17 | 
  18 |     expect.only.fail<never>().type.toBeVoid();
  19 |   });

       at ./__typetests__/expect-only-fail.test.ts:16:5

Error: The assertion was supposed to fail, but it passed.

Consider removing the '.fail' flag.

  28 | test.only("is number?", () => {
  29 |   expect.skip<string>().type.toBeNumber();
> 30 |   expect.fail<number>().type.toBeNumber();
     |   ^
  31 | 
  32 |   expect.fail<never>().type.toBeVoid();
  33 | });

       at ./__typetests__/expect-only-fail.test.ts:30:3

"
`;

exports[`expect.only.fail: stdout 1`] = `
"uses TypeScript <<version>> with ./tsconfig.json

fail ./__typetests__/expect-only-fail.test.ts
  is skipped describe?
    - skip is skipped?
  is skipped describe?
    - skip is skipped?
  × is number?
  - skip is skipped?
  - todo is todo?

Targets:    1 failed, 1 total
Test files: 1 failed, 1 total
Tests:      1 failed, 3 skipped, 1 todo, 5 total
Assertions: 3 failed, 5 skipped, 3 passed, 11 total
Duration:   <<timestamp>>

Ran test files matching 'expect-only-fail.test.ts'.
"
`;

exports[`expect.only.skip: stderr 1`] = `
"Error: The assertion was supposed to fail, but it passed.

Consider removing the '.fail' flag.

   7 | 
   8 | expect.skip.fail<string>().type.toBeString();
>  9 | expect.fail<string>().type.toBeString();
     | ^
  10 | 
  11 | describe("is describe?", () => {
  12 |   test("is string?", () => {

       at ./__typetests__/expect-skip-fail.test.ts:9:1

Error: The assertion was supposed to fail, but it passed.

Consider removing the '.fail' flag.

  12 |   test("is string?", () => {
  13 |     expect.skip.fail<string>().type.toBeString();
> 14 |     expect.fail<string>().type.toBeString();
     |     ^
  15 |   });
  16 | });
  17 | 

       at ./__typetests__/expect-skip-fail.test.ts:14:5

Error: The assertion was supposed to fail, but it passed.

Consider removing the '.fail' flag.

  18 | test("is number?", () => {
  19 |   expect.skip.fail<number>().type.toBeNumber();
> 20 |   expect.fail<number>().type.toBeNumber();
     |   ^
  21 | });
  22 | 

       at ./__typetests__/expect-skip-fail.test.ts:20:3

"
`;

exports[`expect.only.skip: stdout 1`] = `
"uses TypeScript <<version>> with ./tsconfig.json

fail ./__typetests__/expect-skip-fail.test.ts
  is describe?
    × is string?
  × is number?

Targets:    1 failed, 1 total
Test files: 1 failed, 1 total
Tests:      2 failed, 2 total
Assertions: 3 failed, 3 skipped, 6 total
Duration:   <<timestamp>>

Ran test files matching 'expect-skip-fail.test.ts'.
"
`;

exports[`expect.only: stdout 1`] = `
"uses TypeScript <<version>> with ./tsconfig.json

pass ./__typetests__/expect-only.test.ts
  is describe?
    - skip is skipped?
  is skipped describe?
    - skip is skipped?
  + is number?
  - skip is skipped?
  - todo is todo?

Targets:    1 passed, 1 total
Test files: 1 passed, 1 total
Tests:      3 skipped, 1 todo, 1 passed, 5 total
Assertions: 5 skipped, 3 passed, 8 total
Duration:   <<timestamp>>

Ran test files matching 'expect-only.test.ts'.
"
`;

exports[`expect.skip: stdout 1`] = `
"uses TypeScript <<version>> with ./tsconfig.json

pass ./__typetests__/expect-skip.test.ts
  is describe?
    + is string?
  is skipped describe?
    - skip is skipped?
  + is number?
  + is assignable?
  - skip is skipped?
  - todo is todo?

Targets:    1 passed, 1 total
Test files: 1 passed, 1 total
Tests:      2 skipped, 1 todo, 3 passed, 6 total
Assertions: 6 skipped, 3 passed, 9 total
Duration:   <<timestamp>>

Ran test files matching 'expect-skip.test.ts'.
"
`;

exports[`expect: stderr 1`] = `
"Error: Type 'undefined' is not identical to type 'void'.

   5 | });
   6 | 
>  7 | expect<void>().type.toBeUndefined();
     |                     ^
   8 | 
   9 | describe("is describe?", () => {
  10 |   test("is number?", () => {

       at ./__typetests__/top-level-expect.tst.ts:7:21

Error: Type 'void' is not identical to type 'number'.

  10 |   test("is number?", () => {
  11 |     expect<number>().type.toBeNumber();
> 12 |     expect<number>().type.toBeVoid();
     |                           ^
  13 |   });
  14 | });
  15 | 

       at ./__typetests__/top-level-expect.tst.ts:12:27 ❭ is describe? ❭ is number?

Error: Type 'void' is not identical to type 'number'.

  15 | 
  16 | expect<null>().type.toBeNull();
> 17 | expect<number>().type.toBeVoid();
     |                       ^
  18 | 

       at ./__typetests__/top-level-expect.tst.ts:17:23

"
`;

exports[`expect: stdout 1`] = `
"uses TypeScript <<version>> with ./tsconfig.json

fail ./__typetests__/top-level-expect.tst.ts
  + is string?
  is describe?
    × is number?

Targets:    1 failed, 1 total
Test files: 1 failed, 1 total
Tests:      1 failed, 1 passed, 2 total
Assertions: 3 failed, 3 passed, 6 total
Duration:   <<timestamp>>

Ran test files matching 'top-level-expect.tst.ts'.
"
`;

exports[`handles '--failFast' option: stderr 1`] = `
"Error: Type 'undefined' is not identical to type 'void'.

   5 | });
   6 | 
>  7 | expect<void>().type.toBeUndefined();
     |                     ^
   8 | 
   9 | describe("is describe?", () => {
  10 |   test("is number?", () => {

       at ./__typetests__/top-level-expect.tst.ts:7:21

"
`;

exports[`handles '--failFast' option: stdout 1`] = `
"uses TypeScript <<version>> with ./tsconfig.json

fail ./__typetests__/top-level-expect.tst.ts
  + is string?

Targets:    1 failed, 1 total
Test files: 1 failed, 1 total
Tests:      1 passed, 1 total
Assertions: 1 failed, 1 passed, 2 total
Duration:   <<timestamp>>

Ran test files matching 'top-level-expect.tst.ts'.
"
`;
