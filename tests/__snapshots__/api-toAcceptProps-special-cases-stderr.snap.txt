Error: Component accepts props of the given type.

Type '{ one: string; }' is assignable with type '{ one: string; }'.

   8 | 
   9 |     expect(Default).type.toAcceptProps({ one: "sample" });
  10 |     expect(Default).type.not.toAcceptProps({ one: "sample" }); // fail
     |                                            ~~~~~~~~~~~~~~~~~
  11 | 
  12 |     expect(Default).type.not.toAcceptProps({});
  13 |     expect(Default).type.toAcceptProps({}); // fail

       at ./__typetests__/special-cases.tst.tsx:10:44 ❭ special cases ❭ when the 'props' argument has a default value

Error: Component does not accept props of the given type.

Type '{ one: string; }' is not assignable with type '{}'.
Type '{ one: string; }' requires property 'one'.

  11 | 
  12 |     expect(Default).type.not.toAcceptProps({});
  13 |     expect(Default).type.toAcceptProps({}); // fail
     |                                        ~~
  14 | 
  15 |     expect(Default).type.not.toAcceptProps({ two: false });
  16 |     expect(Default).type.toAcceptProps({ two: false }); // fail

       at ./__typetests__/special-cases.tst.tsx:13:40 ❭ special cases ❭ when the 'props' argument has a default value

Error: Component does not accept props of the given type.

Type '{ one: string; }' is not compatible with type '{ two: boolean; }'.
Type '{ one: string; }' does not have property 'two'.

  14 | 
  15 |     expect(Default).type.not.toAcceptProps({ two: false });
  16 |     expect(Default).type.toAcceptProps({ two: false }); // fail
     |                                          ~~~
  17 | 
  18 |     expect(Default).type.not.toAcceptProps({ one: false });
  19 |     expect(Default).type.toAcceptProps({ one: false }); // fail

       at ./__typetests__/special-cases.tst.tsx:16:42 ❭ special cases ❭ when the 'props' argument has a default value

Error: Component does not accept props of the given type.

Type '{ one: string; }' is not assignable with type '{ two: boolean; }'.
Type '{ one: string; }' requires property 'one'.

  14 | 
  15 |     expect(Default).type.not.toAcceptProps({ two: false });
  16 |     expect(Default).type.toAcceptProps({ two: false }); // fail
     |                                        ~~~~~~~~~~~~~~
  17 | 
  18 |     expect(Default).type.not.toAcceptProps({ one: false });
  19 |     expect(Default).type.toAcceptProps({ one: false }); // fail

       at ./__typetests__/special-cases.tst.tsx:16:40 ❭ special cases ❭ when the 'props' argument has a default value

Error: Component does not accept props of the given type.

Type '{ one: string; }' is not assignable with type '{ one: boolean; }'.
Types of property 'one' are not compatible.
Type 'string' is not assignable with type 'boolean'.

  17 | 
  18 |     expect(Default).type.not.toAcceptProps({ one: false });
  19 |     expect(Default).type.toAcceptProps({ one: false }); // fail
     |                                          ~~~
  20 |   });
  21 | 
  22 |   test("when the 'props' is a union", () => {

       at ./__typetests__/special-cases.tst.tsx:19:42 ❭ special cases ❭ when the 'props' argument has a default value

Error: Component accepts props of the given type.

Type 'One | Other' is assignable with type '{ one: string; }'.
Type 'One' is assignable with type '{ one: string; }'.

  33 | 
  34 |     expect(OneOrTheOther).type.toAcceptProps({ one: "Pass" });
  35 |     expect(OneOrTheOther).type.not.toAcceptProps({ one: "Pass" }); // fail
     |                                                  ~~~~~~~~~~~~~~~
  36 | 
  37 |     expect(OneOrTheOther).type.toAcceptProps({ two: "Pass" });
  38 |     expect(OneOrTheOther).type.not.toAcceptProps({ two: "Pass" }); // fail

       at ./__typetests__/special-cases.tst.tsx:35:50 ❭ special cases ❭ when the 'props' is a union

Error: Component accepts props of the given type.

Type 'One | Other' is assignable with type '{ two: string; }'.
Type 'Other' is assignable with type '{ two: string; }'.

  36 | 
  37 |     expect(OneOrTheOther).type.toAcceptProps({ two: "Pass" });
  38 |     expect(OneOrTheOther).type.not.toAcceptProps({ two: "Pass" }); // fail
     |                                                  ~~~~~~~~~~~~~~~
  39 | 
  40 |     expect(OneOrTheOther).type.not.toAcceptProps({ one: "Fail", two: "Fail" });
  41 |     expect(OneOrTheOther).type.toAcceptProps({ one: "Fail", two: "Fail" }); // fail

       at ./__typetests__/special-cases.tst.tsx:38:50 ❭ special cases ❭ when the 'props' is a union

Error: Component does not accept props of the given type.

Type 'One | Other' is not assignable with type '{ one: string; two: string; }'.
Type 'One' is not assignable with type '{ one: string; two: string; }'.
Types of property 'two' are not compatible.
Type 'undefined' is not assignable with type 'string'.

  39 | 
  40 |     expect(OneOrTheOther).type.not.toAcceptProps({ one: "Fail", two: "Fail" });
  41 |     expect(OneOrTheOther).type.toAcceptProps({ one: "Fail", two: "Fail" }); // fail
     |                                                             ~~~
  42 | 
  43 |     expect(OneOrTheOther).type.not.toAcceptProps({});
  44 |     expect(OneOrTheOther).type.toAcceptProps({}); // fail

       at ./__typetests__/special-cases.tst.tsx:41:61 ❭ special cases ❭ when the 'props' is a union

Error: Component does not accept props of the given type.

Type 'One | Other' is not assignable with type '{ one: string; two: string; }'.
Type 'Other' is not assignable with type '{ one: string; two: string; }'.
Types of property 'one' are not compatible.
Type 'undefined' is not assignable with type 'string'.

  39 | 
  40 |     expect(OneOrTheOther).type.not.toAcceptProps({ one: "Fail", two: "Fail" });
  41 |     expect(OneOrTheOther).type.toAcceptProps({ one: "Fail", two: "Fail" }); // fail
     |                                                ~~~
  42 | 
  43 |     expect(OneOrTheOther).type.not.toAcceptProps({});
  44 |     expect(OneOrTheOther).type.toAcceptProps({}); // fail

       at ./__typetests__/special-cases.tst.tsx:41:48 ❭ special cases ❭ when the 'props' is a union

Error: Component does not accept props of the given type.

Type 'One | Other' is not assignable with type '{}'.
Type 'One' is not assignable with type '{}'.
Type 'One' requires property 'one'.

  42 | 
  43 |     expect(OneOrTheOther).type.not.toAcceptProps({});
  44 |     expect(OneOrTheOther).type.toAcceptProps({}); // fail
     |                                              ~~
  45 | 
  46 |     expect(OneOrTheOther).type.not.toAcceptProps({ three: false });
  47 |     expect(OneOrTheOther).type.toAcceptProps({ three: false }); // fail

       at ./__typetests__/special-cases.tst.tsx:44:46 ❭ special cases ❭ when the 'props' is a union

Error: Component does not accept props of the given type.

Type 'One | Other' is not assignable with type '{}'.
Type 'Other' is not assignable with type '{}'.
Type 'Other' requires property 'two'.

  42 | 
  43 |     expect(OneOrTheOther).type.not.toAcceptProps({});
  44 |     expect(OneOrTheOther).type.toAcceptProps({}); // fail
     |                                              ~~
  45 | 
  46 |     expect(OneOrTheOther).type.not.toAcceptProps({ three: false });
  47 |     expect(OneOrTheOther).type.toAcceptProps({ three: false }); // fail

       at ./__typetests__/special-cases.tst.tsx:44:46 ❭ special cases ❭ when the 'props' is a union

Error: Component does not accept props of the given type.

Type 'One | Other' is not assignable with type '{ three: boolean; }'.
Type 'One' is not compatible with type '{ three: boolean; }'.
Type 'One' does not have property 'three'.

  45 | 
  46 |     expect(OneOrTheOther).type.not.toAcceptProps({ three: false });
  47 |     expect(OneOrTheOther).type.toAcceptProps({ three: false }); // fail
     |                                                ~~~~~
  48 |   });
  49 | });
  50 | 

       at ./__typetests__/special-cases.tst.tsx:47:48 ❭ special cases ❭ when the 'props' is a union

Error: Component does not accept props of the given type.

Type 'One | Other' is not assignable with type '{ three: boolean; }'.
Type 'One' is not assignable with type '{ three: boolean; }'.
Type 'One' requires property 'one'.

  45 | 
  46 |     expect(OneOrTheOther).type.not.toAcceptProps({ three: false });
  47 |     expect(OneOrTheOther).type.toAcceptProps({ three: false }); // fail
     |                                              ~~~~~~~~~~~~~~~~
  48 |   });
  49 | });
  50 | 

       at ./__typetests__/special-cases.tst.tsx:47:46 ❭ special cases ❭ when the 'props' is a union

Error: Component does not accept props of the given type.

Type 'One | Other' is not assignable with type '{ three: boolean; }'.
Type 'Other' is not compatible with type '{ three: boolean; }'.
Type 'Other' does not have property 'three'.

  45 | 
  46 |     expect(OneOrTheOther).type.not.toAcceptProps({ three: false });
  47 |     expect(OneOrTheOther).type.toAcceptProps({ three: false }); // fail
     |                                                ~~~~~
  48 |   });
  49 | });
  50 | 

       at ./__typetests__/special-cases.tst.tsx:47:48 ❭ special cases ❭ when the 'props' is a union

Error: Component does not accept props of the given type.

Type 'One | Other' is not assignable with type '{ three: boolean; }'.
Type 'Other' is not assignable with type '{ three: boolean; }'.
Type 'Other' requires property 'two'.

  45 | 
  46 |     expect(OneOrTheOther).type.not.toAcceptProps({ three: false });
  47 |     expect(OneOrTheOther).type.toAcceptProps({ three: false }); // fail
     |                                              ~~~~~~~~~~~~~~~~
  48 |   });
  49 | });
  50 | 

       at ./__typetests__/special-cases.tst.tsx:47:46 ❭ special cases ❭ when the 'props' is a union

