Error: Component does not accept props of the given type.

Type '{}' is not assignable to type '{ one: string; }'.
Property 'one' is required in type '{ one: string; }'.

  23 |     expect(Default).type.toAcceptProps({ one: "sample" });
  24 | 
> 25 |     expect(Default).type.toAcceptProps({}); // fail
     |                                        ^
  26 |     expect(Default).type.toAcceptProps({ two: false }); // fail
  27 |     expect(Default).type.toAcceptProps({ one: false }); // fail
  28 |   });

       at ./__typetests__/special-cases.tst.tsx:25:40 ❭ special cases ❭ when the 'props' argument has a default value

Error: Component does not accept props of the given type.

Type '{ two: boolean; }' is not compatible with type '{ one: string; }'.
Property 'two' does not exist in type '{ one: string; }'.

  24 | 
  25 |     expect(Default).type.toAcceptProps({}); // fail
> 26 |     expect(Default).type.toAcceptProps({ two: false }); // fail
     |                                          ^
  27 |     expect(Default).type.toAcceptProps({ one: false }); // fail
  28 |   });
  29 | 

       at ./__typetests__/special-cases.tst.tsx:26:42 ❭ special cases ❭ when the 'props' argument has a default value

Error: Component does not accept props of the given type.

Type '{ two: boolean; }' is not assignable to type '{ one: string; }'.
Property 'one' is required in type '{ one: string; }'.

  24 | 
  25 |     expect(Default).type.toAcceptProps({}); // fail
> 26 |     expect(Default).type.toAcceptProps({ two: false }); // fail
     |                                        ^
  27 |     expect(Default).type.toAcceptProps({ one: false }); // fail
  28 |   });
  29 | 

       at ./__typetests__/special-cases.tst.tsx:26:40 ❭ special cases ❭ when the 'props' argument has a default value

Error: Component does not accept props of the given type.

Type '{ one: boolean; }' is not assignable to type '{ one: string; }'.
Types of property 'one' are incompatible.
Type 'boolean' is not assignable to type 'string'.

  25 |     expect(Default).type.toAcceptProps({}); // fail
  26 |     expect(Default).type.toAcceptProps({ two: false }); // fail
> 27 |     expect(Default).type.toAcceptProps({ one: false }); // fail
     |                                          ^
  28 |   });
  29 | 
  30 |   test.todo("when the 'props' is a union", () => {

       at ./__typetests__/special-cases.tst.tsx:27:42 ❭ special cases ❭ when the 'props' argument has a default value

