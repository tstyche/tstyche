Error: An argument for 'source' or type argument for 'Source' must be provided.

  3 | describe("argument for 'source'", () => {
  4 |   test("must be provided", () => {
  5 |     expect().type.toBeAssignableTo<{ test: void }>();
    |     ~~~~~~
  6 |   });
  7 | 
  8 |   test("cannot be of type 'any', 'never' or 'unknown'", () => {

      at ./__typetests__/toBeAssignableTo.tst.ts:5:5

Error: A type argument for 'Source' cannot be of the 'any' type.

The 'any' type is assignable to every type.
If this check is necessary, use the '.toBeAny()' matcher instead.

   7 | 
   8 |   test("cannot be of type 'any', 'never' or 'unknown'", () => {
   9 |     expect<any>().type.toBeAssignableTo<{ a: number }>(); // use '.toBeAny()'
     |            ~~~
  10 |     expect<any>().type.not.toBeAssignableTo<{ a: number }>();
  11 | 
  12 |     expect<never>().type.toBeAssignableTo<{ a: number }>(); // use '.toBeNever()'

       at ./__typetests__/toBeAssignableTo.tst.ts:9:12

Error: Type 'any' is assignable to type '{ a: number; }'.

   8 |   test("cannot be of type 'any', 'never' or 'unknown'", () => {
   9 |     expect<any>().type.toBeAssignableTo<{ a: number }>(); // use '.toBeAny()'
  10 |     expect<any>().type.not.toBeAssignableTo<{ a: number }>();
     |                                             ~~~~~~~~~~~~~
  11 | 
  12 |     expect<never>().type.toBeAssignableTo<{ a: number }>(); // use '.toBeNever()'
  13 |     expect<never>().type.not.toBeAssignableTo<{ a: number }>();

       at ./__typetests__/toBeAssignableTo.tst.ts:10:45 ❭ argument for 'source' ❭ cannot be of type 'any', 'never' or 'unknown'

Error: A type argument for 'Source' cannot be of the 'never' type.

The 'never' type is assignable to every type.
If this check is necessary, use the '.toBeNever()' matcher instead.

  10 |     expect<any>().type.not.toBeAssignableTo<{ a: number }>();
  11 | 
  12 |     expect<never>().type.toBeAssignableTo<{ a: number }>(); // use '.toBeNever()'
     |            ~~~~~
  13 |     expect<never>().type.not.toBeAssignableTo<{ a: number }>();
  14 | 
  15 |     expect<unknown>().type.not.toBeAssignableTo<{ a: number }>(); // use '.toBeUnknown()'

       at ./__typetests__/toBeAssignableTo.tst.ts:12:12

Error: Type 'never' is assignable to type '{ a: number; }'.

  11 | 
  12 |     expect<never>().type.toBeAssignableTo<{ a: number }>(); // use '.toBeNever()'
  13 |     expect<never>().type.not.toBeAssignableTo<{ a: number }>();
     |                                               ~~~~~~~~~~~~~
  14 | 
  15 |     expect<unknown>().type.not.toBeAssignableTo<{ a: number }>(); // use '.toBeUnknown()'
  16 |     expect<unknown>().type.toBeAssignableTo<{ a: number }>();

       at ./__typetests__/toBeAssignableTo.tst.ts:13:47 ❭ argument for 'source' ❭ cannot be of type 'any', 'never' or 'unknown'

Error: A type argument for 'Source' cannot be of the 'unknown' type.

The 'unknown' type is not assignable to every type.
If this check is necessary, use the '.toBeUnknown()' matcher instead.

  13 |     expect<never>().type.not.toBeAssignableTo<{ a: number }>();
  14 | 
  15 |     expect<unknown>().type.not.toBeAssignableTo<{ a: number }>(); // use '.toBeUnknown()'
     |            ~~~~~~~
  16 |     expect<unknown>().type.toBeAssignableTo<{ a: number }>();
  17 |   });
  18 | });

       at ./__typetests__/toBeAssignableTo.tst.ts:15:12

Error: Type 'unknown' is not assignable to type '{ a: number; }'.

  14 | 
  15 |     expect<unknown>().type.not.toBeAssignableTo<{ a: number }>(); // use '.toBeUnknown()'
  16 |     expect<unknown>().type.toBeAssignableTo<{ a: number }>();
     |                                             ~~~~~~~~~~~~~
  17 |   });
  18 | });
  19 | 

       at ./__typetests__/toBeAssignableTo.tst.ts:16:45 ❭ argument for 'source' ❭ cannot be of type 'any', 'never' or 'unknown'

Error: A type argument for 'Source' cannot be of the 'any' type.

The 'any' type is assignable to every type.
If this check is necessary, use the '.toBeAny()' matcher instead.

  20 | describe("type argument for 'Source'", () => {
  21 |   test("cannot be of type 'any', 'never' or 'unknown'", () => {
  22 |     expect<any>().type.toBeAssignableTo<{ a: number }>(); // use '.toBeAny()'
     |            ~~~
  23 |     expect<any>().type.not.toBeAssignableTo<{ a: number }>();
  24 | 
  25 |     expect<never>().type.toBeAssignableTo<{ a: number }>(); // use '.toBeNever()'

       at ./__typetests__/toBeAssignableTo.tst.ts:22:12

Error: Type 'any' is assignable to type '{ a: number; }'.

  21 |   test("cannot be of type 'any', 'never' or 'unknown'", () => {
  22 |     expect<any>().type.toBeAssignableTo<{ a: number }>(); // use '.toBeAny()'
  23 |     expect<any>().type.not.toBeAssignableTo<{ a: number }>();
     |                                             ~~~~~~~~~~~~~
  24 | 
  25 |     expect<never>().type.toBeAssignableTo<{ a: number }>(); // use '.toBeNever()'
  26 |     expect<never>().type.not.toBeAssignableTo<{ a: number }>();

       at ./__typetests__/toBeAssignableTo.tst.ts:23:45 ❭ type argument for 'Source' ❭ cannot be of type 'any', 'never' or 'unknown'

Error: A type argument for 'Source' cannot be of the 'never' type.

The 'never' type is assignable to every type.
If this check is necessary, use the '.toBeNever()' matcher instead.

  23 |     expect<any>().type.not.toBeAssignableTo<{ a: number }>();
  24 | 
  25 |     expect<never>().type.toBeAssignableTo<{ a: number }>(); // use '.toBeNever()'
     |            ~~~~~
  26 |     expect<never>().type.not.toBeAssignableTo<{ a: number }>();
  27 | 
  28 |     expect<unknown>().type.not.toBeAssignableTo<{ a: number }>(); // use '.toBeUnknown()'

       at ./__typetests__/toBeAssignableTo.tst.ts:25:12

Error: Type 'never' is assignable to type '{ a: number; }'.

  24 | 
  25 |     expect<never>().type.toBeAssignableTo<{ a: number }>(); // use '.toBeNever()'
  26 |     expect<never>().type.not.toBeAssignableTo<{ a: number }>();
     |                                               ~~~~~~~~~~~~~
  27 | 
  28 |     expect<unknown>().type.not.toBeAssignableTo<{ a: number }>(); // use '.toBeUnknown()'
  29 |     expect<unknown>().type.toBeAssignableTo<{ a: number }>();

       at ./__typetests__/toBeAssignableTo.tst.ts:26:47 ❭ type argument for 'Source' ❭ cannot be of type 'any', 'never' or 'unknown'

Error: A type argument for 'Source' cannot be of the 'unknown' type.

The 'unknown' type is not assignable to every type.
If this check is necessary, use the '.toBeUnknown()' matcher instead.

  26 |     expect<never>().type.not.toBeAssignableTo<{ a: number }>();
  27 | 
  28 |     expect<unknown>().type.not.toBeAssignableTo<{ a: number }>(); // use '.toBeUnknown()'
     |            ~~~~~~~
  29 |     expect<unknown>().type.toBeAssignableTo<{ a: number }>();
  30 |   });
  31 | });

       at ./__typetests__/toBeAssignableTo.tst.ts:28:12

Error: Type 'unknown' is not assignable to type '{ a: number; }'.

  27 | 
  28 |     expect<unknown>().type.not.toBeAssignableTo<{ a: number }>(); // use '.toBeUnknown()'
  29 |     expect<unknown>().type.toBeAssignableTo<{ a: number }>();
     |                                             ~~~~~~~~~~~~~
  30 |   });
  31 | });
  32 | 

       at ./__typetests__/toBeAssignableTo.tst.ts:29:45 ❭ type argument for 'Source' ❭ cannot be of type 'any', 'never' or 'unknown'

Error: An argument for 'target' or type argument for 'Target' must be provided.

  33 | describe("argument for 'target'", () => {
  34 |   test("must be provided", () => {
  35 |     expect<{ test: void }>().type.toBeAssignableTo();
     |                                   ~~~~~~~~~~~~~~~~
  36 |   });
  37 | 
  38 |   test("cannot be of type 'any', 'never' or 'unknown'", () => {

       at ./__typetests__/toBeAssignableTo.tst.ts:35:35

Error: An argument for 'target' cannot be of the 'any' type.

Every type is assignable to the 'any' type.
If this check is necessary, use the '.toBeAny()' matcher instead.

  37 | 
  38 |   test("cannot be of type 'any', 'never' or 'unknown'", () => {
  39 |     expect<{ a: number }>().type.toBeAssignableTo({} as any); // use '.toBeAny()'
     |                                                   ~~~~~~~~~
  40 |     expect<{ a: number }>().type.not.toBeAssignableTo({} as any);
  41 | 
  42 |     expect<{ a: number }>().type.toBeAssignableTo({} as unknown); // use '.toBeUnknown()'

       at ./__typetests__/toBeAssignableTo.tst.ts:39:51

Error: Type '{ a: number; }' is assignable to type 'any'.

  38 |   test("cannot be of type 'any', 'never' or 'unknown'", () => {
  39 |     expect<{ a: number }>().type.toBeAssignableTo({} as any); // use '.toBeAny()'
  40 |     expect<{ a: number }>().type.not.toBeAssignableTo({} as any);
     |                                                       ~~~~~~~~~
  41 | 
  42 |     expect<{ a: number }>().type.toBeAssignableTo({} as unknown); // use '.toBeUnknown()'
  43 |     expect<{ a: number }>().type.not.toBeAssignableTo({} as unknown);

       at ./__typetests__/toBeAssignableTo.tst.ts:40:55 ❭ argument for 'target' ❭ cannot be of type 'any', 'never' or 'unknown'

Error: An argument for 'target' cannot be of the 'unknown' type.

Every type is assignable to the 'unknown' type.
If this check is necessary, use the '.toBeUnknown()' matcher instead.

  40 |     expect<{ a: number }>().type.not.toBeAssignableTo({} as any);
  41 | 
  42 |     expect<{ a: number }>().type.toBeAssignableTo({} as unknown); // use '.toBeUnknown()'
     |                                                   ~~~~~~~~~~~~~
  43 |     expect<{ a: number }>().type.not.toBeAssignableTo({} as unknown);
  44 | 
  45 |     expect<{ a: number }>().type.not.toBeAssignableTo({} as never); // use '.toBeNever()'

       at ./__typetests__/toBeAssignableTo.tst.ts:42:51

Error: Type '{ a: number; }' is assignable to type 'unknown'.

  41 | 
  42 |     expect<{ a: number }>().type.toBeAssignableTo({} as unknown); // use '.toBeUnknown()'
  43 |     expect<{ a: number }>().type.not.toBeAssignableTo({} as unknown);
     |                                                       ~~~~~~~~~~~~~
  44 | 
  45 |     expect<{ a: number }>().type.not.toBeAssignableTo({} as never); // use '.toBeNever()'
  46 |     expect<{ a: number }>().type.toBeAssignableTo({} as never);

       at ./__typetests__/toBeAssignableTo.tst.ts:43:55 ❭ argument for 'target' ❭ cannot be of type 'any', 'never' or 'unknown'

Error: An argument for 'target' cannot be of the 'never' type.

Every type is not assignable to the 'never' type.
If this check is necessary, use the '.toBeNever()' matcher instead.

  43 |     expect<{ a: number }>().type.not.toBeAssignableTo({} as unknown);
  44 | 
  45 |     expect<{ a: number }>().type.not.toBeAssignableTo({} as never); // use '.toBeNever()'
     |                                                       ~~~~~~~~~~~
  46 |     expect<{ a: number }>().type.toBeAssignableTo({} as never);
  47 |   });
  48 | });

       at ./__typetests__/toBeAssignableTo.tst.ts:45:55

Error: Type '{ a: number; }' is not assignable to type 'never'.

  44 | 
  45 |     expect<{ a: number }>().type.not.toBeAssignableTo({} as never); // use '.toBeNever()'
  46 |     expect<{ a: number }>().type.toBeAssignableTo({} as never);
     |                                                   ~~~~~~~~~~~
  47 |   });
  48 | });
  49 | 

       at ./__typetests__/toBeAssignableTo.tst.ts:46:51 ❭ argument for 'target' ❭ cannot be of type 'any', 'never' or 'unknown'

Error: A type argument for 'Target' cannot be of the 'any' type.

Every type is assignable to the 'any' type.
If this check is necessary, use the '.toBeAny()' matcher instead.

  50 | describe("type argument for 'Target'", () => {
  51 |   test("cannot be of type 'any', 'never' or 'unknown'", () => {
  52 |     expect<{ a: number }>().type.toBeAssignableTo<any>(); // use '.toBeAny()'
     |                                                   ~~~
  53 |     expect<{ a: number }>().type.not.toBeAssignableTo<any>();
  54 | 
  55 |     expect<{ a: number }>().type.toBeAssignableTo<unknown>(); // use '.toBeUnknown()'

       at ./__typetests__/toBeAssignableTo.tst.ts:52:51

Error: Type '{ a: number; }' is assignable to type 'any'.

  51 |   test("cannot be of type 'any', 'never' or 'unknown'", () => {
  52 |     expect<{ a: number }>().type.toBeAssignableTo<any>(); // use '.toBeAny()'
  53 |     expect<{ a: number }>().type.not.toBeAssignableTo<any>();
     |                                                       ~~~
  54 | 
  55 |     expect<{ a: number }>().type.toBeAssignableTo<unknown>(); // use '.toBeUnknown()'
  56 |     expect<{ a: number }>().type.not.toBeAssignableTo<unknown>();

       at ./__typetests__/toBeAssignableTo.tst.ts:53:55 ❭ type argument for 'Target' ❭ cannot be of type 'any', 'never' or 'unknown'

Error: A type argument for 'Target' cannot be of the 'unknown' type.

Every type is assignable to the 'unknown' type.
If this check is necessary, use the '.toBeUnknown()' matcher instead.

  53 |     expect<{ a: number }>().type.not.toBeAssignableTo<any>();
  54 | 
  55 |     expect<{ a: number }>().type.toBeAssignableTo<unknown>(); // use '.toBeUnknown()'
     |                                                   ~~~~~~~
  56 |     expect<{ a: number }>().type.not.toBeAssignableTo<unknown>();
  57 | 
  58 |     expect<{ a: number }>().type.not.toBeAssignableTo<never>(); // use '.toBeNever()'

       at ./__typetests__/toBeAssignableTo.tst.ts:55:51

Error: Type '{ a: number; }' is assignable to type 'unknown'.

  54 | 
  55 |     expect<{ a: number }>().type.toBeAssignableTo<unknown>(); // use '.toBeUnknown()'
  56 |     expect<{ a: number }>().type.not.toBeAssignableTo<unknown>();
     |                                                       ~~~~~~~
  57 | 
  58 |     expect<{ a: number }>().type.not.toBeAssignableTo<never>(); // use '.toBeNever()'
  59 |     expect<{ a: number }>().type.toBeAssignableTo<never>();

       at ./__typetests__/toBeAssignableTo.tst.ts:56:55 ❭ type argument for 'Target' ❭ cannot be of type 'any', 'never' or 'unknown'

Error: A type argument for 'Target' cannot be of the 'never' type.

Every type is not assignable to the 'never' type.
If this check is necessary, use the '.toBeNever()' matcher instead.

  56 |     expect<{ a: number }>().type.not.toBeAssignableTo<unknown>();
  57 | 
  58 |     expect<{ a: number }>().type.not.toBeAssignableTo<never>(); // use '.toBeNever()'
     |                                                       ~~~~~
  59 |     expect<{ a: number }>().type.toBeAssignableTo<never>();
  60 |   });
  61 | });

       at ./__typetests__/toBeAssignableTo.tst.ts:58:55

Error: Type '{ a: number; }' is not assignable to type 'never'.

  57 | 
  58 |     expect<{ a: number }>().type.not.toBeAssignableTo<never>(); // use '.toBeNever()'
  59 |     expect<{ a: number }>().type.toBeAssignableTo<never>();
     |                                                   ~~~~~
  60 |   });
  61 | });
  62 | 

       at ./__typetests__/toBeAssignableTo.tst.ts:59:51 ❭ type argument for 'Target' ❭ cannot be of type 'any', 'never' or 'unknown'

