Error: Type '{ a?: number | undefined; }' is identical to type '{ a?: number | undefined; }'.

  23 |   // all four assertion pass only when '"exactOptionalPropertyTypes": true' is set
  24 | 
  25 |   expect<{ a?: number }>().type.not.toBe<{ a?: number | undefined }>();
     |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~
  26 |   expect<{ a?: number | undefined }>().type.not.toBe<{ a?: number }>();
  27 | 
  28 |   expect<{ a?: number }>().type.not.toBeAssignableWith<{ a?: number | undefined }>();

       at ./__typetests__/toBe.tst.ts:25:42 ❭ exact optional property types

Error: Type '{ a?: number | undefined; }' is identical to type '{ a?: number | undefined; }'.

  24 | 
  25 |   expect<{ a?: number }>().type.not.toBe<{ a?: number | undefined }>();
  26 |   expect<{ a?: number | undefined }>().type.not.toBe<{ a?: number }>();
     |                                                      ~~~~~~~~~~~~~~
  27 | 
  28 |   expect<{ a?: number }>().type.not.toBeAssignableWith<{ a?: number | undefined }>();
  29 |   expect<{ a?: number | undefined }>().type.not.toBeAssignableTo<{ a?: number }>();

       at ./__typetests__/toBe.tst.ts:26:54 ❭ exact optional property types

Error: Type '{ a?: number | undefined; }' is assignable with type '{ a?: number | undefined; }'.

  26 |   expect<{ a?: number | undefined }>().type.not.toBe<{ a?: number }>();
  27 | 
  28 |   expect<{ a?: number }>().type.not.toBeAssignableWith<{ a?: number | undefined }>();
     |                                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~
  29 |   expect<{ a?: number | undefined }>().type.not.toBeAssignableTo<{ a?: number }>();
  30 | });
  31 | 

       at ./__typetests__/toBe.tst.ts:28:56 ❭ exact optional property types

Error: Type '{ a?: number | undefined; }' is assignable to type '{ a?: number | undefined; }'.

  27 | 
  28 |   expect<{ a?: number }>().type.not.toBeAssignableWith<{ a?: number | undefined }>();
  29 |   expect<{ a?: number | undefined }>().type.not.toBeAssignableTo<{ a?: number }>();
     |                                                                  ~~~~~~~~~~~~~~
  30 | });
  31 | 
  32 | describe("source type", () => {

       at ./__typetests__/toBe.tst.ts:29:66 ❭ exact optional property types

Error: Type 'Names' is not identical to type '{ first: string; last: string; }'.

  35 |     expect<Names>().type.toBe<{ first: string; last?: string }>();
  36 | 
  37 |     expect<Names>().type.toBe<{ first: string; last: string }>();
     |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  38 |   });
  39 | 
  40 |   test("is NOT identical to target type", () => {

       at ./__typetests__/toBe.tst.ts:37:31 ❭ source type ❭ is identical to target type

Error: Type 'Names' is identical to type '{ first: string; last?: string | undefined; }'.

  41 |     expect<Names>().type.not.toBe<{ first: string; last: string }>();
  42 | 
  43 |     expect<Names>().type.not.toBe<{ first: string; last?: string }>();
     |                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  44 |   });
  45 | 
  46 |   test("is identical to target expression", () => {

       at ./__typetests__/toBe.tst.ts:43:35 ❭ source type ❭ is NOT identical to target type

Error: Type '{ first: string; last: string; }' is not identical to type 'Names'.

  48 |     expect<{ first: string; last?: string }>().type.toBe(getNames());
  49 | 
  50 |     expect<{ first: string; last: string }>().type.toBe(getNames());
     |                                                         ~~~~~~~~~~
  51 |   });
  52 | 
  53 |   test("is NOT identical to target expression", () => {

       at ./__typetests__/toBe.tst.ts:50:57 ❭ source type ❭ is identical to target expression

Error: Type '{ first: string; last?: string | undefined; }' is identical to type 'Names'.

  54 |     expect<{ first: string; last: string }>().type.not.toBe(getNames());
  55 | 
  56 |     expect<{ first: string; last?: string }>().type.not.toBe(getNames());
     |                                                              ~~~~~~~~~~
  57 |   });
  58 | });
  59 | 

       at ./__typetests__/toBe.tst.ts:56:62 ❭ source type ❭ is NOT identical to target expression

Error: Type 'Names' is not identical to type '{ first: string; last: string; }'.

  63 |     expect(getNames()).type.toBe<Names>();
  64 | 
  65 |     expect(getNames()).type.toBe<{ first: string; last: string }>();
     |                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  66 |   });
  67 | 
  68 |   test("is NOT identical to target type", () => {

       at ./__typetests__/toBe.tst.ts:65:34 ❭ source expression ❭ identical to target type

Error: Type 'Names' is identical to type '{ first: string; last?: string | undefined; }'.

  69 |     expect(getNames()).type.not.toBe<{ first: string; last: string }>();
  70 | 
  71 |     expect(getNames()).type.not.toBe<{ first: string; last?: string }>();
     |                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  72 |   });
  73 | 
  74 |   test("identical to target expression", () => {

       at ./__typetests__/toBe.tst.ts:71:38 ❭ source expression ❭ is NOT identical to target type

Error: Type '{ height: number; }' is not identical to type 'Size'.

  75 |     expect({ height: 14, width: 25 }).type.toBe(getSize());
  76 | 
  77 |     expect({ height: 14 }).type.toBe(getSize());
     |                                      ~~~~~~~~~
  78 |   });
  79 | 
  80 |   test("is NOT identical to target expression", () => {

       at ./__typetests__/toBe.tst.ts:77:38 ❭ source expression ❭ identical to target expression

Error: Type '{ height: number; width: number; }' is identical to type 'Size'.

  81 |     expect({ height: 14 }).type.not.toBe(getSize());
  82 | 
  83 |     expect({ height: 14, width: 25 }).type.not.toBe(getSize());
     |                                                     ~~~~~~~~~
  84 |   });
  85 | });
  86 | 

       at ./__typetests__/toBe.tst.ts:83:53 ❭ source expression ❭ is NOT identical to target expression

