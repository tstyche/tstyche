Error: Type '{ a: string; } | { a: string; }' is identical to type '{ a: string; }'.

  18 | 
  19 |   expect<{ a: string } | { a: string }>().type.toBe<{ a: string }>();
  20 |   expect<{ a: string } | { a: string }>().type.not.toBe<{ a: string }>();
     |                                                         ~~~~~~~~~~~~~
  21 | 
  22 |   expect(Date).type.toBe<typeof Date>();
  23 | });

       at ./__typetests__/toBe.tst.ts:20:57 ❭ edge cases

Error: Type '{ a?: number | undefined; }' is identical to type '{ a?: number | undefined; }'.

  26 |   // all four assertion pass only when '"exactOptionalPropertyTypes": true' is set
  27 | 
  28 |   expect<{ a?: number }>().type.not.toBe<{ a?: number | undefined }>();
     |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~
  29 |   expect<{ a?: number | undefined }>().type.not.toBe<{ a?: number }>();
  30 | 
  31 |   expect<{ a?: number }>().type.not.toBeAssignableWith<{ a?: number | undefined }>();

       at ./__typetests__/toBe.tst.ts:28:42 ❭ exact optional property types

Error: Type '{ a?: number | undefined; }' is identical to type '{ a?: number | undefined; }'.

  27 | 
  28 |   expect<{ a?: number }>().type.not.toBe<{ a?: number | undefined }>();
  29 |   expect<{ a?: number | undefined }>().type.not.toBe<{ a?: number }>();
     |                                                      ~~~~~~~~~~~~~~
  30 | 
  31 |   expect<{ a?: number }>().type.not.toBeAssignableWith<{ a?: number | undefined }>();
  32 |   expect<{ a?: number | undefined }>().type.not.toBeAssignableTo<{ a?: number }>();

       at ./__typetests__/toBe.tst.ts:29:54 ❭ exact optional property types

Error: Type '{ a?: number | undefined; }' is assignable with type '{ a?: number | undefined; }'.

  29 |   expect<{ a?: number | undefined }>().type.not.toBe<{ a?: number }>();
  30 | 
  31 |   expect<{ a?: number }>().type.not.toBeAssignableWith<{ a?: number | undefined }>();
     |                                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~
  32 |   expect<{ a?: number | undefined }>().type.not.toBeAssignableTo<{ a?: number }>();
  33 | });
  34 | 

       at ./__typetests__/toBe.tst.ts:31:56 ❭ exact optional property types

Error: Type '{ a?: number | undefined; }' is assignable to type '{ a?: number | undefined; }'.

  30 | 
  31 |   expect<{ a?: number }>().type.not.toBeAssignableWith<{ a?: number | undefined }>();
  32 |   expect<{ a?: number | undefined }>().type.not.toBeAssignableTo<{ a?: number }>();
     |                                                                  ~~~~~~~~~~~~~~
  33 | });
  34 | 
  35 | describe("source type", () => {

       at ./__typetests__/toBe.tst.ts:32:66 ❭ exact optional property types

Error: Type 'Names' is not identical to type '{ first: string; last: string; }'.

  38 |     expect<Names>().type.toBe<{ first: string; last?: string }>();
  39 | 
  40 |     expect<Names>().type.toBe<{ first: string; last: string }>();
     |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  41 |   });
  42 | 
  43 |   test("is NOT identical to target type", () => {

       at ./__typetests__/toBe.tst.ts:40:31 ❭ source type ❭ is identical to target type

Error: Type 'Names' is identical to type '{ first: string; last?: string | undefined; }'.

  44 |     expect<Names>().type.not.toBe<{ first: string; last: string }>();
  45 | 
  46 |     expect<Names>().type.not.toBe<{ first: string; last?: string }>();
     |                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  47 |   });
  48 | 
  49 |   test("is identical to target expression", () => {

       at ./__typetests__/toBe.tst.ts:46:35 ❭ source type ❭ is NOT identical to target type

Error: Type '{ first: string; last: string; }' is not identical to type 'Names'.

  51 |     expect<{ first: string; last?: string }>().type.toBe(getNames());
  52 | 
  53 |     expect<{ first: string; last: string }>().type.toBe(getNames());
     |                                                         ~~~~~~~~~~
  54 |   });
  55 | 
  56 |   test("is NOT identical to target expression", () => {

       at ./__typetests__/toBe.tst.ts:53:57 ❭ source type ❭ is identical to target expression

Error: Type '{ first: string; last?: string | undefined; }' is identical to type 'Names'.

  57 |     expect<{ first: string; last: string }>().type.not.toBe(getNames());
  58 | 
  59 |     expect<{ first: string; last?: string }>().type.not.toBe(getNames());
     |                                                              ~~~~~~~~~~
  60 |   });
  61 | });
  62 | 

       at ./__typetests__/toBe.tst.ts:59:62 ❭ source type ❭ is NOT identical to target expression

Error: Type 'Names' is not identical to type '{ first: string; last: string; }'.

  66 |     expect(getNames()).type.toBe<Names>();
  67 | 
  68 |     expect(getNames()).type.toBe<{ first: string; last: string }>();
     |                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  69 |   });
  70 | 
  71 |   test("is NOT identical to target type", () => {

       at ./__typetests__/toBe.tst.ts:68:34 ❭ source expression ❭ identical to target type

Error: Type 'Names' is identical to type '{ first: string; last?: string | undefined; }'.

  72 |     expect(getNames()).type.not.toBe<{ first: string; last: string }>();
  73 | 
  74 |     expect(getNames()).type.not.toBe<{ first: string; last?: string }>();
     |                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  75 |   });
  76 | 
  77 |   test("identical to target expression", () => {

       at ./__typetests__/toBe.tst.ts:74:38 ❭ source expression ❭ is NOT identical to target type

Error: Type '{ height: number; }' is not identical to type 'Size'.

  78 |     expect({ height: 14, width: 25 }).type.toBe(getSize());
  79 | 
  80 |     expect({ height: 14 }).type.toBe(getSize());
     |                                      ~~~~~~~~~
  81 |   });
  82 | 
  83 |   test("is NOT identical to target expression", () => {

       at ./__typetests__/toBe.tst.ts:80:38 ❭ source expression ❭ identical to target expression

Error: Type '{ height: number; width: number; }' is identical to type 'Size'.

  84 |     expect({ height: 14 }).type.not.toBe(getSize());
  85 | 
  86 |     expect({ height: 14, width: 25 }).type.not.toBe(getSize());
     |                                                     ~~~~~~~~~
  87 |   });
  88 | });
  89 | 

       at ./__typetests__/toBe.tst.ts:86:53 ❭ source expression ❭ is NOT identical to target expression

