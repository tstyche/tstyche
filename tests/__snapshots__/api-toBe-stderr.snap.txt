Error: Type '{ a: string; } | { a: string; }' is identical to type '{ a: string; }'.

  18 | 
  19 |   expect<{ a: string } | { a: string }>().type.toBe<{ a: string }>();
  20 |   expect<{ a: string } | { a: string }>().type.not.toBe<{ a: string }>();
     |                                                         ~~~~~~~~~~~~~
  21 | 
  22 |   expect<{ a: string } & { a: string }>().type.toBe<{ a: string }>();
  23 |   expect<{ a: string } & { a: string }>().type.not.toBe<{ a: string }>();

       at ./__typetests__/toBe.tst.ts:20:57 ❭ edge cases

Error: Type '{ a: string; } & { a: string; }' is identical to type '{ a: string; }'.

  21 | 
  22 |   expect<{ a: string } & { a: string }>().type.toBe<{ a: string }>();
  23 |   expect<{ a: string } & { a: string }>().type.not.toBe<{ a: string }>();
     |                                                         ~~~~~~~~~~~~~
  24 | 
  25 |   expect(Date).type.toBe<typeof Date>();
  26 | });

       at ./__typetests__/toBe.tst.ts:23:57 ❭ edge cases

Error: Type '{ a?: number | undefined; }' is identical to type '{ a?: number | undefined; }'.

  29 |   // all four assertion pass only when '"exactOptionalPropertyTypes": true' is set
  30 | 
  31 |   expect<{ a?: number }>().type.not.toBe<{ a?: number | undefined }>();
     |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~
  32 |   expect<{ a?: number | undefined }>().type.not.toBe<{ a?: number }>();
  33 | 
  34 |   expect<{ a?: number }>().type.not.toBeAssignableWith<{ a?: number | undefined }>();

       at ./__typetests__/toBe.tst.ts:31:42 ❭ exact optional property types

Error: Type '{ a?: number | undefined; }' is identical to type '{ a?: number | undefined; }'.

  30 | 
  31 |   expect<{ a?: number }>().type.not.toBe<{ a?: number | undefined }>();
  32 |   expect<{ a?: number | undefined }>().type.not.toBe<{ a?: number }>();
     |                                                      ~~~~~~~~~~~~~~
  33 | 
  34 |   expect<{ a?: number }>().type.not.toBeAssignableWith<{ a?: number | undefined }>();
  35 |   expect<{ a?: number | undefined }>().type.not.toBeAssignableTo<{ a?: number }>();

       at ./__typetests__/toBe.tst.ts:32:54 ❭ exact optional property types

Error: Type '{ a?: number | undefined; }' is assignable with type '{ a?: number | undefined; }'.

  32 |   expect<{ a?: number | undefined }>().type.not.toBe<{ a?: number }>();
  33 | 
  34 |   expect<{ a?: number }>().type.not.toBeAssignableWith<{ a?: number | undefined }>();
     |                                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~
  35 |   expect<{ a?: number | undefined }>().type.not.toBeAssignableTo<{ a?: number }>();
  36 | });
  37 | 

       at ./__typetests__/toBe.tst.ts:34:56 ❭ exact optional property types

Error: Type '{ a?: number | undefined; }' is assignable to type '{ a?: number | undefined; }'.

  33 | 
  34 |   expect<{ a?: number }>().type.not.toBeAssignableWith<{ a?: number | undefined }>();
  35 |   expect<{ a?: number | undefined }>().type.not.toBeAssignableTo<{ a?: number }>();
     |                                                                  ~~~~~~~~~~~~~~
  36 | });
  37 | 
  38 | describe("source type", () => {

       at ./__typetests__/toBe.tst.ts:35:66 ❭ exact optional property types

Error: Type 'Names' is not identical to type '{ first: string; last: string; }'.

  41 |     expect<Names>().type.toBe<{ first: string; last?: string }>();
  42 | 
  43 |     expect<Names>().type.toBe<{ first: string; last: string }>();
     |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  44 |   });
  45 | 
  46 |   test("is NOT identical to target type", () => {

       at ./__typetests__/toBe.tst.ts:43:31 ❭ source type ❭ is identical to target type

Error: Type 'Names' is identical to type '{ first: string; last?: string | undefined; }'.

  47 |     expect<Names>().type.not.toBe<{ first: string; last: string }>();
  48 | 
  49 |     expect<Names>().type.not.toBe<{ first: string; last?: string }>();
     |                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  50 |   });
  51 | 
  52 |   test("is identical to target expression", () => {

       at ./__typetests__/toBe.tst.ts:49:35 ❭ source type ❭ is NOT identical to target type

Error: Type '{ first: string; last: string; }' is not identical to type 'Names'.

  54 |     expect<{ first: string; last?: string }>().type.toBe(getNames());
  55 | 
  56 |     expect<{ first: string; last: string }>().type.toBe(getNames());
     |                                                         ~~~~~~~~~~
  57 |   });
  58 | 
  59 |   test("is NOT identical to target expression", () => {

       at ./__typetests__/toBe.tst.ts:56:57 ❭ source type ❭ is identical to target expression

Error: Type '{ first: string; last?: string | undefined; }' is identical to type 'Names'.

  60 |     expect<{ first: string; last: string }>().type.not.toBe(getNames());
  61 | 
  62 |     expect<{ first: string; last?: string }>().type.not.toBe(getNames());
     |                                                              ~~~~~~~~~~
  63 |   });
  64 | });
  65 | 

       at ./__typetests__/toBe.tst.ts:62:62 ❭ source type ❭ is NOT identical to target expression

Error: Type 'Names' is not identical to type '{ first: string; last: string; }'.

  69 |     expect(getNames()).type.toBe<Names>();
  70 | 
  71 |     expect(getNames()).type.toBe<{ first: string; last: string }>();
     |                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  72 |   });
  73 | 
  74 |   test("is NOT identical to target type", () => {

       at ./__typetests__/toBe.tst.ts:71:34 ❭ source expression ❭ identical to target type

Error: Type 'Names' is identical to type '{ first: string; last?: string | undefined; }'.

  75 |     expect(getNames()).type.not.toBe<{ first: string; last: string }>();
  76 | 
  77 |     expect(getNames()).type.not.toBe<{ first: string; last?: string }>();
     |                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  78 |   });
  79 | 
  80 |   test("identical to target expression", () => {

       at ./__typetests__/toBe.tst.ts:77:38 ❭ source expression ❭ is NOT identical to target type

Error: Type '{ height: number; }' is not identical to type 'Size'.

  81 |     expect({ height: 14, width: 25 }).type.toBe(getSize());
  82 | 
  83 |     expect({ height: 14 }).type.toBe(getSize());
     |                                      ~~~~~~~~~
  84 |   });
  85 | 
  86 |   test("is NOT identical to target expression", () => {

       at ./__typetests__/toBe.tst.ts:83:38 ❭ source expression ❭ identical to target expression

Error: Type '{ height: number; width: number; }' is identical to type 'Size'.

  87 |     expect({ height: 14 }).type.not.toBe(getSize());
  88 | 
  89 |     expect({ height: 14, width: 25 }).type.not.toBe(getSize());
     |                                                     ~~~~~~~~~
  90 |   });
  91 | });
  92 | 

       at ./__typetests__/toBe.tst.ts:89:53 ❭ source expression ❭ is NOT identical to target expression

