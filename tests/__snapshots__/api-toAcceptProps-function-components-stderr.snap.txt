Error: Component accepts props of the given type.

  25 |   test("accepts props of the given type", () => {
  26 |     expect(None).type.toAcceptProps();
> 27 |     expect(None).type.not.toAcceptProps(); // fail
     |                           ^
  28 | 
  29 |     expect(None).type.toAcceptProps({});
  30 |     expect(None).type.not.toAcceptProps({}); // fail

       at ./__typetests__/function-components.tst.tsx:27:27 ❭ when target is a function component ❭ accepts props of the given type

Error: Component accepts props of the given type.

  28 | 
  29 |     expect(None).type.toAcceptProps({});
> 30 |     expect(None).type.not.toAcceptProps({}); // fail
     |                                         ^
  31 | 
  32 |     const noneProps = {};
  33 |     expect(None).type.toAcceptProps(noneProps);

       at ./__typetests__/function-components.tst.tsx:30:41 ❭ when target is a function component ❭ accepts props of the given type

Error: Component accepts props of the given type.

  32 |     const noneProps = {};
  33 |     expect(None).type.toAcceptProps(noneProps);
> 34 |     expect(None).type.not.toAcceptProps(noneProps); // fail
     |                                         ^
  35 | 
  36 |     expect(First).type.toAcceptProps();
  37 |     expect(First).type.not.toAcceptProps(); // fail

       at ./__typetests__/function-components.tst.tsx:34:41 ❭ when target is a function component ❭ accepts props of the given type

Error: Component accepts props of the given type.

  35 | 
  36 |     expect(First).type.toAcceptProps();
> 37 |     expect(First).type.not.toAcceptProps(); // fail
     |                            ^
  38 | 
  39 |     expect(First).type.toAcceptProps({});
  40 |     expect(First).type.not.toAcceptProps({}); // fail

       at ./__typetests__/function-components.tst.tsx:37:28 ❭ when target is a function component ❭ accepts props of the given type

Error: Component accepts props of the given type.

Type '{}' is assignable to type 'FirstProps'.

  38 | 
  39 |     expect(First).type.toAcceptProps({});
> 40 |     expect(First).type.not.toAcceptProps({}); // fail
     |                                          ^
  41 | 
  42 |     expect(Second).type.toAcceptProps({ one: "sample" });
  43 |     expect(Second).type.not.toAcceptProps({ one: "sample" }); // fail

       at ./__typetests__/function-components.tst.tsx:40:42 ❭ when target is a function component ❭ accepts props of the given type

Error: Component accepts props of the given type.

Type '{ one: string; }' is assignable to type 'SecondProps'.

  41 | 
  42 |     expect(Second).type.toAcceptProps({ one: "sample" });
> 43 |     expect(Second).type.not.toAcceptProps({ one: "sample" }); // fail
     |                                           ^
  44 | 
  45 |     const secondProps = { one: "sample" };
  46 |     expect(Second).type.toAcceptProps(secondProps);

       at ./__typetests__/function-components.tst.tsx:43:43 ❭ when target is a function component ❭ accepts props of the given type

Error: Component accepts props of the given type.

Type '{ one: string; }' is assignable to type 'SecondProps'.

  45 |     const secondProps = { one: "sample" };
  46 |     expect(Second).type.toAcceptProps(secondProps);
> 47 |     expect(Second).type.not.toAcceptProps(secondProps); // fail
     |                                           ^
  48 | 
  49 |     expect(Second).type.toAcceptProps({ one: "sample", two: true });
  50 |     expect(Second).type.not.toAcceptProps({ one: "sample", two: true }); // fail

       at ./__typetests__/function-components.tst.tsx:47:43 ❭ when target is a function component ❭ accepts props of the given type

Error: Component accepts props of the given type.

Type '{ one: string; two: boolean; }' is assignable to type 'SecondProps'.

  48 | 
  49 |     expect(Second).type.toAcceptProps({ one: "sample", two: true });
> 50 |     expect(Second).type.not.toAcceptProps({ one: "sample", two: true }); // fail
     |                                           ^
  51 | 
  52 |     const two = true;
  53 |     expect(Second).type.toAcceptProps({ one: "sample", two });

       at ./__typetests__/function-components.tst.tsx:50:43 ❭ when target is a function component ❭ accepts props of the given type

Error: Component accepts props of the given type.

Type '{ one: string; two: boolean; }' is assignable to type 'SecondProps'.

  52 |     const two = true;
  53 |     expect(Second).type.toAcceptProps({ one: "sample", two });
> 54 |     expect(Second).type.not.toAcceptProps({ one: "sample", two }); // fail
     |                                           ^
  55 | 
  56 |     // TODO initializers
  57 |     // TODO overloads

       at ./__typetests__/function-components.tst.tsx:54:43 ❭ when target is a function component ❭ accepts props of the given type

Error: Component does not accept props of the given type.

Property 'one' is required in type 'SecondProps'.

  60 |   test("property is required in props type", () => {
  61 |     expect(Second).type.not.toAcceptProps();
> 62 |     expect(Second).type.toAcceptProps(); // fail
     |                         ^
  63 | 
  64 |     expect(Second).type.not.toAcceptProps({});
  65 |     expect(Second).type.toAcceptProps({}); // fail

       at ./__typetests__/function-components.tst.tsx:62:25 ❭ when target is a function component ❭ property is required in props type

Error: Component does not accept props of the given type.

Type '{}' is not assignable to type 'SecondProps'.
Property 'one' is required in type 'SecondProps'.

  63 | 
  64 |     expect(Second).type.not.toAcceptProps({});
> 65 |     expect(Second).type.toAcceptProps({}); // fail
     |                                       ^
  66 | 
  67 |     expect(Second).type.not.toAcceptProps({ two: true });
  68 |     expect(Second).type.toAcceptProps({ two: true }); // fail

       at ./__typetests__/function-components.tst.tsx:65:39 ❭ when target is a function component ❭ property is required in props type

Error: Component does not accept props of the given type.

Type '{ two: boolean; }' is not assignable to type 'SecondProps'.
Property 'one' is required in type 'SecondProps'.

  66 | 
  67 |     expect(Second).type.not.toAcceptProps({ two: true });
> 68 |     expect(Second).type.toAcceptProps({ two: true }); // fail
     |                                       ^
  69 | 
  70 |     const secondProps = { two: true };
  71 |     expect(Second).type.not.toAcceptProps(secondProps);

       at ./__typetests__/function-components.tst.tsx:68:39 ❭ when target is a function component ❭ property is required in props type

Error: Component does not accept props of the given type.

Type '{ two: boolean; }' is not assignable to type 'SecondProps'.
Property 'one' is required in type 'SecondProps'.

  70 |     const secondProps = { two: true };
  71 |     expect(Second).type.not.toAcceptProps(secondProps);
> 72 |     expect(Second).type.toAcceptProps(secondProps); // fail
     |                                       ^
  73 | 
  74 |     const two = true;
  75 |     expect(Second).type.not.toAcceptProps({ two });

       at ./__typetests__/function-components.tst.tsx:72:39 ❭ when target is a function component ❭ property is required in props type

Error: Component does not accept props of the given type.

Type '{ two: boolean; }' is not assignable to type 'SecondProps'.
Property 'one' is required in type 'SecondProps'.

  74 |     const two = true;
  75 |     expect(Second).type.not.toAcceptProps({ two });
> 76 |     expect(Second).type.toAcceptProps({ two }); // fail
     |                                       ^
  77 | 
  78 |     // TODO initializers
  79 |     // TODO overloads

       at ./__typetests__/function-components.tst.tsx:76:39 ❭ when target is a function component ❭ property is required in props type

Error: Component does not accept props of the given type.

Type '{ one: string; two: boolean; }' is not compatible with type 'FirstProps'.
Property 'two' does not exist in type 'FirstProps'.

  82 |   test("property does not exist in props type", () => {
  83 |     expect(First).type.not.toAcceptProps({ one: "sample", two: false });
> 84 |     expect(First).type.toAcceptProps({ one: "sample", two: false }); // fail
     |                                                       ^
  85 | 
  86 |     const firstProps = { one: "sample", two: false };
  87 |     expect(First).type.not.toAcceptProps(firstProps);

       at ./__typetests__/function-components.tst.tsx:84:55 ❭ when target is a function component ❭ property does not exist in props type

Error: Component does not accept props of the given type.

Type '{ one: string; two: boolean; }' is not compatible with type 'FirstProps'.
Property 'two' does not exist in type 'FirstProps'.

  86 |     const firstProps = { one: "sample", two: false };
  87 |     expect(First).type.not.toAcceptProps(firstProps);
> 88 |     expect(First).type.toAcceptProps(firstProps); // fail
     |                                      ^
  89 | 
  90 |     expect(Second).type.not.toAcceptProps({ three: 123 });
  91 |     expect(Second).type.toAcceptProps({ three: 123 }); // fail

       at ./__typetests__/function-components.tst.tsx:88:38 ❭ when target is a function component ❭ property does not exist in props type

Error: Component does not accept props of the given type.

Type '{ three: number; }' is not compatible with type 'SecondProps'.
Property 'three' does not exist in type 'SecondProps'.

  89 | 
  90 |     expect(Second).type.not.toAcceptProps({ three: 123 });
> 91 |     expect(Second).type.toAcceptProps({ three: 123 }); // fail
     |                                         ^
  92 | 
  93 |     const secondProps = { three: 123 };
  94 |     expect(Second).type.not.toAcceptProps(secondProps);

       at ./__typetests__/function-components.tst.tsx:91:41 ❭ when target is a function component ❭ property does not exist in props type

Error: Component does not accept props of the given type.

Type '{ three: number; }' is not assignable to type 'SecondProps'.
Property 'one' is required in type 'SecondProps'.

  89 | 
  90 |     expect(Second).type.not.toAcceptProps({ three: 123 });
> 91 |     expect(Second).type.toAcceptProps({ three: 123 }); // fail
     |                                       ^
  92 | 
  93 |     const secondProps = { three: 123 };
  94 |     expect(Second).type.not.toAcceptProps(secondProps);

       at ./__typetests__/function-components.tst.tsx:91:39 ❭ when target is a function component ❭ property does not exist in props type

Error: Component does not accept props of the given type.

Type '{ three: number; }' is not compatible with type 'SecondProps'.
Property 'three' does not exist in type 'SecondProps'.

  93 |     const secondProps = { three: 123 };
  94 |     expect(Second).type.not.toAcceptProps(secondProps);
> 95 |     expect(Second).type.toAcceptProps(secondProps); // fail
     |                                       ^
  96 | 
  97 |     const three = 123;
  98 |     expect(Second).type.not.toAcceptProps({ one: "sample", two: three });

       at ./__typetests__/function-components.tst.tsx:95:39 ❭ when target is a function component ❭ property does not exist in props type

Error: Component does not accept props of the given type.

Type '{ three: number; }' is not assignable to type 'SecondProps'.
Property 'one' is required in type 'SecondProps'.

  93 |     const secondProps = { three: 123 };
  94 |     expect(Second).type.not.toAcceptProps(secondProps);
> 95 |     expect(Second).type.toAcceptProps(secondProps); // fail
     |                                       ^
  96 | 
  97 |     const three = 123;
  98 |     expect(Second).type.not.toAcceptProps({ one: "sample", two: three });

       at ./__typetests__/function-components.tst.tsx:95:39 ❭ when target is a function component ❭ property does not exist in props type

Error: Component does not accept props of the given type.

Type 'number' is not assignable to type 'boolean | undefined'.

   97 |     const three = 123;
   98 |     expect(Second).type.not.toAcceptProps({ one: "sample", two: three });
>  99 |     expect(Second).type.toAcceptProps({ one: "sample", two: three }); // fail
      |                                                        ^
  100 | 
  101 |     expect(Second).type.not.toAcceptProps({ one: "sample", two: true, three });
  102 |     expect(Second).type.toAcceptProps({ one: "sample", two: true, three }); // fail

        at ./__typetests__/function-components.tst.tsx:99:56 ❭ when target is a function component ❭ property does not exist in props type

Error: Component does not accept props of the given type.

Type '{ one: string; two: boolean; three: number; }' is not compatible with type 'SecondProps'.
Property 'three' does not exist in type 'SecondProps'.

  100 | 
  101 |     expect(Second).type.not.toAcceptProps({ one: "sample", two: true, three });
> 102 |     expect(Second).type.toAcceptProps({ one: "sample", two: true, three }); // fail
      |                                                                   ^
  103 | 
  104 |     // TODO initializers
  105 |     // TODO overloads

        at ./__typetests__/function-components.tst.tsx:102:67 ❭ when target is a function component ❭ property does not exist in props type

