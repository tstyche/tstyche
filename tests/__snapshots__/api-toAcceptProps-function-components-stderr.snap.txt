Error: Component accepts props of the given type.

  25 |   test("accepts props of the given type", () => {
  26 |     expect(None).type.toAcceptProps();
> 27 |     expect(None).type.not.toAcceptProps(); // fail
     |                           ^
  28 | 
  29 |     expect(None).type.toAcceptProps({});
  30 |     expect(None).type.not.toAcceptProps({}); // fail

       at ./__typetests__/function-components.tst.tsx:27:27 ❭ when target is a function component ❭ accepts props of the given type

Error: Component accepts props of the given type.

  28 | 
  29 |     expect(None).type.toAcceptProps({});
> 30 |     expect(None).type.not.toAcceptProps({}); // fail
     |                                         ^
  31 | 
  32 |     const noneProps = {};
  33 |     expect(None).type.toAcceptProps(noneProps);

       at ./__typetests__/function-components.tst.tsx:30:41 ❭ when target is a function component ❭ accepts props of the given type

Error: Component accepts props of the given type.

  32 |     const noneProps = {};
  33 |     expect(None).type.toAcceptProps(noneProps);
> 34 |     expect(None).type.not.toAcceptProps(noneProps); // fail
     |                                         ^
  35 | 
  36 |     expect(First).type.toAcceptProps();
  37 |     expect(First).type.not.toAcceptProps(); // fail

       at ./__typetests__/function-components.tst.tsx:34:41 ❭ when target is a function component ❭ accepts props of the given type

Error: Component accepts props of the given type.

  35 | 
  36 |     expect(First).type.toAcceptProps();
> 37 |     expect(First).type.not.toAcceptProps(); // fail
     |                            ^
  38 | 
  39 |     expect(First).type.toAcceptProps({});
  40 |     expect(First).type.not.toAcceptProps({}); // fail

       at ./__typetests__/function-components.tst.tsx:37:28 ❭ when target is a function component ❭ accepts props of the given type

Error: Component accepts props of the given type.

Type '{}' is assignable to type 'FirstProps'.

  38 | 
  39 |     expect(First).type.toAcceptProps({});
> 40 |     expect(First).type.not.toAcceptProps({}); // fail
     |                                          ^
  41 | 
  42 |     expect(Second).type.not.toAcceptProps({});
  43 |     expect(Second).type.toAcceptProps({}); // fail

       at ./__typetests__/function-components.tst.tsx:40:42 ❭ when target is a function component ❭ accepts props of the given type

Error: Component does not accept props of the given type.

Type '{}' is not assignable to type 'SecondProps'.
Property 'one' is required in type 'SecondProps'.

  41 | 
  42 |     expect(Second).type.not.toAcceptProps({});
> 43 |     expect(Second).type.toAcceptProps({}); // fail
     |                                       ^
  44 | 
  45 |     expect(Second).type.toAcceptProps({ one: "sample" });
  46 |     expect(Second).type.not.toAcceptProps({ one: "sample" }); // fail

       at ./__typetests__/function-components.tst.tsx:43:39 ❭ when target is a function component ❭ accepts props of the given type

Error: Component accepts props of the given type.

Type '{ one: string; }' is assignable to type 'SecondProps'.

  44 | 
  45 |     expect(Second).type.toAcceptProps({ one: "sample" });
> 46 |     expect(Second).type.not.toAcceptProps({ one: "sample" }); // fail
     |                                           ^
  47 | 
  48 |     const secondProps1 = { one: "sample" };
  49 |     expect(Second).type.toAcceptProps(secondProps1);

       at ./__typetests__/function-components.tst.tsx:46:43 ❭ when target is a function component ❭ accepts props of the given type

Error: Component accepts props of the given type.

Type '{ one: string; }' is assignable to type 'SecondProps'.

  48 |     const secondProps1 = { one: "sample" };
  49 |     expect(Second).type.toAcceptProps(secondProps1);
> 50 |     expect(Second).type.not.toAcceptProps(secondProps1); // fail
     |                                           ^
  51 | 
  52 |     expect(Second).type.toAcceptProps({ one: "sample", two: true });
  53 |     expect(Second).type.not.toAcceptProps({ one: "sample", two: true }); // fail

       at ./__typetests__/function-components.tst.tsx:50:43 ❭ when target is a function component ❭ accepts props of the given type

Error: Component accepts props of the given type.

Type '{ one: string; two: boolean; }' is assignable to type 'SecondProps'.

  51 | 
  52 |     expect(Second).type.toAcceptProps({ one: "sample", two: true });
> 53 |     expect(Second).type.not.toAcceptProps({ one: "sample", two: true }); // fail
     |                                           ^
  54 | 
  55 |     const secondProps2 = { one: "sample", two: true };
  56 |     expect(Second).type.toAcceptProps(secondProps2);

       at ./__typetests__/function-components.tst.tsx:53:43 ❭ when target is a function component ❭ accepts props of the given type

Error: Component accepts props of the given type.

Type '{ one: string; two: boolean; }' is assignable to type 'SecondProps'.

  55 |     const secondProps2 = { one: "sample", two: true };
  56 |     expect(Second).type.toAcceptProps(secondProps2);
> 57 |     expect(Second).type.not.toAcceptProps(secondProps2); // fail
     |                                           ^
  58 |   });
  59 | 
  60 |   // test("requires props", () => {

       at ./__typetests__/function-components.tst.tsx:57:43 ❭ when target is a function component ❭ accepts props of the given type

