Error: Component accepts props of the given type.

Type '{}' is assignable with type '{}'.

  26 |   test("accepts props of the given type", () => {
  27 |     expect(None).type.toAcceptProps({});
  28 |     expect(None).type.not.toAcceptProps({}); // fail
     |                                         ~~
  29 | 
  30 |     const noneProps = {};
  31 |     expect(None).type.toAcceptProps(noneProps);

       at ./__typetests__/function-components.tst.tsx:28:41 ❭ when target is a function component ❭ accepts props of the given type

Error: Component accepts props of the given type.

Type '{}' is assignable with type '{}'.

  30 |     const noneProps = {};
  31 |     expect(None).type.toAcceptProps(noneProps);
  32 |     expect(None).type.not.toAcceptProps(noneProps); // fail
     |                                         ~~~~~~~~~
  33 | 
  34 |     expect(None).type.not.toAcceptProps({ one: "sample" });
  35 |     expect(None).type.toAcceptProps({ one: "sample" }); // fail

       at ./__typetests__/function-components.tst.tsx:32:41 ❭ when target is a function component ❭ accepts props of the given type

Error: Component does not accept props of the given type.

Type '{}' is not compatible with type '{ one: string; }'.
Type '{}' does not have property 'one'.

  33 | 
  34 |     expect(None).type.not.toAcceptProps({ one: "sample" });
  35 |     expect(None).type.toAcceptProps({ one: "sample" }); // fail
     |                                       ~~~
  36 | 
  37 |     expect(First).type.toAcceptProps({});
  38 |     expect(First).type.not.toAcceptProps({}); // fail

       at ./__typetests__/function-components.tst.tsx:35:39 ❭ when target is a function component ❭ accepts props of the given type

Error: Component accepts props of the given type.

Type 'FirstProps' is assignable with type '{}'.

  36 | 
  37 |     expect(First).type.toAcceptProps({});
  38 |     expect(First).type.not.toAcceptProps({}); // fail
     |                                          ~~
  39 | 
  40 |     expect(First).type.toAcceptProps({ one: "sample" });
  41 |     expect(First).type.not.toAcceptProps({ one: "sample" }); // fail

       at ./__typetests__/function-components.tst.tsx:38:42 ❭ when target is a function component ❭ accepts props of the given type

Error: Component accepts props of the given type.

Type 'FirstProps' is assignable with type '{ one: string; }'.

  39 | 
  40 |     expect(First).type.toAcceptProps({ one: "sample" });
  41 |     expect(First).type.not.toAcceptProps({ one: "sample" }); // fail
     |                                          ~~~~~~~~~~~~~~~~~
  42 | 
  43 |     expect(Second).type.toAcceptProps({ one: "sample" });
  44 |     expect(Second).type.not.toAcceptProps({ one: "sample" }); // fail

       at ./__typetests__/function-components.tst.tsx:41:42 ❭ when target is a function component ❭ accepts props of the given type

Error: Component accepts props of the given type.

Type 'SecondProps' is assignable with type '{ one: string; }'.

  42 | 
  43 |     expect(Second).type.toAcceptProps({ one: "sample" });
  44 |     expect(Second).type.not.toAcceptProps({ one: "sample" }); // fail
     |                                           ~~~~~~~~~~~~~~~~~
  45 | 
  46 |     const secondProps = { one: "sample" };
  47 |     expect(Second).type.toAcceptProps(secondProps);

       at ./__typetests__/function-components.tst.tsx:44:43 ❭ when target is a function component ❭ accepts props of the given type

Error: Component accepts props of the given type.

Type 'SecondProps' is assignable with type '{ one: string; }'.

  46 |     const secondProps = { one: "sample" };
  47 |     expect(Second).type.toAcceptProps(secondProps);
  48 |     expect(Second).type.not.toAcceptProps(secondProps); // fail
     |                                           ~~~~~~~~~~~
  49 | 
  50 |     expect(Second).type.toAcceptProps({ one: "sample", two: true });
  51 |     expect(Second).type.not.toAcceptProps({ one: "sample", two: true }); // fail

       at ./__typetests__/function-components.tst.tsx:48:43 ❭ when target is a function component ❭ accepts props of the given type

Error: Component accepts props of the given type.

Type 'SecondProps' is assignable with type '{ one: string; two: boolean; }'.

  49 | 
  50 |     expect(Second).type.toAcceptProps({ one: "sample", two: true });
  51 |     expect(Second).type.not.toAcceptProps({ one: "sample", two: true }); // fail
     |                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  52 | 
  53 |     const two = true;
  54 |     expect(Second).type.toAcceptProps({ one: "sample", two });

       at ./__typetests__/function-components.tst.tsx:51:43 ❭ when target is a function component ❭ accepts props of the given type

Error: Component accepts props of the given type.

Type 'SecondProps' is assignable with type '{ one: string; two: boolean; }'.

  53 |     const two = true;
  54 |     expect(Second).type.toAcceptProps({ one: "sample", two });
  55 |     expect(Second).type.not.toAcceptProps({ one: "sample", two }); // fail
     |                                           ~~~~~~~~~~~~~~~~~~~~~~
  56 |   });
  57 | 
  58 |   test("property is required in props type", () => {

       at ./__typetests__/function-components.tst.tsx:55:43 ❭ when target is a function component ❭ accepts props of the given type

Error: Component does not accept props of the given type.

Type 'SecondProps' is not assignable with type '{}'.
Type 'SecondProps' requires property 'one' .

  58 |   test("property is required in props type", () => {
  59 |     expect(Second).type.not.toAcceptProps({});
  60 |     expect(Second).type.toAcceptProps({}); // fail
     |                                       ~~
  61 | 
  62 |     expect(Second).type.not.toAcceptProps({ two: true });
  63 |     expect(Second).type.toAcceptProps({ two: true }); // fail

       at ./__typetests__/function-components.tst.tsx:60:39 ❭ when target is a function component ❭ property is required in props type

Error: Component does not accept props of the given type.

Type 'SecondProps' is not assignable with type '{ two: boolean; }'.
Type 'SecondProps' requires property 'one' .

  61 | 
  62 |     expect(Second).type.not.toAcceptProps({ two: true });
  63 |     expect(Second).type.toAcceptProps({ two: true }); // fail
     |                                       ~~~~~~~~~~~~~
  64 | 
  65 |     const secondProps = { two: true };
  66 |     expect(Second).type.not.toAcceptProps(secondProps);

       at ./__typetests__/function-components.tst.tsx:63:39 ❭ when target is a function component ❭ property is required in props type

Error: Component does not accept props of the given type.

Type 'SecondProps' is not assignable with type '{ two: boolean; }'.
Type 'SecondProps' requires property 'one' .

  65 |     const secondProps = { two: true };
  66 |     expect(Second).type.not.toAcceptProps(secondProps);
  67 |     expect(Second).type.toAcceptProps(secondProps); // fail
     |                                       ~~~~~~~~~~~
  68 | 
  69 |     const two = true;
  70 |     expect(Second).type.not.toAcceptProps({ two });

       at ./__typetests__/function-components.tst.tsx:67:39 ❭ when target is a function component ❭ property is required in props type

Error: Component does not accept props of the given type.

Type 'SecondProps' is not assignable with type '{ two: boolean; }'.
Type 'SecondProps' requires property 'one' .

  69 |     const two = true;
  70 |     expect(Second).type.not.toAcceptProps({ two });
  71 |     expect(Second).type.toAcceptProps({ two }); // fail
     |                                       ~~~~~~~
  72 |   });
  73 | 
  74 |   test("property does not exist in props type", () => {

       at ./__typetests__/function-components.tst.tsx:71:39 ❭ when target is a function component ❭ property is required in props type

Error: Component does not accept props of the given type.

Type 'FirstProps' is not compatible with type '{ two: boolean; }'.
Type 'FirstProps' does not have property 'two'.

  74 |   test("property does not exist in props type", () => {
  75 |     expect(First).type.not.toAcceptProps({ two: false });
  76 |     expect(First).type.toAcceptProps({ two: false }); // fail
     |                                        ~~~
  77 | 
  78 |     expect(First).type.not.toAcceptProps({ one: "sample", two: false });
  79 |     expect(First).type.toAcceptProps({ one: "sample", two: false }); // fail

       at ./__typetests__/function-components.tst.tsx:76:40 ❭ when target is a function component ❭ property does not exist in props type

Error: Component does not accept props of the given type.

Type 'FirstProps' is not compatible with type '{ one: string; two: boolean; }'.
Type 'FirstProps' does not have property 'two'.

  77 | 
  78 |     expect(First).type.not.toAcceptProps({ one: "sample", two: false });
  79 |     expect(First).type.toAcceptProps({ one: "sample", two: false }); // fail
     |                                                       ~~~
  80 | 
  81 |     const firstProps = { one: "sample", two: false };
  82 |     expect(First).type.not.toAcceptProps(firstProps);

       at ./__typetests__/function-components.tst.tsx:79:55 ❭ when target is a function component ❭ property does not exist in props type

Error: Component does not accept props of the given type.

Type 'FirstProps' is not compatible with type '{ one: string; two: boolean; }'.
Type 'FirstProps' does not have property 'two'.

  81 |     const firstProps = { one: "sample", two: false };
  82 |     expect(First).type.not.toAcceptProps(firstProps);
  83 |     expect(First).type.toAcceptProps(firstProps); // fail
     |                                      ~~~~~~~~~~
  84 | 
  85 |     expect(Second).type.not.toAcceptProps({ three: 123 });
  86 |     expect(Second).type.toAcceptProps({ three: 123 }); // fail

       at ./__typetests__/function-components.tst.tsx:83:38 ❭ when target is a function component ❭ property does not exist in props type

Error: Component does not accept props of the given type.

Type 'SecondProps' is not compatible with type '{ three: number; }'.
Type 'SecondProps' does not have property 'three'.

  84 | 
  85 |     expect(Second).type.not.toAcceptProps({ three: 123 });
  86 |     expect(Second).type.toAcceptProps({ three: 123 }); // fail
     |                                         ~~~~~
  87 | 
  88 |     const secondProps = { three: 123 };
  89 |     expect(Second).type.not.toAcceptProps(secondProps);

       at ./__typetests__/function-components.tst.tsx:86:41 ❭ when target is a function component ❭ property does not exist in props type

Error: Component does not accept props of the given type.

Type 'SecondProps' is not assignable with type '{ three: number; }'.
Type 'SecondProps' requires property 'one' .

  84 | 
  85 |     expect(Second).type.not.toAcceptProps({ three: 123 });
  86 |     expect(Second).type.toAcceptProps({ three: 123 }); // fail
     |                                       ~~~~~~~~~~~~~~
  87 | 
  88 |     const secondProps = { three: 123 };
  89 |     expect(Second).type.not.toAcceptProps(secondProps);

       at ./__typetests__/function-components.tst.tsx:86:39 ❭ when target is a function component ❭ property does not exist in props type

Error: Component does not accept props of the given type.

Type 'SecondProps' is not compatible with type '{ three: number; }'.
Type 'SecondProps' does not have property 'three'.

  88 |     const secondProps = { three: 123 };
  89 |     expect(Second).type.not.toAcceptProps(secondProps);
  90 |     expect(Second).type.toAcceptProps(secondProps); // fail
     |                                       ~~~~~~~~~~~
  91 | 
  92 |     expect(Second).type.not.toAcceptProps({ two: "no", three: 123 });
  93 |     expect(Second).type.toAcceptProps({ two: "no", three: 123 }); // fail

       at ./__typetests__/function-components.tst.tsx:90:39 ❭ when target is a function component ❭ property does not exist in props type

Error: Component does not accept props of the given type.

Type 'SecondProps' is not assignable with type '{ three: number; }'.
Type 'SecondProps' requires property 'one' .

  88 |     const secondProps = { three: 123 };
  89 |     expect(Second).type.not.toAcceptProps(secondProps);
  90 |     expect(Second).type.toAcceptProps(secondProps); // fail
     |                                       ~~~~~~~~~~~
  91 | 
  92 |     expect(Second).type.not.toAcceptProps({ two: "no", three: 123 });
  93 |     expect(Second).type.toAcceptProps({ two: "no", three: 123 }); // fail

       at ./__typetests__/function-components.tst.tsx:90:39 ❭ when target is a function component ❭ property does not exist in props type

Error: Component does not accept props of the given type.

Type 'SecondProps' is not assignable with type '{ two: string; three: number; }'.
Types of property 'two' are incompatible.
Type 'boolean | undefined' is not assignable with type 'string'.

  91 | 
  92 |     expect(Second).type.not.toAcceptProps({ two: "no", three: 123 });
  93 |     expect(Second).type.toAcceptProps({ two: "no", three: 123 }); // fail
     |                                         ~~~
  94 | 
  95 |     const three = 123;
  96 |     expect(Second).type.not.toAcceptProps({ one: "sample", three });

       at ./__typetests__/function-components.tst.tsx:93:41 ❭ when target is a function component ❭ property does not exist in props type

Error: Component does not accept props of the given type.

Type 'SecondProps' is not compatible with type '{ two: string; three: number; }'.
Type 'SecondProps' does not have property 'three'.

  91 | 
  92 |     expect(Second).type.not.toAcceptProps({ two: "no", three: 123 });
  93 |     expect(Second).type.toAcceptProps({ two: "no", three: 123 }); // fail
     |                                                    ~~~~~
  94 | 
  95 |     const three = 123;
  96 |     expect(Second).type.not.toAcceptProps({ one: "sample", three });

       at ./__typetests__/function-components.tst.tsx:93:52 ❭ when target is a function component ❭ property does not exist in props type

Error: Component does not accept props of the given type.

Type 'SecondProps' is not assignable with type '{ two: string; three: number; }'.
Type 'SecondProps' requires property 'one' .

  91 | 
  92 |     expect(Second).type.not.toAcceptProps({ two: "no", three: 123 });
  93 |     expect(Second).type.toAcceptProps({ two: "no", three: 123 }); // fail
     |                                       ~~~~~~~~~~~~~~~~~~~~~~~~~
  94 | 
  95 |     const three = 123;
  96 |     expect(Second).type.not.toAcceptProps({ one: "sample", three });

       at ./__typetests__/function-components.tst.tsx:93:39 ❭ when target is a function component ❭ property does not exist in props type

Error: Component does not accept props of the given type.

Type 'SecondProps' is not compatible with type '{ one: string; three: number; }'.
Type 'SecondProps' does not have property 'three'.

   95 |     const three = 123;
   96 |     expect(Second).type.not.toAcceptProps({ one: "sample", three });
   97 |     expect(Second).type.toAcceptProps({ one: "sample", three }); // fail
      |                                                        ~~~~~
   98 | 
   99 |     expect(Second).type.not.toAcceptProps({ one: "sample", two: "no", three: 123 });
  100 |     expect(Second).type.toAcceptProps({ one: "sample", two: "no", three: 123 }); // fail

        at ./__typetests__/function-components.tst.tsx:97:56 ❭ when target is a function component ❭ property does not exist in props type

Error: Component does not accept props of the given type.

Type 'SecondProps' is not assignable with type '{ one: string; two: string; three: number; }'.
Types of property 'two' are incompatible.
Type 'boolean | undefined' is not assignable with type 'string'.

   98 | 
   99 |     expect(Second).type.not.toAcceptProps({ one: "sample", two: "no", three: 123 });
  100 |     expect(Second).type.toAcceptProps({ one: "sample", two: "no", three: 123 }); // fail
      |                                                        ~~~
  101 | 
  102 |     expect(Second).type.not.toAcceptProps({ one: "sample", two: "no", three });
  103 |     expect(Second).type.toAcceptProps({ one: "sample", two: "no", three }); // fail

        at ./__typetests__/function-components.tst.tsx:100:56 ❭ when target is a function component ❭ property does not exist in props type

Error: Component does not accept props of the given type.

Type 'SecondProps' is not compatible with type '{ one: string; two: string; three: number; }'.
Type 'SecondProps' does not have property 'three'.

   98 | 
   99 |     expect(Second).type.not.toAcceptProps({ one: "sample", two: "no", three: 123 });
  100 |     expect(Second).type.toAcceptProps({ one: "sample", two: "no", three: 123 }); // fail
      |                                                                   ~~~~~
  101 | 
  102 |     expect(Second).type.not.toAcceptProps({ one: "sample", two: "no", three });
  103 |     expect(Second).type.toAcceptProps({ one: "sample", two: "no", three }); // fail

        at ./__typetests__/function-components.tst.tsx:100:67 ❭ when target is a function component ❭ property does not exist in props type

Error: Component does not accept props of the given type.

Type 'SecondProps' is not assignable with type '{ one: string; two: string; three: number; }'.
Types of property 'two' are incompatible.
Type 'boolean | undefined' is not assignable with type 'string'.

  101 | 
  102 |     expect(Second).type.not.toAcceptProps({ one: "sample", two: "no", three });
  103 |     expect(Second).type.toAcceptProps({ one: "sample", two: "no", three }); // fail
      |                                                        ~~~
  104 | 
  105 |     expect(Second).type.not.toAcceptProps({ one: "sample", two: true, three: 123 });
  106 |     expect(Second).type.toAcceptProps({ one: "sample", two: true, three: 123 }); // fail

        at ./__typetests__/function-components.tst.tsx:103:56 ❭ when target is a function component ❭ property does not exist in props type

Error: Component does not accept props of the given type.

Type 'SecondProps' is not compatible with type '{ one: string; two: string; three: number; }'.
Type 'SecondProps' does not have property 'three'.

  101 | 
  102 |     expect(Second).type.not.toAcceptProps({ one: "sample", two: "no", three });
  103 |     expect(Second).type.toAcceptProps({ one: "sample", two: "no", three }); // fail
      |                                                                   ~~~~~
  104 | 
  105 |     expect(Second).type.not.toAcceptProps({ one: "sample", two: true, three: 123 });
  106 |     expect(Second).type.toAcceptProps({ one: "sample", two: true, three: 123 }); // fail

        at ./__typetests__/function-components.tst.tsx:103:67 ❭ when target is a function component ❭ property does not exist in props type

Error: Component does not accept props of the given type.

Type 'SecondProps' is not compatible with type '{ one: string; two: boolean; three: number; }'.
Type 'SecondProps' does not have property 'three'.

  104 | 
  105 |     expect(Second).type.not.toAcceptProps({ one: "sample", two: true, three: 123 });
  106 |     expect(Second).type.toAcceptProps({ one: "sample", two: true, three: 123 }); // fail
      |                                                                   ~~~~~
  107 | 
  108 |     expect(Second).type.not.toAcceptProps({ one: "sample", two: true, three });
  109 |     expect(Second).type.toAcceptProps({ one: "sample", two: true, three }); // fail

        at ./__typetests__/function-components.tst.tsx:106:67 ❭ when target is a function component ❭ property does not exist in props type

Error: Component does not accept props of the given type.

Type 'SecondProps' is not compatible with type '{ one: string; two: boolean; three: number; }'.
Type 'SecondProps' does not have property 'three'.

  107 | 
  108 |     expect(Second).type.not.toAcceptProps({ one: "sample", two: true, three });
  109 |     expect(Second).type.toAcceptProps({ one: "sample", two: true, three }); // fail
      |                                                                   ~~~~~
  110 |   });
  111 | 
  112 |   test("property type is not assignable to prop type", () => {

        at ./__typetests__/function-components.tst.tsx:109:67 ❭ when target is a function component ❭ property does not exist in props type

Error: Component does not accept props of the given type.

Type 'FirstProps' is not assignable with type '{ one: number; }'.
Types of property 'one' are incompatible.
Type 'string | undefined' is not assignable with type 'number'.

  112 |   test("property type is not assignable to prop type", () => {
  113 |     expect(First).type.not.toAcceptProps({ one: 1 });
  114 |     expect(First).type.toAcceptProps({ one: 1 }); // fail
      |                                        ~~~
  115 | 
  116 |     const firstProps = { one: 1 };
  117 |     expect(First).type.not.toAcceptProps(firstProps);

        at ./__typetests__/function-components.tst.tsx:114:40 ❭ when target is a function component ❭ property type is not assignable to prop type

Error: Component does not accept props of the given type.

Type 'FirstProps' is not assignable with type '{ one: number; }'.
Types of property 'one' are incompatible.
Type 'string | undefined' is not assignable with type 'number'.

  116 |     const firstProps = { one: 1 };
  117 |     expect(First).type.not.toAcceptProps(firstProps);
  118 |     expect(First).type.toAcceptProps(firstProps); // fail
      |                                      ~~~~~~~~~~
  119 | 
  120 |     expect(Second).type.not.toAcceptProps({ one: 1 });
  121 |     expect(Second).type.toAcceptProps({ one: 1 }); // fail

        at ./__typetests__/function-components.tst.tsx:118:38 ❭ when target is a function component ❭ property type is not assignable to prop type

Error: Component does not accept props of the given type.

Type 'SecondProps' is not assignable with type '{ one: number; }'.
Types of property 'one' are incompatible.
Type 'string | undefined' is not assignable with type 'number'.

  119 | 
  120 |     expect(Second).type.not.toAcceptProps({ one: 1 });
  121 |     expect(Second).type.toAcceptProps({ one: 1 }); // fail
      |                                         ~~~
  122 | 
  123 |     expect(Second).type.not.toAcceptProps({ one: 1, two: 2 });
  124 |     expect(Second).type.toAcceptProps({ one: 1, two: 2 }); // fail

        at ./__typetests__/function-components.tst.tsx:121:41 ❭ when target is a function component ❭ property type is not assignable to prop type

Error: Component does not accept props of the given type.

Type 'SecondProps' is not assignable with type '{ one: number; two: number; }'.
Types of property 'one' are incompatible.
Type 'string | undefined' is not assignable with type 'number'.

  122 | 
  123 |     expect(Second).type.not.toAcceptProps({ one: 1, two: 2 });
  124 |     expect(Second).type.toAcceptProps({ one: 1, two: 2 }); // fail
      |                                         ~~~
  125 | 
  126 |     const secondProps = { one: 1, two: 2 };
  127 |     expect(Second).type.not.toAcceptProps(secondProps);

        at ./__typetests__/function-components.tst.tsx:124:41 ❭ when target is a function component ❭ property type is not assignable to prop type

Error: Component does not accept props of the given type.

Type 'SecondProps' is not assignable with type '{ one: number; two: number; }'.
Types of property 'two' are incompatible.
Type 'boolean | undefined' is not assignable with type 'number'.

  122 | 
  123 |     expect(Second).type.not.toAcceptProps({ one: 1, two: 2 });
  124 |     expect(Second).type.toAcceptProps({ one: 1, two: 2 }); // fail
      |                                                 ~~~
  125 | 
  126 |     const secondProps = { one: 1, two: 2 };
  127 |     expect(Second).type.not.toAcceptProps(secondProps);

        at ./__typetests__/function-components.tst.tsx:124:49 ❭ when target is a function component ❭ property type is not assignable to prop type

Error: Component does not accept props of the given type.

Type 'SecondProps' is not assignable with type '{ one: number; two: number; }'.
Types of property 'one' are incompatible.
Type 'string | undefined' is not assignable with type 'number'.

  126 |     const secondProps = { one: 1, two: 2 };
  127 |     expect(Second).type.not.toAcceptProps(secondProps);
  128 |     expect(Second).type.toAcceptProps(secondProps); // fail
      |                                       ~~~~~~~~~~~
  129 | 
  130 |     const two = 2;
  131 |     expect(Second).type.not.toAcceptProps({ one: 1, two });

        at ./__typetests__/function-components.tst.tsx:128:39 ❭ when target is a function component ❭ property type is not assignable to prop type

Error: Component does not accept props of the given type.

Type 'SecondProps' is not assignable with type '{ one: number; two: number; }'.
Types of property 'two' are incompatible.
Type 'boolean | undefined' is not assignable with type 'number'.

  126 |     const secondProps = { one: 1, two: 2 };
  127 |     expect(Second).type.not.toAcceptProps(secondProps);
  128 |     expect(Second).type.toAcceptProps(secondProps); // fail
      |                                       ~~~~~~~~~~~
  129 | 
  130 |     const two = 2;
  131 |     expect(Second).type.not.toAcceptProps({ one: 1, two });

        at ./__typetests__/function-components.tst.tsx:128:39 ❭ when target is a function component ❭ property type is not assignable to prop type

Error: Component does not accept props of the given type.

Type 'SecondProps' is not assignable with type '{ one: number; two: number; }'.
Types of property 'one' are incompatible.
Type 'string | undefined' is not assignable with type 'number'.

  130 |     const two = 2;
  131 |     expect(Second).type.not.toAcceptProps({ one: 1, two });
  132 |     expect(Second).type.toAcceptProps({ one: 1, two }); // fail
      |                                         ~~~
  133 |   });
  134 | });
  135 | 

        at ./__typetests__/function-components.tst.tsx:132:41 ❭ when target is a function component ❭ property type is not assignable to prop type

Error: Component does not accept props of the given type.

Type 'SecondProps' is not assignable with type '{ one: number; two: number; }'.
Types of property 'two' are incompatible.
Type 'boolean | undefined' is not assignable with type 'number'.

  130 |     const two = 2;
  131 |     expect(Second).type.not.toAcceptProps({ one: 1, two });
  132 |     expect(Second).type.toAcceptProps({ one: 1, two }); // fail
      |                                                 ~~~
  133 |   });
  134 | });
  135 | 

        at ./__typetests__/function-components.tst.tsx:132:49 ❭ when target is a function component ❭ property type is not assignable to prop type

Error: Component type accepts props of the given type.

Type '{}' is assignable with type '{}'.

  143 |   test("accepts props of the given type", () => {
  144 |     expect<None>().type.toAcceptProps<{}>();
  145 |     expect<None>().type.not.toAcceptProps<{}>(); // fail
      |                                           ~~
  146 | 
  147 |     type NonePropsSample = {};
  148 |     expect<None>().type.toAcceptProps<NonePropsSample>();

        at ./__typetests__/function-components.tst.tsx:145:43 ❭ when target is a type ❭ accepts props of the given type

Error: Component type accepts props of the given type.

Type '{}' is assignable with type 'NonePropsSample'.

  147 |     type NonePropsSample = {};
  148 |     expect<None>().type.toAcceptProps<NonePropsSample>();
  149 |     expect<None>().type.not.toAcceptProps<NonePropsSample>(); // fail
      |                                           ~~~~~~~~~~~~~~~
  150 | 
  151 |     expect<None>().type.not.toAcceptProps<{ one?: string }>();
  152 |     expect<None>().type.toAcceptProps<{ one?: string }>(); // fail

        at ./__typetests__/function-components.tst.tsx:149:43 ❭ when target is a type ❭ accepts props of the given type

Error: Component type does not accept props of the given type.

Type '{}' is not compatible with type '{ one?: string | undefined; }'.
Type '{}' does not have property 'one'.

  150 | 
  151 |     expect<None>().type.not.toAcceptProps<{ one?: string }>();
  152 |     expect<None>().type.toAcceptProps<{ one?: string }>(); // fail
      |                                         ~~~
  153 | 
  154 |     expect<None>().type.not.toAcceptProps<{ one: string }>();
  155 |     expect<None>().type.toAcceptProps<{ one: string }>(); // fail

        at ./__typetests__/function-components.tst.tsx:152:41 ❭ when target is a type ❭ accepts props of the given type

Error: Component type does not accept props of the given type.

Type '{}' is not compatible with type '{ one: string; }'.
Type '{}' does not have property 'one'.

  153 | 
  154 |     expect<None>().type.not.toAcceptProps<{ one: string }>();
  155 |     expect<None>().type.toAcceptProps<{ one: string }>(); // fail
      |                                         ~~~
  156 | 
  157 |     expect<First>().type.toAcceptProps<{}>();
  158 |     expect<First>().type.not.toAcceptProps<{}>(); // fail

        at ./__typetests__/function-components.tst.tsx:155:41 ❭ when target is a type ❭ accepts props of the given type

Error: Component type accepts props of the given type.

Type 'FirstProps' is assignable with type '{}'.

  156 | 
  157 |     expect<First>().type.toAcceptProps<{}>();
  158 |     expect<First>().type.not.toAcceptProps<{}>(); // fail
      |                                            ~~
  159 | 
  160 |     expect<First>().type.toAcceptProps<{ one?: string }>();
  161 |     expect<First>().type.not.toAcceptProps<{ one?: string }>(); // fail

        at ./__typetests__/function-components.tst.tsx:158:44 ❭ when target is a type ❭ accepts props of the given type

Error: Component type accepts props of the given type.

Type 'FirstProps' is assignable with type '{ one?: string | undefined; }'.

  159 | 
  160 |     expect<First>().type.toAcceptProps<{ one?: string }>();
  161 |     expect<First>().type.not.toAcceptProps<{ one?: string }>(); // fail
      |                                            ~~~~~~~~~~~~~~~~
  162 | 
  163 |     expect<First>().type.toAcceptProps<{ one: string }>();
  164 |     expect<First>().type.not.toAcceptProps<{ one: string }>(); // fail

        at ./__typetests__/function-components.tst.tsx:161:44 ❭ when target is a type ❭ accepts props of the given type

Error: Component type accepts props of the given type.

Type 'FirstProps' is assignable with type '{ one: string; }'.

  162 | 
  163 |     expect<First>().type.toAcceptProps<{ one: string }>();
  164 |     expect<First>().type.not.toAcceptProps<{ one: string }>(); // fail
      |                                            ~~~~~~~~~~~~~~~
  165 | 
  166 |     expect<Second>().type.toAcceptProps<{ one: string }>();
  167 |     expect<Second>().type.not.toAcceptProps<{ one: string }>(); // fail

        at ./__typetests__/function-components.tst.tsx:164:44 ❭ when target is a type ❭ accepts props of the given type

Error: Component type accepts props of the given type.

Type 'SecondProps' is assignable with type '{ one: string; }'.

  165 | 
  166 |     expect<Second>().type.toAcceptProps<{ one: string }>();
  167 |     expect<Second>().type.not.toAcceptProps<{ one: string }>(); // fail
      |                                             ~~~~~~~~~~~~~~~
  168 | 
  169 |     type SecondPropsSample = { one: string };
  170 |     expect<Second>().type.toAcceptProps<SecondPropsSample>();

        at ./__typetests__/function-components.tst.tsx:167:45 ❭ when target is a type ❭ accepts props of the given type

Error: Component type accepts props of the given type.

Type 'SecondProps' is assignable with type 'SecondPropsSample'.

  169 |     type SecondPropsSample = { one: string };
  170 |     expect<Second>().type.toAcceptProps<SecondPropsSample>();
  171 |     expect<Second>().type.not.toAcceptProps<SecondPropsSample>(); // fail
      |                                             ~~~~~~~~~~~~~~~~~
  172 | 
  173 |     expect<Second>().type.toAcceptProps<{ one: string; two?: boolean }>();
  174 |     expect<Second>().type.not.toAcceptProps<{ one: string; two?: boolean }>(); // fail

        at ./__typetests__/function-components.tst.tsx:171:45 ❭ when target is a type ❭ accepts props of the given type

Error: Component type accepts props of the given type.

Type 'SecondProps' is assignable with type '{ one: string; two?: boolean | undefined; }'.

  172 | 
  173 |     expect<Second>().type.toAcceptProps<{ one: string; two?: boolean }>();
  174 |     expect<Second>().type.not.toAcceptProps<{ one: string; two?: boolean }>(); // fail
      |                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  175 | 
  176 |     expect<Second>().type.toAcceptProps<{ one: string; two: boolean }>();
  177 |     expect<Second>().type.not.toAcceptProps<{ one: string; two: boolean }>(); // fail

        at ./__typetests__/function-components.tst.tsx:174:45 ❭ when target is a type ❭ accepts props of the given type

Error: Component type accepts props of the given type.

Type 'SecondProps' is assignable with type '{ one: string; two: boolean; }'.

  175 | 
  176 |     expect<Second>().type.toAcceptProps<{ one: string; two: boolean }>();
  177 |     expect<Second>().type.not.toAcceptProps<{ one: string; two: boolean }>(); // fail
      |                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  178 |   });
  179 | 
  180 |   test("property is required in props type", () => {

        at ./__typetests__/function-components.tst.tsx:177:45 ❭ when target is a type ❭ accepts props of the given type

Error: Component type does not accept props of the given type.

Type 'SecondProps' is not assignable with type '{}'.
Type 'SecondProps' requires property 'one' .

  180 |   test("property is required in props type", () => {
  181 |     expect<Second>().type.not.toAcceptProps<{}>();
  182 |     expect<Second>().type.toAcceptProps<{}>(); // fail
      |                                         ~~
  183 | 
  184 |     expect<Second>().type.not.toAcceptProps<{ one?: string }>();
  185 |     expect<Second>().type.toAcceptProps<{ one?: string }>(); // fail

        at ./__typetests__/function-components.tst.tsx:182:41 ❭ when target is a type ❭ property is required in props type

Error: Component type does not accept props of the given type.

Type 'SecondProps' is not assignable with type '{ one?: string | undefined; }'.
Type 'SecondProps' requires property 'one' .

  183 | 
  184 |     expect<Second>().type.not.toAcceptProps<{ one?: string }>();
  185 |     expect<Second>().type.toAcceptProps<{ one?: string }>(); // fail
      |                                           ~~~
  186 | 
  187 |     expect<Second>().type.not.toAcceptProps<{ two?: boolean }>();
  188 |     expect<Second>().type.toAcceptProps<{ two?: boolean }>(); // fail

        at ./__typetests__/function-components.tst.tsx:185:43 ❭ when target is a type ❭ property is required in props type

Error: Component type does not accept props of the given type.

Type 'SecondProps' is not assignable with type '{ two?: boolean | undefined; }'.
Type 'SecondProps' requires property 'one' .

  186 | 
  187 |     expect<Second>().type.not.toAcceptProps<{ two?: boolean }>();
  188 |     expect<Second>().type.toAcceptProps<{ two?: boolean }>(); // fail
      |                                         ~~~~~~~~~~~~~~~~~
  189 | 
  190 |     expect<Second>().type.not.toAcceptProps<{ two: boolean }>();
  191 |     expect<Second>().type.toAcceptProps<{ two: boolean }>(); // fail

        at ./__typetests__/function-components.tst.tsx:188:41 ❭ when target is a type ❭ property is required in props type

Error: Component type does not accept props of the given type.

Type 'SecondProps' is not assignable with type '{ two: boolean; }'.
Type 'SecondProps' requires property 'one' .

  189 | 
  190 |     expect<Second>().type.not.toAcceptProps<{ two: boolean }>();
  191 |     expect<Second>().type.toAcceptProps<{ two: boolean }>(); // fail
      |                                         ~~~~~~~~~~~~~~~~
  192 | 
  193 |     type SecondPropsSample = { two: boolean };
  194 |     expect<Second>().type.not.toAcceptProps<SecondPropsSample>();

        at ./__typetests__/function-components.tst.tsx:191:41 ❭ when target is a type ❭ property is required in props type

Error: Component type does not accept props of the given type.

Type 'SecondProps' is not assignable with type 'SecondPropsSample'.
Type 'SecondProps' requires property 'one' .

  193 |     type SecondPropsSample = { two: boolean };
  194 |     expect<Second>().type.not.toAcceptProps<SecondPropsSample>();
  195 |     expect<Second>().type.toAcceptProps<SecondPropsSample>(); // fail
      |                                         ~~~~~~~~~~~~~~~~~
  196 | 
  197 |     expect<Second>().type.not.toAcceptProps<{ one?: string; two?: boolean }>();
  198 |     expect<Second>().type.toAcceptProps<{ one?: string; two?: boolean }>(); // fail

        at ./__typetests__/function-components.tst.tsx:195:41 ❭ when target is a type ❭ property is required in props type

Error: Component type does not accept props of the given type.

Type 'SecondProps' is not assignable with type '{ one?: string | undefined; two?: boolean | undefined; }'.
Type 'SecondProps' requires property 'one' .

  196 | 
  197 |     expect<Second>().type.not.toAcceptProps<{ one?: string; two?: boolean }>();
  198 |     expect<Second>().type.toAcceptProps<{ one?: string; two?: boolean }>(); // fail
      |                                           ~~~
  199 |   });
  200 | 
  201 |   test("property does not exist in props type", () => {

        at ./__typetests__/function-components.tst.tsx:198:43 ❭ when target is a type ❭ property is required in props type

Error: Component type does not accept props of the given type.

Type 'FirstProps' is not compatible with type '{ two?: boolean | undefined; }'.
Type 'FirstProps' does not have property 'two'.

  201 |   test("property does not exist in props type", () => {
  202 |     expect<First>().type.not.toAcceptProps<{ two?: boolean }>();
  203 |     expect<First>().type.toAcceptProps<{ two?: boolean }>(); // fail
      |                                          ~~~
  204 | 
  205 |     expect<First>().type.not.toAcceptProps<{ two: boolean }>();
  206 |     expect<First>().type.toAcceptProps<{ two: boolean }>(); // fail

        at ./__typetests__/function-components.tst.tsx:203:42 ❭ when target is a type ❭ property does not exist in props type

Error: Component type does not accept props of the given type.

Type 'FirstProps' is not compatible with type '{ two: boolean; }'.
Type 'FirstProps' does not have property 'two'.

  204 | 
  205 |     expect<First>().type.not.toAcceptProps<{ two: boolean }>();
  206 |     expect<First>().type.toAcceptProps<{ two: boolean }>(); // fail
      |                                          ~~~
  207 | 
  208 |     expect<First>().type.not.toAcceptProps<{ one: string; two?: boolean }>();
  209 |     expect<First>().type.toAcceptProps<{ one: string; two?: boolean }>(); // fail

        at ./__typetests__/function-components.tst.tsx:206:42 ❭ when target is a type ❭ property does not exist in props type

Error: Component type does not accept props of the given type.

Type 'FirstProps' is not compatible with type '{ one: string; two?: boolean | undefined; }'.
Type 'FirstProps' does not have property 'two'.

  207 | 
  208 |     expect<First>().type.not.toAcceptProps<{ one: string; two?: boolean }>();
  209 |     expect<First>().type.toAcceptProps<{ one: string; two?: boolean }>(); // fail
      |                                                       ~~~
  210 | 
  211 |     expect<First>().type.not.toAcceptProps<{ one: string; two: boolean }>();
  212 |     expect<First>().type.toAcceptProps<{ one: string; two: boolean }>(); // fail

        at ./__typetests__/function-components.tst.tsx:209:55 ❭ when target is a type ❭ property does not exist in props type

Error: Component type does not accept props of the given type.

Type 'FirstProps' is not compatible with type '{ one: string; two: boolean; }'.
Type 'FirstProps' does not have property 'two'.

  210 | 
  211 |     expect<First>().type.not.toAcceptProps<{ one: string; two: boolean }>();
  212 |     expect<First>().type.toAcceptProps<{ one: string; two: boolean }>(); // fail
      |                                                       ~~~
  213 | 
  214 |     type FirstPropsSample = { one: string; two: boolean };
  215 |     expect<First>().type.not.toAcceptProps<FirstPropsSample>();

        at ./__typetests__/function-components.tst.tsx:212:55 ❭ when target is a type ❭ property does not exist in props type

Error: Component type does not accept props of the given type.

Type 'FirstProps' is not compatible with type 'FirstPropsSample'.
Type 'FirstProps' does not have property 'two'.

  214 |     type FirstPropsSample = { one: string; two: boolean };
  215 |     expect<First>().type.not.toAcceptProps<FirstPropsSample>();
  216 |     expect<First>().type.toAcceptProps<FirstPropsSample>(); // fail
      |                                        ~~~~~~~~~~~~~~~~
  217 | 
  218 |     expect<Second>().type.not.toAcceptProps<{ three?: number }>();
  219 |     expect<Second>().type.toAcceptProps<{ three?: number }>(); // fail

        at ./__typetests__/function-components.tst.tsx:216:40 ❭ when target is a type ❭ property does not exist in props type

Error: Component type does not accept props of the given type.

Type 'SecondProps' is not compatible with type '{ three?: number | undefined; }'.
Type 'SecondProps' does not have property 'three'.

  217 | 
  218 |     expect<Second>().type.not.toAcceptProps<{ three?: number }>();
  219 |     expect<Second>().type.toAcceptProps<{ three?: number }>(); // fail
      |                                           ~~~~~
  220 | 
  221 |     expect<Second>().type.not.toAcceptProps<{ three: number }>();
  222 |     expect<Second>().type.toAcceptProps<{ three: number }>(); // fail

        at ./__typetests__/function-components.tst.tsx:219:43 ❭ when target is a type ❭ property does not exist in props type

Error: Component type does not accept props of the given type.

Type 'SecondProps' is not assignable with type '{ three?: number | undefined; }'.
Type 'SecondProps' requires property 'one' .

  217 | 
  218 |     expect<Second>().type.not.toAcceptProps<{ three?: number }>();
  219 |     expect<Second>().type.toAcceptProps<{ three?: number }>(); // fail
      |                                         ~~~~~~~~~~~~~~~~~~
  220 | 
  221 |     expect<Second>().type.not.toAcceptProps<{ three: number }>();
  222 |     expect<Second>().type.toAcceptProps<{ three: number }>(); // fail

        at ./__typetests__/function-components.tst.tsx:219:41 ❭ when target is a type ❭ property does not exist in props type

Error: Component type does not accept props of the given type.

Type 'SecondProps' is not compatible with type '{ three: number; }'.
Type 'SecondProps' does not have property 'three'.

  220 | 
  221 |     expect<Second>().type.not.toAcceptProps<{ three: number }>();
  222 |     expect<Second>().type.toAcceptProps<{ three: number }>(); // fail
      |                                           ~~~~~
  223 | 
  224 |     type SecondPropsSample = { three: number };
  225 |     expect<Second>().type.not.toAcceptProps<SecondPropsSample>();

        at ./__typetests__/function-components.tst.tsx:222:43 ❭ when target is a type ❭ property does not exist in props type

Error: Component type does not accept props of the given type.

Type 'SecondProps' is not assignable with type '{ three: number; }'.
Type 'SecondProps' requires property 'one' .

  220 | 
  221 |     expect<Second>().type.not.toAcceptProps<{ three: number }>();
  222 |     expect<Second>().type.toAcceptProps<{ three: number }>(); // fail
      |                                         ~~~~~~~~~~~~~~~~~
  223 | 
  224 |     type SecondPropsSample = { three: number };
  225 |     expect<Second>().type.not.toAcceptProps<SecondPropsSample>();

        at ./__typetests__/function-components.tst.tsx:222:41 ❭ when target is a type ❭ property does not exist in props type

Error: Component type does not accept props of the given type.

Type 'SecondProps' is not compatible with type 'SecondPropsSample'.
Type 'SecondProps' does not have property 'three'.

  224 |     type SecondPropsSample = { three: number };
  225 |     expect<Second>().type.not.toAcceptProps<SecondPropsSample>();
  226 |     expect<Second>().type.toAcceptProps<SecondPropsSample>(); // fail
      |                                         ~~~~~~~~~~~~~~~~~
  227 | 
  228 |     expect<Second>().type.not.toAcceptProps<{ two: string; three?: number }>();
  229 |     expect<Second>().type.toAcceptProps<{ two: string; three?: number }>(); // fail

        at ./__typetests__/function-components.tst.tsx:226:41 ❭ when target is a type ❭ property does not exist in props type

Error: Component type does not accept props of the given type.

Type 'SecondProps' is not assignable with type 'SecondPropsSample'.
Type 'SecondProps' requires property 'one' .

  224 |     type SecondPropsSample = { three: number };
  225 |     expect<Second>().type.not.toAcceptProps<SecondPropsSample>();
  226 |     expect<Second>().type.toAcceptProps<SecondPropsSample>(); // fail
      |                                         ~~~~~~~~~~~~~~~~~
  227 | 
  228 |     expect<Second>().type.not.toAcceptProps<{ two: string; three?: number }>();
  229 |     expect<Second>().type.toAcceptProps<{ two: string; three?: number }>(); // fail

        at ./__typetests__/function-components.tst.tsx:226:41 ❭ when target is a type ❭ property does not exist in props type

Error: Component type does not accept props of the given type.

Type 'SecondProps' is not assignable with type '{ two: string; three?: number | undefined; }'.
Types of property 'two' are incompatible.
Type 'boolean | undefined' is not assignable with type 'string'.

  227 | 
  228 |     expect<Second>().type.not.toAcceptProps<{ two: string; three?: number }>();
  229 |     expect<Second>().type.toAcceptProps<{ two: string; three?: number }>(); // fail
      |                                           ~~~
  230 | 
  231 |     expect<Second>().type.not.toAcceptProps<{ two: string; three: number }>();
  232 |     expect<Second>().type.toAcceptProps<{ two: string; three: number }>(); // fail

        at ./__typetests__/function-components.tst.tsx:229:43 ❭ when target is a type ❭ property does not exist in props type

Error: Component type does not accept props of the given type.

Type 'SecondProps' is not compatible with type '{ two: string; three?: number | undefined; }'.
Type 'SecondProps' does not have property 'three'.

  227 | 
  228 |     expect<Second>().type.not.toAcceptProps<{ two: string; three?: number }>();
  229 |     expect<Second>().type.toAcceptProps<{ two: string; three?: number }>(); // fail
      |                                                        ~~~~~
  230 | 
  231 |     expect<Second>().type.not.toAcceptProps<{ two: string; three: number }>();
  232 |     expect<Second>().type.toAcceptProps<{ two: string; three: number }>(); // fail

        at ./__typetests__/function-components.tst.tsx:229:56 ❭ when target is a type ❭ property does not exist in props type

Error: Component type does not accept props of the given type.

Type 'SecondProps' is not assignable with type '{ two: string; three?: number | undefined; }'.
Type 'SecondProps' requires property 'one' .

  227 | 
  228 |     expect<Second>().type.not.toAcceptProps<{ two: string; three?: number }>();
  229 |     expect<Second>().type.toAcceptProps<{ two: string; three?: number }>(); // fail
      |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  230 | 
  231 |     expect<Second>().type.not.toAcceptProps<{ two: string; three: number }>();
  232 |     expect<Second>().type.toAcceptProps<{ two: string; three: number }>(); // fail

        at ./__typetests__/function-components.tst.tsx:229:41 ❭ when target is a type ❭ property does not exist in props type

Error: Component type does not accept props of the given type.

Type 'SecondProps' is not assignable with type '{ two: string; three: number; }'.
Types of property 'two' are incompatible.
Type 'boolean | undefined' is not assignable with type 'string'.

  230 | 
  231 |     expect<Second>().type.not.toAcceptProps<{ two: string; three: number }>();
  232 |     expect<Second>().type.toAcceptProps<{ two: string; three: number }>(); // fail
      |                                           ~~~
  233 | 
  234 |     expect<Second>().type.not.toAcceptProps<{ one: string; two: string; three?: number }>();
  235 |     expect<Second>().type.toAcceptProps<{ one: string; two: string; three?: number }>(); // fail

        at ./__typetests__/function-components.tst.tsx:232:43 ❭ when target is a type ❭ property does not exist in props type

Error: Component type does not accept props of the given type.

Type 'SecondProps' is not compatible with type '{ two: string; three: number; }'.
Type 'SecondProps' does not have property 'three'.

  230 | 
  231 |     expect<Second>().type.not.toAcceptProps<{ two: string; three: number }>();
  232 |     expect<Second>().type.toAcceptProps<{ two: string; three: number }>(); // fail
      |                                                        ~~~~~
  233 | 
  234 |     expect<Second>().type.not.toAcceptProps<{ one: string; two: string; three?: number }>();
  235 |     expect<Second>().type.toAcceptProps<{ one: string; two: string; three?: number }>(); // fail

        at ./__typetests__/function-components.tst.tsx:232:56 ❭ when target is a type ❭ property does not exist in props type

Error: Component type does not accept props of the given type.

Type 'SecondProps' is not assignable with type '{ two: string; three: number; }'.
Type 'SecondProps' requires property 'one' .

  230 | 
  231 |     expect<Second>().type.not.toAcceptProps<{ two: string; three: number }>();
  232 |     expect<Second>().type.toAcceptProps<{ two: string; three: number }>(); // fail
      |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  233 | 
  234 |     expect<Second>().type.not.toAcceptProps<{ one: string; two: string; three?: number }>();
  235 |     expect<Second>().type.toAcceptProps<{ one: string; two: string; three?: number }>(); // fail

        at ./__typetests__/function-components.tst.tsx:232:41 ❭ when target is a type ❭ property does not exist in props type

Error: Component type does not accept props of the given type.

Type 'SecondProps' is not assignable with type '{ one: string; two: string; three?: number | undefined; }'.
Types of property 'two' are incompatible.
Type 'boolean | undefined' is not assignable with type 'string'.

  233 | 
  234 |     expect<Second>().type.not.toAcceptProps<{ one: string; two: string; three?: number }>();
  235 |     expect<Second>().type.toAcceptProps<{ one: string; two: string; three?: number }>(); // fail
      |                                                        ~~~
  236 | 
  237 |     expect<Second>().type.not.toAcceptProps<{ one: string; two: string; three: number }>();
  238 |     expect<Second>().type.toAcceptProps<{ one: string; two: string; three: number }>(); // fail

        at ./__typetests__/function-components.tst.tsx:235:56 ❭ when target is a type ❭ property does not exist in props type

Error: Component type does not accept props of the given type.

Type 'SecondProps' is not compatible with type '{ one: string; two: string; three?: number | undefined; }'.
Type 'SecondProps' does not have property 'three'.

  233 | 
  234 |     expect<Second>().type.not.toAcceptProps<{ one: string; two: string; three?: number }>();
  235 |     expect<Second>().type.toAcceptProps<{ one: string; two: string; three?: number }>(); // fail
      |                                                                     ~~~~~
  236 | 
  237 |     expect<Second>().type.not.toAcceptProps<{ one: string; two: string; three: number }>();
  238 |     expect<Second>().type.toAcceptProps<{ one: string; two: string; three: number }>(); // fail

        at ./__typetests__/function-components.tst.tsx:235:69 ❭ when target is a type ❭ property does not exist in props type

Error: Component type does not accept props of the given type.

Type 'SecondProps' is not assignable with type '{ one: string; two: string; three: number; }'.
Types of property 'two' are incompatible.
Type 'boolean | undefined' is not assignable with type 'string'.

  236 | 
  237 |     expect<Second>().type.not.toAcceptProps<{ one: string; two: string; three: number }>();
  238 |     expect<Second>().type.toAcceptProps<{ one: string; two: string; three: number }>(); // fail
      |                                                        ~~~
  239 | 
  240 |     expect<Second>().type.not.toAcceptProps<{ one: string; two?: boolean; three?: number }>();
  241 |     expect<Second>().type.toAcceptProps<{ one: string; two?: boolean; three?: number }>(); // fail

        at ./__typetests__/function-components.tst.tsx:238:56 ❭ when target is a type ❭ property does not exist in props type

Error: Component type does not accept props of the given type.

Type 'SecondProps' is not compatible with type '{ one: string; two: string; three: number; }'.
Type 'SecondProps' does not have property 'three'.

  236 | 
  237 |     expect<Second>().type.not.toAcceptProps<{ one: string; two: string; three: number }>();
  238 |     expect<Second>().type.toAcceptProps<{ one: string; two: string; three: number }>(); // fail
      |                                                                     ~~~~~
  239 | 
  240 |     expect<Second>().type.not.toAcceptProps<{ one: string; two?: boolean; three?: number }>();
  241 |     expect<Second>().type.toAcceptProps<{ one: string; two?: boolean; three?: number }>(); // fail

        at ./__typetests__/function-components.tst.tsx:238:69 ❭ when target is a type ❭ property does not exist in props type

Error: Component type does not accept props of the given type.

Type 'SecondProps' is not compatible with type '{ one: string; two?: boolean | undefined; three?: number | undefined; }'.
Type 'SecondProps' does not have property 'three'.

  239 | 
  240 |     expect<Second>().type.not.toAcceptProps<{ one: string; two?: boolean; three?: number }>();
  241 |     expect<Second>().type.toAcceptProps<{ one: string; two?: boolean; three?: number }>(); // fail
      |                                                                       ~~~~~
  242 | 
  243 |     expect<Second>().type.not.toAcceptProps<{ one: string; two: boolean; three: number }>();
  244 |     expect<Second>().type.toAcceptProps<{ one: string; two: boolean; three: number }>(); // fail

        at ./__typetests__/function-components.tst.tsx:241:71 ❭ when target is a type ❭ property does not exist in props type

Error: Component type does not accept props of the given type.

Type 'SecondProps' is not compatible with type '{ one: string; two: boolean; three: number; }'.
Type 'SecondProps' does not have property 'three'.

  242 | 
  243 |     expect<Second>().type.not.toAcceptProps<{ one: string; two: boolean; three: number }>();
  244 |     expect<Second>().type.toAcceptProps<{ one: string; two: boolean; three: number }>(); // fail
      |                                                                      ~~~~~
  245 |   });
  246 | 
  247 |   test("property type is not assignable to prop type", () => {

        at ./__typetests__/function-components.tst.tsx:244:70 ❭ when target is a type ❭ property does not exist in props type

Error: Component type does not accept props of the given type.

Type 'FirstProps' is not assignable with type '{ one?: number | undefined; }'.
Types of property 'one' are incompatible.
Type 'string | undefined' is not assignable with type 'number | undefined'.

  247 |   test("property type is not assignable to prop type", () => {
  248 |     expect<First>().type.not.toAcceptProps<{ one?: number }>();
  249 |     expect<First>().type.toAcceptProps<{ one?: number }>(); // fail
      |                                          ~~~
  250 | 
  251 |     expect<First>().type.not.toAcceptProps<{ one: number }>();
  252 |     expect<First>().type.toAcceptProps<{ one: number }>(); // fail

        at ./__typetests__/function-components.tst.tsx:249:42 ❭ when target is a type ❭ property type is not assignable to prop type

Error: Component type does not accept props of the given type.

Type 'FirstProps' is not assignable with type '{ one: number; }'.
Types of property 'one' are incompatible.
Type 'string | undefined' is not assignable with type 'number'.

  250 | 
  251 |     expect<First>().type.not.toAcceptProps<{ one: number }>();
  252 |     expect<First>().type.toAcceptProps<{ one: number }>(); // fail
      |                                          ~~~
  253 | 
  254 |     type FirstPropsSample = { one: number };
  255 |     expect<First>().type.not.toAcceptProps<FirstPropsSample>();

        at ./__typetests__/function-components.tst.tsx:252:42 ❭ when target is a type ❭ property type is not assignable to prop type

Error: Component type does not accept props of the given type.

Type 'FirstProps' is not assignable with type 'FirstPropsSample'.
Types of property 'one' are incompatible.
Type 'string | undefined' is not assignable with type 'number'.

  254 |     type FirstPropsSample = { one: number };
  255 |     expect<First>().type.not.toAcceptProps<FirstPropsSample>();
  256 |     expect<First>().type.toAcceptProps<FirstPropsSample>(); // fail
      |                                        ~~~~~~~~~~~~~~~~
  257 | 
  258 |     expect<Second>().type.not.toAcceptProps<{ one: number }>();
  259 |     expect<Second>().type.toAcceptProps<{ one: number }>(); // fail

        at ./__typetests__/function-components.tst.tsx:256:40 ❭ when target is a type ❭ property type is not assignable to prop type

Error: Component type does not accept props of the given type.

Type 'SecondProps' is not assignable with type '{ one: number; }'.
Types of property 'one' are incompatible.
Type 'string | undefined' is not assignable with type 'number'.

  257 | 
  258 |     expect<Second>().type.not.toAcceptProps<{ one: number }>();
  259 |     expect<Second>().type.toAcceptProps<{ one: number }>(); // fail
      |                                           ~~~
  260 | 
  261 |     expect<Second>().type.not.toAcceptProps<{ one: number; two?: number }>();
  262 |     expect<Second>().type.toAcceptProps<{ one: number; two?: number }>(); // fail

        at ./__typetests__/function-components.tst.tsx:259:43 ❭ when target is a type ❭ property type is not assignable to prop type

Error: Component type does not accept props of the given type.

Type 'SecondProps' is not assignable with type '{ one: number; two?: number | undefined; }'.
Types of property 'one' are incompatible.
Type 'string | undefined' is not assignable with type 'number'.

  260 | 
  261 |     expect<Second>().type.not.toAcceptProps<{ one: number; two?: number }>();
  262 |     expect<Second>().type.toAcceptProps<{ one: number; two?: number }>(); // fail
      |                                           ~~~
  263 | 
  264 |     expect<Second>().type.not.toAcceptProps<{ one: number; two: number }>();
  265 |     expect<Second>().type.toAcceptProps<{ one: number; two: number }>(); // fail

        at ./__typetests__/function-components.tst.tsx:262:43 ❭ when target is a type ❭ property type is not assignable to prop type

Error: Component type does not accept props of the given type.

Type 'SecondProps' is not assignable with type '{ one: number; two?: number | undefined; }'.
Types of property 'two' are incompatible.
Type 'boolean | undefined' is not assignable with type 'number | undefined'.

  260 | 
  261 |     expect<Second>().type.not.toAcceptProps<{ one: number; two?: number }>();
  262 |     expect<Second>().type.toAcceptProps<{ one: number; two?: number }>(); // fail
      |                                                        ~~~
  263 | 
  264 |     expect<Second>().type.not.toAcceptProps<{ one: number; two: number }>();
  265 |     expect<Second>().type.toAcceptProps<{ one: number; two: number }>(); // fail

        at ./__typetests__/function-components.tst.tsx:262:56 ❭ when target is a type ❭ property type is not assignable to prop type

Error: Component type does not accept props of the given type.

Type 'SecondProps' is not assignable with type '{ one: number; two: number; }'.
Types of property 'one' are incompatible.
Type 'string | undefined' is not assignable with type 'number'.

  263 | 
  264 |     expect<Second>().type.not.toAcceptProps<{ one: number; two: number }>();
  265 |     expect<Second>().type.toAcceptProps<{ one: number; two: number }>(); // fail
      |                                           ~~~
  266 | 
  267 |     type SecondPropsSample = { one: number; two: number };
  268 |     expect<Second>().type.not.toAcceptProps<SecondPropsSample>();

        at ./__typetests__/function-components.tst.tsx:265:43 ❭ when target is a type ❭ property type is not assignable to prop type

Error: Component type does not accept props of the given type.

Type 'SecondProps' is not assignable with type '{ one: number; two: number; }'.
Types of property 'two' are incompatible.
Type 'boolean | undefined' is not assignable with type 'number'.

  263 | 
  264 |     expect<Second>().type.not.toAcceptProps<{ one: number; two: number }>();
  265 |     expect<Second>().type.toAcceptProps<{ one: number; two: number }>(); // fail
      |                                                        ~~~
  266 | 
  267 |     type SecondPropsSample = { one: number; two: number };
  268 |     expect<Second>().type.not.toAcceptProps<SecondPropsSample>();

        at ./__typetests__/function-components.tst.tsx:265:56 ❭ when target is a type ❭ property type is not assignable to prop type

Error: Component type does not accept props of the given type.

Type 'SecondProps' is not assignable with type 'SecondPropsSample'.
Types of property 'one' are incompatible.
Type 'string | undefined' is not assignable with type 'number'.

  267 |     type SecondPropsSample = { one: number; two: number };
  268 |     expect<Second>().type.not.toAcceptProps<SecondPropsSample>();
  269 |     expect<Second>().type.toAcceptProps<SecondPropsSample>(); // fail
      |                                         ~~~~~~~~~~~~~~~~~
  270 |   });
  271 | });
  272 | 

        at ./__typetests__/function-components.tst.tsx:269:41 ❭ when target is a type ❭ property type is not assignable to prop type

Error: Component type does not accept props of the given type.

Type 'SecondProps' is not assignable with type 'SecondPropsSample'.
Types of property 'two' are incompatible.
Type 'boolean | undefined' is not assignable with type 'number'.

  267 |     type SecondPropsSample = { one: number; two: number };
  268 |     expect<Second>().type.not.toAcceptProps<SecondPropsSample>();
  269 |     expect<Second>().type.toAcceptProps<SecondPropsSample>(); // fail
      |                                         ~~~~~~~~~~~~~~~~~
  270 |   });
  271 | });
  272 | 

        at ./__typetests__/function-components.tst.tsx:269:41 ❭ when target is a type ❭ property type is not assignable to prop type

