Error: Expression is callable with the given argument.

  10 |   test("is callable with the given argument", () => {
  11 |     expect(optional).type.toBeCallableWith("one");
  12 |     expect(optional).type.not.toBeCallableWith("one"); // fail
     |                               ~~~~~~~~~~~~~~~~
  13 | 
  14 |     expect(leading).type.toBeCallableWith(false);
  15 |     expect(leading).type.not.toBeCallableWith(false); // fail

       at ./__typetests__/rest-parameters.tst.ts:12:31 ❭ when target is an expression ❭ is callable with the given argument

Error: Expression is callable with the given argument.

  13 | 
  14 |     expect(leading).type.toBeCallableWith(false);
  15 |     expect(leading).type.not.toBeCallableWith(false); // fail
     |                              ~~~~~~~~~~~~~~~~
  16 | 
  17 |     expect(trailing).type.toBeCallableWith(true);
  18 |     expect(trailing).type.not.toBeCallableWith(true); // fail

       at ./__typetests__/rest-parameters.tst.ts:15:30 ❭ when target is an expression ❭ is callable with the given argument

Error: Expression is callable with the given argument.

  16 | 
  17 |     expect(trailing).type.toBeCallableWith(true);
  18 |     expect(trailing).type.not.toBeCallableWith(true); // fail
     |                               ~~~~~~~~~~~~~~~~
  19 |   });
  20 | 
  21 |   test("is callable with the given arguments", () => {

       at ./__typetests__/rest-parameters.tst.ts:18:31 ❭ when target is an expression ❭ is callable with the given argument

Error: Expression is callable with the given arguments.

  21 |   test("is callable with the given arguments", () => {
  22 |     expect(optional).type.toBeCallableWith("one", 2, true);
  23 |     expect(optional).type.not.toBeCallableWith("one", 2, true); // fail
     |                               ~~~~~~~~~~~~~~~~
  24 | 
  25 |     expect(leading).type.toBeCallableWith("one", "two", true);
  26 |     expect(leading).type.not.toBeCallableWith("one", "two", true); // fail

       at ./__typetests__/rest-parameters.tst.ts:23:31 ❭ when target is an expression ❭ is callable with the given arguments

Error: Expression is callable with the given arguments.

  24 | 
  25 |     expect(leading).type.toBeCallableWith("one", "two", true);
  26 |     expect(leading).type.not.toBeCallableWith("one", "two", true); // fail
     |                              ~~~~~~~~~~~~~~~~
  27 | 
  28 |     expect(leading).type.toBeCallableWith(...["one", "two"], true);
  29 |     expect(leading).type.not.toBeCallableWith(...["one", "two"], true); // fail

       at ./__typetests__/rest-parameters.tst.ts:26:30 ❭ when target is an expression ❭ is callable with the given arguments

Error: Expression is callable with the given arguments.

  27 | 
  28 |     expect(leading).type.toBeCallableWith(...["one", "two"], true);
  29 |     expect(leading).type.not.toBeCallableWith(...["one", "two"], true); // fail
     |                              ~~~~~~~~~~~~~~~~
  30 | 
  31 |     expect(middle).type.toBeCallableWith("one", 123, 456, true);
  32 |     expect(middle).type.not.toBeCallableWith("one", 123, 456, true); // fail

       at ./__typetests__/rest-parameters.tst.ts:29:30 ❭ when target is an expression ❭ is callable with the given arguments

Error: Expression is callable with the given arguments.

  30 | 
  31 |     expect(middle).type.toBeCallableWith("one", 123, 456, true);
  32 |     expect(middle).type.not.toBeCallableWith("one", 123, 456, true); // fail
     |                             ~~~~~~~~~~~~~~~~
  33 | 
  34 |     expect(middle).type.toBeCallableWith(...["one", 123, 456, true]);
  35 |     expect(middle).type.not.toBeCallableWith(...["one", 123, 456, true]); // fail

       at ./__typetests__/rest-parameters.tst.ts:32:29 ❭ when target is an expression ❭ is callable with the given arguments

Error: Expression is callable with the given arguments.

  33 | 
  34 |     expect(middle).type.toBeCallableWith(...["one", 123, 456, true]);
  35 |     expect(middle).type.not.toBeCallableWith(...["one", 123, 456, true]); // fail
     |                             ~~~~~~~~~~~~~~~~
  36 | 
  37 |     expect(trailing).type.toBeCallableWith(false, "ten", "eleven");
  38 |     expect(trailing).type.not.toBeCallableWith(false, "ten", "eleven"); // fail

       at ./__typetests__/rest-parameters.tst.ts:35:29 ❭ when target is an expression ❭ is callable with the given arguments

Error: Expression is callable with the given arguments.

  36 | 
  37 |     expect(trailing).type.toBeCallableWith(false, "ten", "eleven");
  38 |     expect(trailing).type.not.toBeCallableWith(false, "ten", "eleven"); // fail
     |                               ~~~~~~~~~~~~~~~~
  39 | 
  40 |     expect(trailing).type.toBeCallableWith(false, ...["ten", "eleven"]);
  41 |     expect(trailing).type.not.toBeCallableWith(false, ...["ten", "eleven"]); // fail

       at ./__typetests__/rest-parameters.tst.ts:38:31 ❭ when target is an expression ❭ is callable with the given arguments

Error: Expression is callable with the given arguments.

  39 | 
  40 |     expect(trailing).type.toBeCallableWith(false, ...["ten", "eleven"]);
  41 |     expect(trailing).type.not.toBeCallableWith(false, ...["ten", "eleven"]); // fail
     |                               ~~~~~~~~~~~~~~~~
  42 |   });
  43 | 
  44 |   test("is callable without arguments", () => {

       at ./__typetests__/rest-parameters.tst.ts:41:31 ❭ when target is an expression ❭ is callable with the given arguments

Error: Expression is callable without arguments.

  44 |   test("is callable without arguments", () => {
  45 |     expect(optional).type.toBeCallableWith();
  46 |     expect(optional).type.not.toBeCallableWith(); // fail
     |                               ~~~~~~~~~~~~~~~~
  47 |   });
  48 | 
  49 |   test("is not callable without arguments", () => {

       at ./__typetests__/rest-parameters.tst.ts:46:31 ❭ when target is an expression ❭ is callable without arguments

Error: Expression is not callable without arguments.

Argument of type '[]' is not assignable to parameter of type '[...string[], boolean]'.
Source has 0 element(s) but target requires 1.

  49 |   test("is not callable without arguments", () => {
  50 |     expect(leading).type.not.toBeCallableWith();
  51 |     expect(leading).type.toBeCallableWith(); // fail: Source has 0 element(s) but target requires 1.
     |                          ~~~~~~~~~~~~~~~~
  52 | 
  53 |     expect(middle).type.not.toBeCallableWith();
  54 |     expect(middle).type.toBeCallableWith(); // fail: Expected at least 1 arguments, but got 0.

       at ./__typetests__/rest-parameters.tst.ts:51:26 ❭ when target is an expression ❭ is not callable without arguments

Error: Expression is not callable without arguments.

Expected at least 1 arguments, but got 0.

  52 | 
  53 |     expect(middle).type.not.toBeCallableWith();
  54 |     expect(middle).type.toBeCallableWith(); // fail: Expected at least 1 arguments, but got 0.
     |                         ~~~~~~~~~~~~~~~~
  55 | 
  56 |     expect(trailing).type.not.toBeCallableWith();
  57 |     expect(trailing).type.toBeCallableWith(); // fail: Expected at least 1 arguments, but got 0.

       at ./__typetests__/rest-parameters.tst.ts:54:25 ❭ when target is an expression ❭ is not callable without arguments

    Arguments for the rest parameter 'args' were not provided. ts(6236)

      4 | 
      5 | declare function leading(...args: [...Array<string>, boolean]): void;
      6 | declare function middle(...args: [string, ...Array<number>, boolean]): void;
        |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      7 | declare function trailing(x: boolean, ...y: Array<string>): void;
      8 | 
      9 | describe("when target is an expression", () => {

          at ./__typetests__/rest-parameters.tst.ts:6:25

Error: Expression is not callable without arguments.

Expected at least 1 arguments, but got 0.

  55 | 
  56 |     expect(trailing).type.not.toBeCallableWith();
  57 |     expect(trailing).type.toBeCallableWith(); // fail: Expected at least 1 arguments, but got 0.
     |                           ~~~~~~~~~~~~~~~~
  58 |   });
  59 | 
  60 |   test("is not callable with the given arguments", () => {

       at ./__typetests__/rest-parameters.tst.ts:57:27 ❭ when target is an expression ❭ is not callable without arguments

    An argument for 'x' was not provided. ts(6210)

       5 | declare function leading(...args: [...Array<string>, boolean]): void;
       6 | declare function middle(...args: [string, ...Array<number>, boolean]): void;
       7 | declare function trailing(x: boolean, ...y: Array<string>): void;
         |                           ~~~~~~~~~~
       8 | 
       9 | describe("when target is an expression", () => {
      10 |   test("is callable with the given argument", () => {

           at ./__typetests__/rest-parameters.tst.ts:7:27

Error: Expression is not callable with the given arguments.

Argument of type '["one", "two"]' is not assignable to parameter of type '[...string[], boolean]'.
Type at position 1 in source is not compatible with type at position 1 in target.
Type 'string' is not assignable to type 'boolean'.

  60 |   test("is not callable with the given arguments", () => {
  61 |     expect(leading).type.not.toBeCallableWith("one", "two");
  62 |     expect(leading).type.toBeCallableWith("one", "two"); // fail
     |                                           ~~~~~~~~~~~~
  63 | 
  64 |     expect(leading).type.not.toBeCallableWith(...["one", "two"]);
  65 |     expect(leading).type.toBeCallableWith(...["one", "two"]); // fail

       at ./__typetests__/rest-parameters.tst.ts:62:43 ❭ when target is an expression ❭ is not callable with the given arguments

Error: Expression is not callable with the given arguments.

Argument of type '[string, string]' is not assignable to parameter of type '[...string[], boolean]'.
Type at position 1 in source is not compatible with type at position 1 in target.
Type 'string' is not assignable to type 'boolean'.

  63 | 
  64 |     expect(leading).type.not.toBeCallableWith(...["one", "two"]);
  65 |     expect(leading).type.toBeCallableWith(...["one", "two"]); // fail
     |                                           ~~~~~~~~~~~~~~~~~
  66 | 
  67 |     expect(leading).type.not.toBeCallableWith(3, 4, true);
  68 |     expect(leading).type.toBeCallableWith(3, 4, true); // fail

       at ./__typetests__/rest-parameters.tst.ts:65:43 ❭ when target is an expression ❭ is not callable with the given arguments

Error: Expression is not callable with the given arguments.

Argument of type '[3, 4, true]' is not assignable to parameter of type '[...string[], boolean]'.
Type at positions 0 through 1 in source is not compatible with type at position 0 in target.
Type 'number' is not assignable to type 'string'.

  66 | 
  67 |     expect(leading).type.not.toBeCallableWith(3, 4, true);
  68 |     expect(leading).type.toBeCallableWith(3, 4, true); // fail
     |                                           ~~~~~~~~~~
  69 | 
  70 |     expect(leading).type.not.toBeCallableWith(...[3, 4], true);
  71 |     expect(leading).type.toBeCallableWith(...[3, 4], true); // fail

       at ./__typetests__/rest-parameters.tst.ts:68:43 ❭ when target is an expression ❭ is not callable with the given arguments

Error: Expression is not callable with the given arguments.

Argument of type '[number, number, true]' is not assignable to parameter of type '[...string[], boolean]'.
Type at positions 0 through 1 in source is not compatible with type at position 0 in target.
Type 'number' is not assignable to type 'string'.

  69 | 
  70 |     expect(leading).type.not.toBeCallableWith(...[3, 4], true);
  71 |     expect(leading).type.toBeCallableWith(...[3, 4], true); // fail
     |                                           ~~~~~~~~~~~~~~~
  72 | 
  73 |     expect(middle).type.not.toBeCallableWith("one", 2, 3);
  74 |     expect(middle).type.toBeCallableWith("one", 2, 3); // fail

       at ./__typetests__/rest-parameters.tst.ts:71:43 ❭ when target is an expression ❭ is not callable with the given arguments

Error: Expression is not callable with the given arguments.

Argument of type '[2, 3]' is not assignable to parameter of type '[...number[], boolean]'.
Type at position 1 in source is not compatible with type at position 1 in target.
Type 'number' is not assignable to type 'boolean'.

  72 | 
  73 |     expect(middle).type.not.toBeCallableWith("one", 2, 3);
  74 |     expect(middle).type.toBeCallableWith("one", 2, 3); // fail
     |                                                 ~~~~
  75 | 
  76 |     expect(middle).type.not.toBeCallableWith(...["one", 2, 3]);
  77 |     expect(middle).type.toBeCallableWith(...["one", 2, 3]); // fail

       at ./__typetests__/rest-parameters.tst.ts:74:49 ❭ when target is an expression ❭ is not callable with the given arguments

Error: Expression is not callable with the given arguments.

Argument of type '[number, number]' is not assignable to parameter of type '[...number[], boolean]'.
Type at position 1 in source is not compatible with type at position 1 in target.
Type 'number' is not assignable to type 'boolean'.

  75 | 
  76 |     expect(middle).type.not.toBeCallableWith(...["one", 2, 3]);
  77 |     expect(middle).type.toBeCallableWith(...["one", 2, 3]); // fail
     |                                          ~~~~~~~~~~~~~~~~
  78 | 
  79 |     expect(middle).type.not.toBeCallableWith("one", "two", "three", true);
  80 |     expect(middle).type.toBeCallableWith("one", "two", "three", true); // fail

       at ./__typetests__/rest-parameters.tst.ts:77:42 ❭ when target is an expression ❭ is not callable with the given arguments

Error: Expression is not callable with the given arguments.

Argument of type '["two", "three", true]' is not assignable to parameter of type '[...number[], boolean]'.
Type at positions 0 through 1 in source is not compatible with type at position 0 in target.
Type 'string' is not assignable to type 'number'.

  78 | 
  79 |     expect(middle).type.not.toBeCallableWith("one", "two", "three", true);
  80 |     expect(middle).type.toBeCallableWith("one", "two", "three", true); // fail
     |                                                 ~~~~~~~~~~~~~~~~~~~~
  81 | 
  82 |     expect(middle).type.not.toBeCallableWith(...["one", "two", "three", true]);
  83 |     expect(middle).type.toBeCallableWith(...["one", "two", "three", true]); // fail

       at ./__typetests__/rest-parameters.tst.ts:80:49 ❭ when target is an expression ❭ is not callable with the given arguments

Error: Expression is not callable with the given arguments.

Argument of type '[string, string, boolean]' is not assignable to parameter of type '[...number[], boolean]'.
Type at positions 0 through 1 in source is not compatible with type at position 0 in target.
Type 'string' is not assignable to type 'number'.

  81 | 
  82 |     expect(middle).type.not.toBeCallableWith(...["one", "two", "three", true]);
  83 |     expect(middle).type.toBeCallableWith(...["one", "two", "three", true]); // fail
     |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  84 | 
  85 |     expect(trailing).type.not.toBeCallableWith("ten", "eleven");
  86 |     expect(trailing).type.toBeCallableWith("ten", "eleven"); // fail

       at ./__typetests__/rest-parameters.tst.ts:83:42 ❭ when target is an expression ❭ is not callable with the given arguments

Error: Expression is not callable with the given arguments.

Argument of type 'string' is not assignable to parameter of type 'boolean'.

  84 | 
  85 |     expect(trailing).type.not.toBeCallableWith("ten", "eleven");
  86 |     expect(trailing).type.toBeCallableWith("ten", "eleven"); // fail
     |                                            ~~~~~
  87 | 
  88 |     expect(trailing).type.not.toBeCallableWith(...["ten", "eleven"]);
  89 |     expect(trailing).type.toBeCallableWith(...["ten", "eleven"]); // fail

       at ./__typetests__/rest-parameters.tst.ts:86:44 ❭ when target is an expression ❭ is not callable with the given arguments

Error: Expression is not callable with the given arguments.

Argument of type 'string' is not assignable to parameter of type 'boolean'.

  87 | 
  88 |     expect(trailing).type.not.toBeCallableWith(...["ten", "eleven"]);
  89 |     expect(trailing).type.toBeCallableWith(...["ten", "eleven"]); // fail
     |                                            ~~~~~~~~~~~~~~~~~~~~
  90 | 
  91 |     expect(trailing).type.not.toBeCallableWith(false, 10, 11);
  92 |     expect(trailing).type.toBeCallableWith(false, 10, 11); // fail

       at ./__typetests__/rest-parameters.tst.ts:89:44 ❭ when target is an expression ❭ is not callable with the given arguments

Error: Expression is not callable with the given arguments.

Argument of type 'number' is not assignable to parameter of type 'string'.

  90 | 
  91 |     expect(trailing).type.not.toBeCallableWith(false, 10, 11);
  92 |     expect(trailing).type.toBeCallableWith(false, 10, 11); // fail
     |                                                   ~~
  93 | 
  94 |     expect(trailing).type.not.toBeCallableWith(false, ...[10, 11]);
  95 |     expect(trailing).type.toBeCallableWith(false, ...[10, 11]); // fail

       at ./__typetests__/rest-parameters.tst.ts:92:51 ❭ when target is an expression ❭ is not callable with the given arguments

Error: Expression is not callable with the given arguments.

Argument of type 'number' is not assignable to parameter of type 'string'.

  93 | 
  94 |     expect(trailing).type.not.toBeCallableWith(false, ...[10, 11]);
  95 |     expect(trailing).type.toBeCallableWith(false, ...[10, 11]); // fail
     |                                                   ~~~~~~~~~~~
  96 |   });
  97 | });
  98 | 

       at ./__typetests__/rest-parameters.tst.ts:95:51 ❭ when target is an expression ❭ is not callable with the given arguments

