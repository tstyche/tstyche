Error: The diagnostic message did not match.

  18 | expect(pluralLocal).type.toBeCallableWith({});
  19 | expect(pluralLocal).type.toBeCallableWith({ count: 100, text: false });
  20 | // @ts-expect-error This directive must be visible
     |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  21 | pluralLocal();
  22 | 

       at ./__typetests__/related-diagnostics.tst.ts:20:21

    The suppressed error:

    Expected 1 arguments, but got 0. ts(2554)

      19 | expect(pluralLocal).type.toBeCallableWith({ count: 100, text: false });
      20 | // @ts-expect-error This directive must be visible
      21 | pluralLocal();
         | ~~~~~~~~~~~
      22 | 

           at ./__typetests__/related-diagnostics.tst.ts:21:1

        An argument for 'options' was not provided. ts(6210)

          12 | }
          13 | 
          14 | declare function pluralLocal(options: PluralOptions): void;
             |                              ~~~~~~~~~~~~~~~~~~~~~~
          15 | 
          16 | expect(pluralLocal).type.toBeCallableWith({ count: 10, text: "Sample" });
          17 | 

               at ./__typetests__/related-diagnostics.tst.ts:14:30

Error: Expression is not callable with the given argument.

Argument of type '{}' is not assignable to parameter of type 'PluralOptions'.
Type '{}' is missing the following properties from type 'PluralOptions': count, text

  4 | expect(pluralExternal).type.toBeCallableWith({ count: 10, text: "Sample" });
  5 | 
  6 | expect(pluralExternal).type.toBeCallableWith({});
    |                                              ~~
  7 | expect(pluralExternal).type.toBeCallableWith({ count: 100, text: false });
  8 | 
  9 | interface PluralOptions {

      at ./__typetests__/related-diagnostics.tst.ts:6:46

Error: Expression is not callable with the given argument.

Type 'boolean' is not assignable to type 'string'.

   5 | 
   6 | expect(pluralExternal).type.toBeCallableWith({});
   7 | expect(pluralExternal).type.toBeCallableWith({ count: 100, text: false });
     |                                                            ~~~~
   8 | 
   9 | interface PluralOptions {
  10 |   count: number;

       at ./__typetests__/related-diagnostics.tst.ts:7:60

    The expected type comes from property 'text' which is declared here on type 'PluralOptions' ts(6500)

      1 | export interface PluralOptions {
      2 |   count: number;
      3 |   text: string;
        |   ~~~~
      4 | }
      5 | 
      6 | export declare function plural(options: PluralOptions): void;

          at ./__typetests__/plural.ts:3:3

Error: Expression is not callable with the given argument.

Argument of type '{}' is not assignable to parameter of type 'PluralOptions'.
Type '{}' is missing the following properties from type 'PluralOptions': count, text

  16 | expect(pluralLocal).type.toBeCallableWith({ count: 10, text: "Sample" });
  17 | 
  18 | expect(pluralLocal).type.toBeCallableWith({});
     |                                           ~~
  19 | expect(pluralLocal).type.toBeCallableWith({ count: 100, text: false });
  20 | // @ts-expect-error This directive must be visible
  21 | pluralLocal();

       at ./__typetests__/related-diagnostics.tst.ts:18:43

Error: Expression is not callable with the given argument.

Type 'boolean' is not assignable to type 'string'.

  17 | 
  18 | expect(pluralLocal).type.toBeCallableWith({});
  19 | expect(pluralLocal).type.toBeCallableWith({ count: 100, text: false });
     |                                                         ~~~~
  20 | // @ts-expect-error This directive must be visible
  21 | pluralLocal();
  22 | 

       at ./__typetests__/related-diagnostics.tst.ts:19:57

    The expected type comes from property 'text' which is declared here on type 'PluralOptions' ts(6500)

       9 | interface PluralOptions {
      10 |   count: number;
      11 |   text: string;
         |   ~~~~
      12 | }
      13 | 
      14 | declare function pluralLocal(options: PluralOptions): void;

           at ./__typetests__/related-diagnostics.tst.ts:11:3

