Error: An argument for 'source' or type argument for 'Source' must be provided.

  28 | describe("argument for 'source'", () => {
  29 |   test("must be provided", () => {
  30 |     expect().type.toBeConstructableWith(false);
     |     ~~~~~~
  31 |   });
  32 | 
  33 |   test("must be a constructable expression", () => {

       at ./__typetests__/toBeConstructableWith.tst.ts:30:5

Error: An argument for 'source' must be a constructable expression.

  32 | 
  33 |   test("must be a constructable expression", () => {
  34 |     expect("abc").type.toBeConstructableWith();
     |            ~~~~~
  35 |     expect(123).type.toBeConstructableWith();
  36 |     expect(false).type.toBeConstructableWith();
  37 |     expect(undefined).type.toBeConstructableWith();

       at ./__typetests__/toBeConstructableWith.tst.ts:34:12

Error: An argument for 'source' must be a constructable expression.

  33 |   test("must be a constructable expression", () => {
  34 |     expect("abc").type.toBeConstructableWith();
  35 |     expect(123).type.toBeConstructableWith();
     |            ~~~
  36 |     expect(false).type.toBeConstructableWith();
  37 |     expect(undefined).type.toBeConstructableWith();
  38 |     expect(null).type.toBeConstructableWith();

       at ./__typetests__/toBeConstructableWith.tst.ts:35:12

Error: An argument for 'source' must be a constructable expression.

  34 |     expect("abc").type.toBeConstructableWith();
  35 |     expect(123).type.toBeConstructableWith();
  36 |     expect(false).type.toBeConstructableWith();
     |            ~~~~~
  37 |     expect(undefined).type.toBeConstructableWith();
  38 |     expect(null).type.toBeConstructableWith();
  39 | 

       at ./__typetests__/toBeConstructableWith.tst.ts:36:12

Error: An argument for 'source' must be a constructable expression.

  35 |     expect(123).type.toBeConstructableWith();
  36 |     expect(false).type.toBeConstructableWith();
  37 |     expect(undefined).type.toBeConstructableWith();
     |            ~~~~~~~~~
  38 |     expect(null).type.toBeConstructableWith();
  39 | 
  40 |     expect(() => undefined).type.toBeConstructableWith();

       at ./__typetests__/toBeConstructableWith.tst.ts:37:12

Error: An argument for 'source' must be a constructable expression.

  36 |     expect(false).type.toBeConstructableWith();
  37 |     expect(undefined).type.toBeConstructableWith();
  38 |     expect(null).type.toBeConstructableWith();
     |            ~~~~
  39 | 
  40 |     expect(() => undefined).type.toBeConstructableWith();
  41 |     expect(() => {}).type.toBeConstructableWith();

       at ./__typetests__/toBeConstructableWith.tst.ts:38:12

Error: An argument for 'source' must be a constructable expression.

Did you mean to use the '.toBeCallableWith()' matcher?

  38 |     expect(null).type.toBeConstructableWith();
  39 | 
  40 |     expect(() => undefined).type.toBeConstructableWith();
     |            ~~~~~~~~~~~~~~~
  41 |     expect(() => {}).type.toBeConstructableWith();
  42 |     expect(() => () => false).type.toBeConstructableWith();
  43 | 

       at ./__typetests__/toBeConstructableWith.tst.ts:40:12

Error: An argument for 'source' must be a constructable expression.

Did you mean to use the '.toBeCallableWith()' matcher?

  39 | 
  40 |     expect(() => undefined).type.toBeConstructableWith();
  41 |     expect(() => {}).type.toBeConstructableWith();
     |            ~~~~~~~~
  42 |     expect(() => () => false).type.toBeConstructableWith();
  43 | 
  44 |     expect(getPerson).type.toBeConstructableWith("abc");

       at ./__typetests__/toBeConstructableWith.tst.ts:41:12

Error: An argument for 'source' must be a constructable expression.

Did you mean to use the '.toBeCallableWith()' matcher?

  40 |     expect(() => undefined).type.toBeConstructableWith();
  41 |     expect(() => {}).type.toBeConstructableWith();
  42 |     expect(() => () => false).type.toBeConstructableWith();
     |            ~~~~~~~~~~~~~~~~~
  43 | 
  44 |     expect(getPerson).type.toBeConstructableWith("abc");
  45 |     expect(getPerson("abc")).type.toBeConstructableWith("abc");

       at ./__typetests__/toBeConstructableWith.tst.ts:42:12

Error: An argument for 'source' must be a constructable expression.

Did you mean to use the '.toBeCallableWith()' matcher?

  42 |     expect(() => () => false).type.toBeConstructableWith();
  43 | 
  44 |     expect(getPerson).type.toBeConstructableWith("abc");
     |            ~~~~~~~~~
  45 |     expect(getPerson("abc")).type.toBeConstructableWith("abc");
  46 | 
  47 |     expect(getPersonGetter).type.toBeConstructableWith();

       at ./__typetests__/toBeConstructableWith.tst.ts:44:12

Error: An argument for 'source' must be a constructable expression.

  43 | 
  44 |     expect(getPerson).type.toBeConstructableWith("abc");
  45 |     expect(getPerson("abc")).type.toBeConstructableWith("abc");
     |            ~~~~~~~~~~~~~~~~
  46 | 
  47 |     expect(getPersonGetter).type.toBeConstructableWith();
  48 |     expect(getPersonGetter()).type.toBeConstructableWith("abc");

       at ./__typetests__/toBeConstructableWith.tst.ts:45:12

Error: An argument for 'source' must be a constructable expression.

Did you mean to use the '.toBeCallableWith()' matcher?

  45 |     expect(getPerson("abc")).type.toBeConstructableWith("abc");
  46 | 
  47 |     expect(getPersonGetter).type.toBeConstructableWith();
     |            ~~~~~~~~~~~~~~~
  48 |     expect(getPersonGetter()).type.toBeConstructableWith("abc");
  49 |     expect(getPersonConstructor).type.toBeConstructableWith("abc");
  50 |   });

       at ./__typetests__/toBeConstructableWith.tst.ts:47:12

Error: An argument for 'source' must be a constructable expression.

Did you mean to use the '.toBeCallableWith()' matcher?

  46 | 
  47 |     expect(getPersonGetter).type.toBeConstructableWith();
  48 |     expect(getPersonGetter()).type.toBeConstructableWith("abc");
     |            ~~~~~~~~~~~~~~~~~
  49 |     expect(getPersonConstructor).type.toBeConstructableWith("abc");
  50 |   });
  51 | 

       at ./__typetests__/toBeConstructableWith.tst.ts:48:12

Error: An argument for 'source' must be a constructable expression.

Did you mean to use the '.toBeCallableWith()' matcher?

  47 |     expect(getPersonGetter).type.toBeConstructableWith();
  48 |     expect(getPersonGetter()).type.toBeConstructableWith("abc");
  49 |     expect(getPersonConstructor).type.toBeConstructableWith("abc");
     |            ~~~~~~~~~~~~~~~~~~~~
  50 |   });
  51 | 
  52 |   test("allowed expressions", () => {

       at ./__typetests__/toBeConstructableWith.tst.ts:49:12

Error: An argument for 'source' cannot be of the 'any' type.

The 'any' type was rejected because the 'rejectAnyType' option is enabled.
If this check is necessary, pass 'any' as the type argument explicitly.

  59 | 
  60 |   test("is rejected type?", () => {
  61 |     expect("abc" as any).type.toBeConstructableWith();
     |            ~~~~~~~~~~~~
  62 |     expect("abc" as never).type.toBeConstructableWith();
  63 |   });
  64 | });

       at ./__typetests__/toBeConstructableWith.tst.ts:61:12

Error: An argument for 'source' cannot be of the 'never' type.

The 'never' type was rejected because the 'rejectNeverType' option is enabled.
If this check is necessary, pass 'never' as the type argument explicitly.

  60 |   test("is rejected type?", () => {
  61 |     expect("abc" as any).type.toBeConstructableWith();
  62 |     expect("abc" as never).type.toBeConstructableWith();
     |            ~~~~~~~~~~~~~~
  63 |   });
  64 | });
  65 | 

       at ./__typetests__/toBeConstructableWith.tst.ts:62:12

Error: A type argument for 'Source' must be a constructable type.

  66 | describe("type argument for 'Source'", () => {
  67 |   test("must be a constructable type", () => {
  68 |     expect<string>().type.toBeConstructableWith();
     |            ~~~~~~
  69 |     expect<number>().type.toBeConstructableWith();
  70 |     expect<boolean>().type.toBeConstructableWith();
  71 |     expect<undefined>().type.toBeConstructableWith();

       at ./__typetests__/toBeConstructableWith.tst.ts:68:12

Error: A type argument for 'Source' must be a constructable type.

  67 |   test("must be a constructable type", () => {
  68 |     expect<string>().type.toBeConstructableWith();
  69 |     expect<number>().type.toBeConstructableWith();
     |            ~~~~~~
  70 |     expect<boolean>().type.toBeConstructableWith();
  71 |     expect<undefined>().type.toBeConstructableWith();
  72 |     expect<null>().type.toBeConstructableWith();

       at ./__typetests__/toBeConstructableWith.tst.ts:69:12

Error: A type argument for 'Source' must be a constructable type.

  68 |     expect<string>().type.toBeConstructableWith();
  69 |     expect<number>().type.toBeConstructableWith();
  70 |     expect<boolean>().type.toBeConstructableWith();
     |            ~~~~~~~
  71 |     expect<undefined>().type.toBeConstructableWith();
  72 |     expect<null>().type.toBeConstructableWith();
  73 | 

       at ./__typetests__/toBeConstructableWith.tst.ts:70:12

Error: A type argument for 'Source' must be a constructable type.

  69 |     expect<number>().type.toBeConstructableWith();
  70 |     expect<boolean>().type.toBeConstructableWith();
  71 |     expect<undefined>().type.toBeConstructableWith();
     |            ~~~~~~~~~
  72 |     expect<null>().type.toBeConstructableWith();
  73 | 
  74 |     expect<() => undefined>().type.toBeConstructableWith();

       at ./__typetests__/toBeConstructableWith.tst.ts:71:12

Error: A type argument for 'Source' must be a constructable type.

  70 |     expect<boolean>().type.toBeConstructableWith();
  71 |     expect<undefined>().type.toBeConstructableWith();
  72 |     expect<null>().type.toBeConstructableWith();
     |            ~~~~
  73 | 
  74 |     expect<() => undefined>().type.toBeConstructableWith();
  75 |     expect<() => void>().type.toBeConstructableWith();

       at ./__typetests__/toBeConstructableWith.tst.ts:72:12

Error: A type argument for 'Source' must be a constructable type.

Did you mean to use the '.toBeCallableWith()' matcher?

  72 |     expect<null>().type.toBeConstructableWith();
  73 | 
  74 |     expect<() => undefined>().type.toBeConstructableWith();
     |            ~~~~~~~~~~~~~~~
  75 |     expect<() => void>().type.toBeConstructableWith();
  76 |     expect<() => () => boolean>().type.toBeConstructableWith();
  77 | 

       at ./__typetests__/toBeConstructableWith.tst.ts:74:12

Error: A type argument for 'Source' must be a constructable type.

Did you mean to use the '.toBeCallableWith()' matcher?

  73 | 
  74 |     expect<() => undefined>().type.toBeConstructableWith();
  75 |     expect<() => void>().type.toBeConstructableWith();
     |            ~~~~~~~~~~
  76 |     expect<() => () => boolean>().type.toBeConstructableWith();
  77 | 
  78 |     type Func = (arg: string) => void;

       at ./__typetests__/toBeConstructableWith.tst.ts:75:12

Error: A type argument for 'Source' must be a constructable type.

Did you mean to use the '.toBeCallableWith()' matcher?

  74 |     expect<() => undefined>().type.toBeConstructableWith();
  75 |     expect<() => void>().type.toBeConstructableWith();
  76 |     expect<() => () => boolean>().type.toBeConstructableWith();
     |            ~~~~~~~~~~~~~~~~~~~
  77 | 
  78 |     type Func = (arg: string) => void;
  79 |     expect<Func>().type.toBeCallableWith("abc");

       at ./__typetests__/toBeConstructableWith.tst.ts:76:12

Error: A type argument for 'Source' must be a constructable type.

  79 |     expect<Func>().type.toBeCallableWith("abc");
  80 | 
  81 |     expect<Person>().type.toBeConstructableWith("abc");
     |            ~~~~~~
  82 | 
  83 |     expect<typeof Person>().type.toBeConstructableWith("abc");
  84 |     expect<new (name: string) => Person>().type.toBeConstructableWith("abc");

       at ./__typetests__/toBeConstructableWith.tst.ts:81:12

Error: A type argument for 'Source' cannot be of the 'any' type.

The 'any' type was rejected because the 'rejectAnyType' option is enabled.
If this check is necessary, pass 'any' as the type argument explicitly.

  89 |     type Never = never;
  90 | 
  91 |     expect<Any>().type.toBeConstructableWith();
     |            ~~~
  92 |     expect<Never>().type.toBeConstructableWith();
  93 |   });
  94 | });

       at ./__typetests__/toBeConstructableWith.tst.ts:91:12

Error: A type argument for 'Source' cannot be of the 'never' type.

The 'never' type was rejected because the 'rejectNeverType' option is enabled.
If this check is necessary, pass 'never' as the type argument explicitly.

  90 | 
  91 |     expect<Any>().type.toBeConstructableWith();
  92 |     expect<Never>().type.toBeConstructableWith();
     |            ~~~~~
  93 |   });
  94 | });
  95 | 

       at ./__typetests__/toBeConstructableWith.tst.ts:92:12

