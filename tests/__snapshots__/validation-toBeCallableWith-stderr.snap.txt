Error: An argument for 'source' or type argument for 'Source' must be provided.

  23 | describe("argument for 'source'", () => {
  24 |   test("must be provided", () => {
  25 |     expect().type.toBeCallableWith(false);
     |     ~~~~~~
  26 |   });
  27 | 
  28 |   test("must be a callable expression", () => {

       at ./__typetests__/toBeCallableWith.tst.ts:25:5

Error: An argument for 'source' must be a callable expression.

  27 | 
  28 |   test("must be a callable expression", () => {
  29 |     expect("abc").type.toBeCallableWith();
     |            ~~~~~
  30 |     expect(123).type.toBeCallableWith();
  31 |     expect(false).type.toBeCallableWith();
  32 |     expect(undefined).type.toBeCallableWith();

       at ./__typetests__/toBeCallableWith.tst.ts:29:12

Error: An argument for 'source' must be a callable expression.

  28 |   test("must be a callable expression", () => {
  29 |     expect("abc").type.toBeCallableWith();
  30 |     expect(123).type.toBeCallableWith();
     |            ~~~
  31 |     expect(false).type.toBeCallableWith();
  32 |     expect(undefined).type.toBeCallableWith();
  33 |     expect(null).type.toBeCallableWith();

       at ./__typetests__/toBeCallableWith.tst.ts:30:12

Error: An argument for 'source' must be a callable expression.

  29 |     expect("abc").type.toBeCallableWith();
  30 |     expect(123).type.toBeCallableWith();
  31 |     expect(false).type.toBeCallableWith();
     |            ~~~~~
  32 |     expect(undefined).type.toBeCallableWith();
  33 |     expect(null).type.toBeCallableWith();
  34 | 

       at ./__typetests__/toBeCallableWith.tst.ts:31:12

Error: An argument for 'source' must be a callable expression.

  30 |     expect(123).type.toBeCallableWith();
  31 |     expect(false).type.toBeCallableWith();
  32 |     expect(undefined).type.toBeCallableWith();
     |            ~~~~~~~~~
  33 |     expect(null).type.toBeCallableWith();
  34 | 
  35 |     expect(() => undefined).type.toBeCallableWith();

       at ./__typetests__/toBeCallableWith.tst.ts:32:12

Error: An argument for 'source' must be a callable expression.

  31 |     expect(false).type.toBeCallableWith();
  32 |     expect(undefined).type.toBeCallableWith();
  33 |     expect(null).type.toBeCallableWith();
     |            ~~~~
  34 | 
  35 |     expect(() => undefined).type.toBeCallableWith();
  36 |     expect(() => {}).type.toBeCallableWith();

       at ./__typetests__/toBeCallableWith.tst.ts:33:12

Error: An argument for 'source' must be a callable expression.

  38 |     expect({} as () => void).type.toBeCallableWith();
  39 | 
  40 |     expect(getPerson("abc")).type.toBeCallableWith("abc");
     |            ~~~~~~~~~~~~~~~~
  41 | 
  42 |     expect(Person).type.toBeCallableWith("abc");
  43 |   });

       at ./__typetests__/toBeCallableWith.tst.ts:40:12

Error: An argument for 'source' must be a callable expression.

Did you mean to use the '.toBeConstructableWith()' matcher?

  40 |     expect(getPerson("abc")).type.toBeCallableWith("abc");
  41 | 
  42 |     expect(Person).type.toBeCallableWith("abc");
     |            ~~~~~~
  43 |   });
  44 | 
  45 |   test("allowed expressions", () => {

       at ./__typetests__/toBeCallableWith.tst.ts:42:12

Error: An argument for 'source' cannot be of the 'any' type.

The 'any' type was rejected because the 'rejectAnyType' option is enabled.
If this check is necessary, pass 'any' as the type argument explicitly.

  70 | 
  71 |   test("is rejected type?", () => {
  72 |     expect("abc" as any).type.toBeCallableWith();
     |            ~~~~~~~~~~~~
  73 |     expect("abc" as never).type.toBeCallableWith();
  74 |   });
  75 | });

       at ./__typetests__/toBeCallableWith.tst.ts:72:12

Error: An argument for 'source' cannot be of the 'never' type.

The 'never' type was rejected because the 'rejectNeverType' option is enabled.
If this check is necessary, pass 'never' as the type argument explicitly.

  71 |   test("is rejected type?", () => {
  72 |     expect("abc" as any).type.toBeCallableWith();
  73 |     expect("abc" as never).type.toBeCallableWith();
     |            ~~~~~~~~~~~~~~
  74 |   });
  75 | });
  76 | 

       at ./__typetests__/toBeCallableWith.tst.ts:73:12

Error: A type argument for 'Source' must be a callable type.

  77 | describe("type argument for 'Source'", () => {
  78 |   test("must be a callable type", () => {
  79 |     expect<string>().type.toBeCallableWith();
     |            ~~~~~~
  80 |     expect<number>().type.toBeCallableWith();
  81 |     expect<boolean>().type.toBeCallableWith();
  82 |     expect<undefined>().type.toBeCallableWith();

       at ./__typetests__/toBeCallableWith.tst.ts:79:12

Error: A type argument for 'Source' must be a callable type.

  78 |   test("must be a callable type", () => {
  79 |     expect<string>().type.toBeCallableWith();
  80 |     expect<number>().type.toBeCallableWith();
     |            ~~~~~~
  81 |     expect<boolean>().type.toBeCallableWith();
  82 |     expect<undefined>().type.toBeCallableWith();
  83 |     expect<null>().type.toBeCallableWith();

       at ./__typetests__/toBeCallableWith.tst.ts:80:12

Error: A type argument for 'Source' must be a callable type.

  79 |     expect<string>().type.toBeCallableWith();
  80 |     expect<number>().type.toBeCallableWith();
  81 |     expect<boolean>().type.toBeCallableWith();
     |            ~~~~~~~
  82 |     expect<undefined>().type.toBeCallableWith();
  83 |     expect<null>().type.toBeCallableWith();
  84 | 

       at ./__typetests__/toBeCallableWith.tst.ts:81:12

Error: A type argument for 'Source' must be a callable type.

  80 |     expect<number>().type.toBeCallableWith();
  81 |     expect<boolean>().type.toBeCallableWith();
  82 |     expect<undefined>().type.toBeCallableWith();
     |            ~~~~~~~~~
  83 |     expect<null>().type.toBeCallableWith();
  84 | 
  85 |     expect<() => undefined>().type.toBeCallableWith();

       at ./__typetests__/toBeCallableWith.tst.ts:82:12

Error: A type argument for 'Source' must be a callable type.

  81 |     expect<boolean>().type.toBeCallableWith();
  82 |     expect<undefined>().type.toBeCallableWith();
  83 |     expect<null>().type.toBeCallableWith();
     |            ~~~~
  84 | 
  85 |     expect<() => undefined>().type.toBeCallableWith();
  86 |     expect<() => void>().type.toBeCallableWith();

       at ./__typetests__/toBeCallableWith.tst.ts:83:12

Error: A type argument for 'Source' must be a callable type.

  90 |     expect<Func>().type.toBeCallableWith("abc");
  91 | 
  92 |     expect<Person>().type.toBeCallableWith("abc");
     |            ~~~~~~
  93 |     expect<typeof Person>().type.toBeCallableWith("abc");
  94 |     expect<new (name: string) => Person>().type.toBeCallableWith("abc");
  95 |   });

       at ./__typetests__/toBeCallableWith.tst.ts:92:12

Error: A type argument for 'Source' must be a callable type.

Did you mean to use the '.toBeConstructableWith()' matcher?

  91 | 
  92 |     expect<Person>().type.toBeCallableWith("abc");
  93 |     expect<typeof Person>().type.toBeCallableWith("abc");
     |            ~~~~~~~~~~~~~
  94 |     expect<new (name: string) => Person>().type.toBeCallableWith("abc");
  95 |   });
  96 | 

       at ./__typetests__/toBeCallableWith.tst.ts:93:12

Error: A type argument for 'Source' must be a callable type.

Did you mean to use the '.toBeConstructableWith()' matcher?

  92 |     expect<Person>().type.toBeCallableWith("abc");
  93 |     expect<typeof Person>().type.toBeCallableWith("abc");
  94 |     expect<new (name: string) => Person>().type.toBeCallableWith("abc");
     |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  95 |   });
  96 | 
  97 |   test("is rejected type?", () => {

       at ./__typetests__/toBeCallableWith.tst.ts:94:12

Error: A type argument for 'Source' cannot be of the 'any' type.

The 'any' type was rejected because the 'rejectAnyType' option is enabled.
If this check is necessary, pass 'any' as the type argument explicitly.

   99 |     type Never = never;
  100 | 
  101 |     expect<Any>().type.toBeCallableWith();
      |            ~~~
  102 |     expect<Never>().type.toBeCallableWith();
  103 |   });
  104 | });

        at ./__typetests__/toBeCallableWith.tst.ts:101:12

Error: A type argument for 'Source' cannot be of the 'never' type.

The 'never' type was rejected because the 'rejectNeverType' option is enabled.
If this check is necessary, pass 'never' as the type argument explicitly.

  100 | 
  101 |     expect<Any>().type.toBeCallableWith();
  102 |     expect<Never>().type.toBeCallableWith();
      |            ~~~~~
  103 |   });
  104 | });
  105 | 

        at ./__typetests__/toBeCallableWith.tst.ts:102:12

