Error: An argument for 'source' or type argument for 'Source' must be provided.

  19 | describe("argument for 'source'", () => {
  20 |   test("must be provided", () => {
  21 |     expect().type.toBeCallableWith(false);
     |     ~~~~~~
  22 |   });
  23 | 
  24 |   test("must be an identifier of a callable expression", () => {

       at ./__typetests__/toBeCallableWith.tst.ts:21:5

Error: An argument for 'source' must be an identifier of a callable expression.

  23 | 
  24 |   test("must be an identifier of a callable expression", () => {
  25 |     expect("abc").type.toBeCallableWith();
     |            ~~~~~
  26 |     expect(123).type.toBeCallableWith();
  27 |     expect(false).type.toBeCallableWith();
  28 |     expect(undefined).type.toBeCallableWith();

       at ./__typetests__/toBeCallableWith.tst.ts:25:12

Error: An argument for 'source' must be an identifier of a callable expression.

  24 |   test("must be an identifier of a callable expression", () => {
  25 |     expect("abc").type.toBeCallableWith();
  26 |     expect(123).type.toBeCallableWith();
     |            ~~~
  27 |     expect(false).type.toBeCallableWith();
  28 |     expect(undefined).type.toBeCallableWith();
  29 |     expect(null).type.toBeCallableWith();

       at ./__typetests__/toBeCallableWith.tst.ts:26:12

Error: An argument for 'source' must be an identifier of a callable expression.

  25 |     expect("abc").type.toBeCallableWith();
  26 |     expect(123).type.toBeCallableWith();
  27 |     expect(false).type.toBeCallableWith();
     |            ~~~~~
  28 |     expect(undefined).type.toBeCallableWith();
  29 |     expect(null).type.toBeCallableWith();
  30 | 

       at ./__typetests__/toBeCallableWith.tst.ts:27:12

Error: An argument for 'source' must be an identifier of a callable expression.

  26 |     expect(123).type.toBeCallableWith();
  27 |     expect(false).type.toBeCallableWith();
  28 |     expect(undefined).type.toBeCallableWith();
     |            ~~~~~~~~~
  29 |     expect(null).type.toBeCallableWith();
  30 | 
  31 |     expect(() => undefined).type.toBeCallableWith();

       at ./__typetests__/toBeCallableWith.tst.ts:28:12

Error: An argument for 'source' must be an identifier of a callable expression.

  27 |     expect(false).type.toBeCallableWith();
  28 |     expect(undefined).type.toBeCallableWith();
  29 |     expect(null).type.toBeCallableWith();
     |            ~~~~
  30 | 
  31 |     expect(() => undefined).type.toBeCallableWith();
  32 |     expect(() => {}).type.toBeCallableWith();

       at ./__typetests__/toBeCallableWith.tst.ts:29:12

Error: An argument for 'source' must be an identifier of a callable expression.

  29 |     expect(null).type.toBeCallableWith();
  30 | 
  31 |     expect(() => undefined).type.toBeCallableWith();
     |            ~~~~~~~~~~~~~~~
  32 |     expect(() => {}).type.toBeCallableWith();
  33 |     expect(() => () => false).type.toBeCallableWith();
  34 | 

       at ./__typetests__/toBeCallableWith.tst.ts:31:12

Error: An argument for 'source' must be an identifier of a callable expression.

  30 | 
  31 |     expect(() => undefined).type.toBeCallableWith();
  32 |     expect(() => {}).type.toBeCallableWith();
     |            ~~~~~~~~
  33 |     expect(() => () => false).type.toBeCallableWith();
  34 | 
  35 |     expect(getPerson).type.toBeCallableWith("abc"); // allowed

       at ./__typetests__/toBeCallableWith.tst.ts:32:12

Error: An argument for 'source' must be an identifier of a callable expression.

  31 |     expect(() => undefined).type.toBeCallableWith();
  32 |     expect(() => {}).type.toBeCallableWith();
  33 |     expect(() => () => false).type.toBeCallableWith();
     |            ~~~~~~~~~~~~~~~~~
  34 | 
  35 |     expect(getPerson).type.toBeCallableWith("abc"); // allowed
  36 |     expect(getPerson("abc")).type.toBeCallableWith("abc");

       at ./__typetests__/toBeCallableWith.tst.ts:33:12

Error: An argument for 'source' must be an identifier of a callable expression.

  34 | 
  35 |     expect(getPerson).type.toBeCallableWith("abc"); // allowed
  36 |     expect(getPerson("abc")).type.toBeCallableWith("abc");
     |            ~~~~~~~~~~~~~~~~
  37 | 
  38 |     expect(getPersonGetter).type.toBeCallableWith(); // allowed
  39 |     expect(getPersonGetter()).type.toBeCallableWith("abc"); // allowed

       at ./__typetests__/toBeCallableWith.tst.ts:36:12

Error: An argument for 'source' must be an identifier of a callable expression.

  39 |     expect(getPersonGetter()).type.toBeCallableWith("abc"); // allowed
  40 | 
  41 |     expect(Person).type.toBeCallableWith("abc");
     |            ~~~~~~
  42 |   });
  43 | 
  44 |   test("is rejected type?", () => {

       at ./__typetests__/toBeCallableWith.tst.ts:41:12

Error: An argument for 'source' cannot be of the 'any' type.

The 'any' type was rejected because the 'rejectAnyType' option is enabled.
If this check is necessary, pass 'any' as the type argument explicitly.

  43 | 
  44 |   test("is rejected type?", () => {
  45 |     expect("abc" as any).type.toBeCallableWith();
     |            ~~~~~~~~~~~~
  46 |     expect("abc" as never).type.toBeCallableWith();
  47 |   });
  48 | });

       at ./__typetests__/toBeCallableWith.tst.ts:45:12

Error: An argument for 'source' cannot be of the 'never' type.

The 'never' type was rejected because the 'rejectNeverType' option is enabled.
If this check is necessary, pass 'never' as the type argument explicitly.

  44 |   test("is rejected type?", () => {
  45 |     expect("abc" as any).type.toBeCallableWith();
  46 |     expect("abc" as never).type.toBeCallableWith();
     |            ~~~~~~~~~~~~~~
  47 |   });
  48 | });
  49 | 

       at ./__typetests__/toBeCallableWith.tst.ts:46:12

