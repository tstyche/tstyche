Error: Type '{ one: number; two?: string | undefined; }' is not identical to type '{ two?: string | undefined; }'.

   7 | test("is omitted?", () => {
   8 |   expect(omit(returnsObject(), "one")).type.toBe<{ two?: string }>();
   9 |   expect(returnsObject()).type.toBe<{ two?: string }>(); // fail
     |                                     ~~~~~~~~~~~~~~~~
  10 | 
  11 |   expect(omit(returnsIntersection(), "two")).type.toBe<{ one: number }>();
  12 |   expect(returnsIntersection()).type.toBe<{ one: number }>(); // fail

       at ./__typetests__/omit.tst.ts:9:37 ❭ is omitted?

Error: Type '{ one: number; two?: string | undefined; } | { one: number; }' is not identical to type '{ one: number; }'.

  10 | 
  11 |   expect(omit(returnsIntersection(), "two")).type.toBe<{ one: number }>();
  12 |   expect(returnsIntersection()).type.toBe<{ one: number }>(); // fail
     |                                           ~~~~~~~~~~~~~~~
  13 | 
  14 |   expect(omit(returnsUnion(), "one")).type.toBe<{ two?: string }>();
  15 |   expect(returnsUnion()).type.toBe<{ two?: string }>(); // fail

       at ./__typetests__/omit.tst.ts:12:43 ❭ is omitted?

Error: Type '{ one: number; } & { two?: string | undefined; }' is not identical to type '{ two?: string | undefined; }'.

  13 | 
  14 |   expect(omit(returnsUnion(), "one")).type.toBe<{ two?: string }>();
  15 |   expect(returnsUnion()).type.toBe<{ two?: string }>(); // fail
     |                                    ~~~~~~~~~~~~~~~~
  16 | });
  17 | 

       at ./__typetests__/omit.tst.ts:15:36 ❭ is omitted?

