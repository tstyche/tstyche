// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`toHaveProperty: stderr 1`] = `
"Error: Property 'abc' exist on type 'any'.

  25 |   expect<any>().type.toHaveProperty("abc");
  26 |   // eslint-disable-next-line @typescript-eslint/no-explicit-any
> 27 |   expect<any>().type.not.toHaveProperty("abc");
     |                          ^
  28 | 
  29 |   expect<never>().type.not.toHaveProperty("abc");
  30 |   expect<never>().type.toHaveProperty("abc");

       at ./__typetests__/toHaveProperty.test.ts:27:26 ❭ edge cases

Error: Property 'abc' does not exist on type 'never'.

  28 | 
  29 |   expect<never>().type.not.toHaveProperty("abc");
> 30 |   expect<never>().type.toHaveProperty("abc");
     |                        ^
  31 | 
  32 |   expect<null>().type.not.toHaveProperty("abc");
  33 |   expect<null>().type.toHaveProperty("abc");

       at ./__typetests__/toHaveProperty.test.ts:30:24 ❭ edge cases

Error: Property 'abc' does not exist on type 'null'.

  31 | 
  32 |   expect<null>().type.not.toHaveProperty("abc");
> 33 |   expect<null>().type.toHaveProperty("abc");
     |                       ^
  34 | 
  35 |   expect<undefined>().type.not.toHaveProperty("abc");
  36 |   expect<undefined>().type.toHaveProperty("abc");

       at ./__typetests__/toHaveProperty.test.ts:33:23 ❭ edge cases

Error: Property 'abc' does not exist on type 'undefined'.

  34 | 
  35 |   expect<undefined>().type.not.toHaveProperty("abc");
> 36 |   expect<undefined>().type.toHaveProperty("abc");
     |                            ^
  37 | 
  38 |   expect<unknown>().type.not.toHaveProperty("abc");
  39 |   expect<unknown>().type.toHaveProperty("abc");

       at ./__typetests__/toHaveProperty.test.ts:36:28 ❭ edge cases

Error: Property 'abc' does not exist on type 'unknown'.

  37 | 
  38 |   expect<unknown>().type.not.toHaveProperty("abc");
> 39 |   expect<unknown>().type.toHaveProperty("abc");
     |                          ^
  40 | 
  41 |   expect<void>().type.not.toHaveProperty("abc");
  42 |   expect<void>().type.toHaveProperty("abc");

       at ./__typetests__/toHaveProperty.test.ts:39:26 ❭ edge cases

Error: Property 'abc' does not exist on type 'void'.

  40 | 
  41 |   expect<void>().type.not.toHaveProperty("abc");
> 42 |   expect<void>().type.toHaveProperty("abc");
     |                       ^
  43 | 
  44 |   expect("abc").type.toHaveProperty("startsWith");
  45 |   expect("abc").type.not.toHaveProperty("startsWith");

       at ./__typetests__/toHaveProperty.test.ts:42:23 ❭ edge cases

Error: Property 'startsWith' exist on type '"abc"'.

  43 | 
  44 |   expect("abc").type.toHaveProperty("startsWith");
> 45 |   expect("abc").type.not.toHaveProperty("startsWith");
     |                          ^
  46 | });
  47 | 
  48 | describe("when source is a type", () => {

       at ./__typetests__/toHaveProperty.test.ts:45:26 ❭ edge cases

Error: Property 'runTest' exist on type 'Worker<Sample>'.

  50 |     expect<Worker<Sample>>().type.toHaveProperty("runTest");
  51 | 
> 52 |     expect<Worker<Sample>>().type.not.toHaveProperty("runTest");
     |                                       ^
  53 |   });
  54 | 
  55 |   test("has expected number property key", () => {

       at ./__typetests__/toHaveProperty.test.ts:52:39 ❭ when source is a type ❭ has target property key

Error: Property '123' exist on type 'Worker<Sample>'.

  56 |     expect<Worker<Sample>>().type.toHaveProperty(123);
  57 | 
> 58 |     expect<Worker<Sample>>().type.not.toHaveProperty(123);
     |                                       ^
  59 |   });
  60 | 
  61 |   test("does NOT have expected property key", () => {

       at ./__typetests__/toHaveProperty.test.ts:58:39 ❭ when source is a type ❭ has expected number property key

Error: Property 'endTest' does not exist on type 'Worker<Sample>'.

  62 |     expect<Worker<Sample>>().type.not.toHaveProperty("endTest");
  63 | 
> 64 |     expect<Worker<Sample>>().type.toHaveProperty("endTest");
     |                                   ^
  65 |   });
  66 | 
  67 |   test("does NOT have expected number property key", () => {

       at ./__typetests__/toHaveProperty.test.ts:64:35 ❭ when source is a type ❭ does NOT have expected property key

Error: Property '456' does not exist on type 'Worker<Sample>'.

  68 |     expect<Worker<Sample>>().type.not.toHaveProperty(456);
  69 | 
> 70 |     expect<Worker<Sample>>().type.toHaveProperty(456);
     |                                   ^
  71 |   });
  72 | 
  73 |   test("has expected property key, but it is optional", () => {

       at ./__typetests__/toHaveProperty.test.ts:70:35 ❭ when source is a type ❭ does NOT have expected number property key

Error: Property 'isBusy?' is optional in type 'Worker<Sample>'.

  74 |     expect<Worker<Sample>>().type.not.toHaveProperty("isBusy");
  75 | 
> 76 |     expect<Worker<Sample>>().type.toHaveProperty("isBusy");
     |                                   ^
  77 |   });
  78 | 
  79 |   test("has expected number property key, but it is optional", () => {

       at ./__typetests__/toHaveProperty.test.ts:76:35 ❭ when source is a type ❭ has expected property key, but it is optional

Error: Property '789?' is optional in type 'Worker<Sample>'.

  80 |     expect<Worker<Sample>>().type.not.toHaveProperty(789);
  81 | 
> 82 |     expect<Worker<Sample>>().type.toHaveProperty(789);
     |                                   ^
  83 |   });
  84 | 
  85 |   test("has expected optional property key", () => {

       at ./__typetests__/toHaveProperty.test.ts:82:35 ❭ when source is a type ❭ has expected number property key, but it is optional

Error: Optional property 'isBusy?' exist on type 'Worker<Sample>'.

  86 |     expect<Worker<Sample>>().type.toHaveProperty("isBusy?");
  87 | 
> 88 |     expect<Worker<Sample>>().type.not.toHaveProperty("isBusy?");
     |                                       ^
  89 |   });
  90 | 
  91 |   test("has expected optional number property key", () => {

       at ./__typetests__/toHaveProperty.test.ts:88:39 ❭ when source is a type ❭ has expected optional property key

Error: Optional property '789?' exist on type 'Worker<Sample>'.

  92 |     expect<Worker<Sample>>().type.toHaveProperty("789?");
  93 | 
> 94 |     expect<Worker<Sample>>().type.not.toHaveProperty("789?");
     |                                       ^
  95 |   });
  96 | 
  97 |   test("does NOT have expected optional property key", () => {

       at ./__typetests__/toHaveProperty.test.ts:94:39 ❭ when source is a type ❭ has expected optional number property key

Error: Optional property 'isRunning?' does not exist on type 'Worker<Sample>'.

   98 |     expect<Worker<Sample>>().type.not.toHaveProperty("isRunning?");
   99 | 
> 100 |     expect<Worker<Sample>>().type.toHaveProperty("isRunning?");
      |                                   ^
  101 |   });
  102 | 
  103 |   test("does NOT have expected optional number property key", () => {

        at ./__typetests__/toHaveProperty.test.ts:100:35 ❭ when source is a type ❭ does NOT have expected optional property key

Error: Optional property '234?' does not exist on type 'Worker<Sample>'.

  104 |     expect<Worker<Sample>>().type.not.toHaveProperty("234?");
  105 | 
> 106 |     expect<Worker<Sample>>().type.toHaveProperty("234?");
      |                                   ^
  107 |   });
  108 | 
  109 |   test("has expected property key, but it is NOT optional", () => {

        at ./__typetests__/toHaveProperty.test.ts:106:35 ❭ when source is a type ❭ does NOT have expected optional number property key

Error: Property 'runTest' is not optional in type 'Worker<Sample>'.

  110 |     expect<Worker<Sample>>().type.not.toHaveProperty("runTest?");
  111 | 
> 112 |     expect<Worker<Sample>>().type.toHaveProperty("runTest?");
      |                                   ^
  113 |   });
  114 | 
  115 |   test("has expected optional number property key, but it is NOT optional", () => {

        at ./__typetests__/toHaveProperty.test.ts:112:35 ❭ when source is a type ❭ has expected property key, but it is NOT optional

Error: Property '123' is not optional in type 'Worker<Sample>'.

  114 | 
  115 |   test("has expected optional number property key, but it is NOT optional", () => {
> 116 |     expect<Worker<Sample>>().type.toHaveProperty("123?");
      |                                   ^
  117 | 
  118 |     expect<Worker<Sample>>().type.not.toHaveProperty("123?");
  119 |   });

        at ./__typetests__/toHaveProperty.test.ts:116:35 ❭ when source is a type ❭ has expected optional number property key, but it is NOT optional

"
`;

exports[`toHaveProperty: stdout 1`] = `
"uses TypeScript <<version>> with ./tsconfig.json

fail ./__typetests__/toHaveProperty.test.ts
  × edge cases
  when source is a type
    × has target property key
    × has expected number property key
    × does NOT have expected property key
    × does NOT have expected number property key
    × has expected property key, but it is optional
    × has expected number property key, but it is optional
    × has expected optional property key
    × has expected optional number property key
    × does NOT have expected optional property key
    × does NOT have expected optional number property key
    × has expected property key, but it is NOT optional
    × has expected optional number property key, but it is NOT optional

Targets:    1 failed, 1 total
Test files: 1 failed, 1 total
Tests:      13 failed, 13 total
Assertions: 19 failed, 19 passed, 38 total
Duration:   <<timestamp>>

Ran all test files.
"
`;
