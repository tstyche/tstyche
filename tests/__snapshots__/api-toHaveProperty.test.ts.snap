// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`toHaveProperty: stderr 1`] = `
"Error: Property 'abc' exist on type 'any'.

  21 |   expect<any>().type.toHaveProperty("abc");
  22 |   // eslint-disable-next-line @typescript-eslint/no-explicit-any
> 23 |   expect<any>().type.not.toHaveProperty("abc");
     |                          ^
  24 | 
  25 |   expect<never>().type.not.toHaveProperty("abc");
  26 |   expect<never>().type.toHaveProperty("abc");

       at ./__typetests__/toHaveProperty.test.ts:23:26 ❭ edge cases

Error: Property 'abc' does not exist on type 'never'.

  24 | 
  25 |   expect<never>().type.not.toHaveProperty("abc");
> 26 |   expect<never>().type.toHaveProperty("abc");
     |                        ^
  27 | 
  28 |   expect<null>().type.not.toHaveProperty("abc");
  29 |   expect<null>().type.toHaveProperty("abc");

       at ./__typetests__/toHaveProperty.test.ts:26:24 ❭ edge cases

Error: Property 'abc' does not exist on type 'null'.

  27 | 
  28 |   expect<null>().type.not.toHaveProperty("abc");
> 29 |   expect<null>().type.toHaveProperty("abc");
     |                       ^
  30 | 
  31 |   expect<undefined>().type.not.toHaveProperty("abc");
  32 |   expect<undefined>().type.toHaveProperty("abc");

       at ./__typetests__/toHaveProperty.test.ts:29:23 ❭ edge cases

Error: Property 'abc' does not exist on type 'undefined'.

  30 | 
  31 |   expect<undefined>().type.not.toHaveProperty("abc");
> 32 |   expect<undefined>().type.toHaveProperty("abc");
     |                            ^
  33 | 
  34 |   expect<unknown>().type.not.toHaveProperty("abc");
  35 |   expect<unknown>().type.toHaveProperty("abc");

       at ./__typetests__/toHaveProperty.test.ts:32:28 ❭ edge cases

Error: Property 'abc' does not exist on type 'unknown'.

  33 | 
  34 |   expect<unknown>().type.not.toHaveProperty("abc");
> 35 |   expect<unknown>().type.toHaveProperty("abc");
     |                          ^
  36 | 
  37 |   expect<void>().type.not.toHaveProperty("abc");
  38 |   expect<void>().type.toHaveProperty("abc");

       at ./__typetests__/toHaveProperty.test.ts:35:26 ❭ edge cases

Error: Property 'abc' does not exist on type 'void'.

  36 | 
  37 |   expect<void>().type.not.toHaveProperty("abc");
> 38 |   expect<void>().type.toHaveProperty("abc");
     |                       ^
  39 | 
  40 |   expect("abc").type.toHaveProperty("startsWith");
  41 |   expect("abc").type.not.toHaveProperty("startsWith");

       at ./__typetests__/toHaveProperty.test.ts:38:23 ❭ edge cases

Error: Property 'startsWith' exist on type '"abc"'.

  39 | 
  40 |   expect("abc").type.toHaveProperty("startsWith");
> 41 |   expect("abc").type.not.toHaveProperty("startsWith");
     |                          ^
  42 | });
  43 | 
  44 | describe("received type", () => {

       at ./__typetests__/toHaveProperty.test.ts:41:26 ❭ edge cases

Error: Property 'runTest' exist on type 'Worker<Sample>'.

  46 |     expect<Worker<Sample>>().type.toHaveProperty("runTest");
  47 | 
> 48 |     expect<Worker<Sample>>().type.not.toHaveProperty("runTest");
     |                                       ^
  49 |   });
  50 | 
  51 |   test("does NOT have expected property key", () => {

       at ./__typetests__/toHaveProperty.test.ts:48:39 ❭ received type ❭ has expected property key

Error: Property 'endTest' does not exist on type 'Worker<Sample>'.

  52 |     expect<Worker<Sample>>().type.not.toHaveProperty("endTest");
  53 | 
> 54 |     expect<Worker<Sample>>().type.toHaveProperty("endTest");
     |                                   ^
  55 |   });
  56 | 
  57 |   test("has expected property key, but it is optional", () => {

       at ./__typetests__/toHaveProperty.test.ts:54:35 ❭ received type ❭ does NOT have expected property key

Error: Property 'isBusy?' is optional in type 'Worker<Sample>'.

  58 |     expect<Worker<Sample>>().type.not.toHaveProperty("isBusy");
  59 | 
> 60 |     expect<Worker<Sample>>().type.toHaveProperty("isBusy");
     |                                   ^
  61 |   });
  62 | 
  63 |   test("has expected optional property key", () => {

       at ./__typetests__/toHaveProperty.test.ts:60:35 ❭ received type ❭ has expected property key, but it is optional

Error: Optional property 'isBusy?' exist on type 'Worker<Sample>'.

  64 |     expect<Worker<Sample>>().type.toHaveProperty("isBusy?");
  65 | 
> 66 |     expect<Worker<Sample>>().type.not.toHaveProperty("isBusy?");
     |                                       ^
  67 |   });
  68 | 
  69 |   test("does NOT have expected optional property key", () => {

       at ./__typetests__/toHaveProperty.test.ts:66:39 ❭ received type ❭ has expected optional property key

Error: Optional property 'isRunning?' does not exist on type 'Worker<Sample>'.

  70 |     expect<Worker<Sample>>().type.not.toHaveProperty("isRunning?");
  71 | 
> 72 |     expect<Worker<Sample>>().type.toHaveProperty("isRunning?");
     |                                   ^
  73 |   });
  74 | 
  75 |   test("has expected property key, but it is NOT optional", () => {

       at ./__typetests__/toHaveProperty.test.ts:72:35 ❭ received type ❭ does NOT have expected optional property key

Error: Property 'runTest' is not optional in type 'Worker<Sample>'.

  76 |     expect<Worker<Sample>>().type.not.toHaveProperty("runTest?");
  77 | 
> 78 |     expect<Worker<Sample>>().type.toHaveProperty("runTest?");
     |                                   ^
  79 |   });
  80 | });
  81 | 

       at ./__typetests__/toHaveProperty.test.ts:78:35 ❭ received type ❭ has expected property key, but it is NOT optional

"
`;

exports[`toHaveProperty: stdout 1`] = `
"uses TypeScript <<version>> with ./tsconfig.json

fail ./__typetests__/toHaveProperty.test.ts
  × edge cases
  received type
    × has expected property key
    × does NOT have expected property key
    × has expected property key, but it is optional
    × has expected optional property key
    × does NOT have expected optional property key
    × has expected property key, but it is NOT optional

Targets:    1 failed, 1 total
Test files: 1 failed, 1 total
Tests:      7 failed, 7 total
Assertions: 13 failed, 13 passed, 26 total
Duration:   <<timestamp>>

Ran all test files.
"
`;
