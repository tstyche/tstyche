// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`toHaveProperty: stderr 1`] = `
"Error: Property 'runTest' exists on type 'Worker<Sample>'.

  58 |     expect<Worker<Sample>>().type.toHaveProperty("runTest");
  59 | 
> 60 |     expect<Worker<Sample>>().type.not.toHaveProperty("runTest");
     |                                       ^
  61 |   });
  62 | 
  63 |   test("has expected optional string property key", () => {

       at ./__typetests__/toHaveProperty.test.ts:60:39 ❭ when source is a type ❭ has expected string property key

Error: Property 'isBusy' exists on type 'Worker<Sample>'.

  64 |     expect<Worker<Sample>>().type.toHaveProperty("isBusy");
  65 | 
> 66 |     expect<Worker<Sample>>().type.not.toHaveProperty("isBusy");
     |                                       ^
  67 |   });
  68 | 
  69 |   test("has expected escaped string property key", () => {

       at ./__typetests__/toHaveProperty.test.ts:66:39 ❭ when source is a type ❭ has expected optional string property key

Error: Property '__check' exists on type 'Worker<Sample>'.

  70 |     expect<Worker<Sample>>().type.toHaveProperty("__check");
  71 | 
> 72 |     expect<Worker<Sample>>().type.not.toHaveProperty("__check");
     |                                       ^
  73 |   });
  74 | 
  75 |   test("does NOT have expected string property key", () => {

       at ./__typetests__/toHaveProperty.test.ts:72:39 ❭ when source is a type ❭ has expected escaped string property key

Error: Property 'endTest' does not exist on type 'Worker<Sample>'.

  76 |     expect<Worker<Sample>>().type.not.toHaveProperty("endTest");
  77 | 
> 78 |     expect<Worker<Sample>>().type.toHaveProperty("endTest");
     |                                   ^
  79 |   });
  80 | 
  81 |   test("has expected number property key", () => {

       at ./__typetests__/toHaveProperty.test.ts:78:35 ❭ when source is a type ❭ does NOT have expected string property key

Error: Property '123' exists on type 'Worker<Sample>'.

  82 |     expect<Worker<Sample>>().type.toHaveProperty(123);
  83 | 
> 84 |     expect<Worker<Sample>>().type.not.toHaveProperty(123);
     |                                       ^
  85 |   });
  86 | 
  87 |   test("has expected optional number property key", () => {

       at ./__typetests__/toHaveProperty.test.ts:84:39 ❭ when source is a type ❭ has expected number property key

Error: Property '789' exists on type 'Worker<Sample>'.

  88 |     expect<Worker<Sample>>().type.toHaveProperty(789);
  89 | 
> 90 |     expect<Worker<Sample>>().type.not.toHaveProperty(789);
     |                                       ^
  91 |   });
  92 | 
  93 |   test("does NOT have expected number property key", () => {

       at ./__typetests__/toHaveProperty.test.ts:90:39 ❭ when source is a type ❭ has expected optional number property key

Error: Property '456' does not exist on type 'Worker<Sample>'.

  94 |     expect<Worker<Sample>>().type.not.toHaveProperty(456);
  95 | 
> 96 |     expect<Worker<Sample>>().type.toHaveProperty(456);
     |                                   ^
  97 |   });
  98 | 
  99 |   test("has expected symbol property key", () => {

       at ./__typetests__/toHaveProperty.test.ts:96:35 ❭ when source is a type ❭ does NOT have expected number property key

Error: Property '[kOne]' exists on type 'Worker<Sample>'.

  100 |     expect<Worker<Sample>>().type.toHaveProperty(kOne);
  101 | 
> 102 |     expect<Worker<Sample>>().type.not.toHaveProperty(kOne);
      |                                       ^
  103 |   });
  104 | 
  105 |   test("has expected global symbol property key", () => {

        at ./__typetests__/toHaveProperty.test.ts:102:39 ❭ when source is a type ❭ has expected symbol property key

Error: Property '[kTwo]' exists on type 'Worker<Sample>'.

  106 |     expect<Worker<Sample>>().type.toHaveProperty(kTwo);
  107 | 
> 108 |     expect<Worker<Sample>>().type.not.toHaveProperty(kTwo);
      |                                       ^
  109 |   });
  110 | 
  111 |   test("does NOT have expected symbol property key", () => {

        at ./__typetests__/toHaveProperty.test.ts:108:39 ❭ when source is a type ❭ has expected global symbol property key

Error: Property '[kFour]' does not exist on type 'Worker<Sample>'.

  112 |     expect<Worker<Sample>>().type.not.toHaveProperty(kFour);
  113 | 
> 114 |     expect<Worker<Sample>>().type.toHaveProperty(kFour);
      |                                   ^
  115 |   });
  116 | 
  117 |   test("has expected numeric enum property key", () => {

        at ./__typetests__/toHaveProperty.test.ts:114:35 ❭ when source is a type ❭ does NOT have expected symbol property key

Error: Property '0' exists on type 'Worker<Sample>'.

  118 |     expect<Worker<Sample>>().type.toHaveProperty(E1.A);
  119 | 
> 120 |     expect<Worker<Sample>>().type.not.toHaveProperty(E1.A);
      |                                       ^
  121 |   });
  122 | 
  123 |   test("does NOT have expected numeric enum property key", () => {

        at ./__typetests__/toHaveProperty.test.ts:120:39 ❭ when source is a type ❭ has expected numeric enum property key

Error: Property '1' does not exist on type 'Worker<Sample>'.

  124 |     expect<Worker<Sample>>().type.not.toHaveProperty(E1.B);
  125 | 
> 126 |     expect<Worker<Sample>>().type.toHaveProperty(E1.B);
      |                                   ^
  127 |   });
  128 | 
  129 |   test("has expected string enum property key", () => {

        at ./__typetests__/toHaveProperty.test.ts:126:35 ❭ when source is a type ❭ does NOT have expected numeric enum property key

Error: Property 'B' exists on type 'Worker<Sample>'.

  130 |     expect<Worker<Sample>>().type.toHaveProperty(E2.B);
  131 | 
> 132 |     expect<Worker<Sample>>().type.not.toHaveProperty(E2.B);
      |                                       ^
  133 |   });
  134 | 
  135 |   test("does NOT have expected string enum property key", () => {

        at ./__typetests__/toHaveProperty.test.ts:132:39 ❭ when source is a type ❭ has expected string enum property key

Error: Property 'A' does not exist on type 'Worker<Sample>'.

  136 |     expect<Worker<Sample>>().type.not.toHaveProperty(E2.A);
  137 | 
> 138 |     expect<Worker<Sample>>().type.toHaveProperty(E2.A);
      |                                   ^
  139 |   });
  140 | });
  141 | 

        at ./__typetests__/toHaveProperty.test.ts:138:35 ❭ when source is a type ❭ does NOT have expected string enum property key

Error: Property 'A' exists on type 'typeof E1'.

  144 |     expect<typeof E1>().type.toHaveProperty("A");
  145 | 
> 146 |     expect<typeof E1>().type.not.toHaveProperty("A");
      |                                  ^
  147 |   });
  148 | 
  149 |   test("does NOT have expected property key", () => {

        at ./__typetests__/toHaveProperty.test.ts:146:34 ❭ when source is an enum ❭ has expected property key

Error: Property 'F' does not exist on type 'typeof E1'.

  150 |     expect<typeof E1>().type.not.toHaveProperty("F");
  151 | 
> 152 |     expect<typeof E1>().type.toHaveProperty("F");
      |                              ^
  153 |   });
  154 | });
  155 | 

        at ./__typetests__/toHaveProperty.test.ts:152:30 ❭ when source is an enum ❭ does NOT have expected property key

Error: Property 'radius' exists on type 'ColorfulCircle'.

  168 |     expect<ColorfulCircle>().type.toHaveProperty("radius");
  169 | 
> 170 |     expect<ColorfulCircle>().type.not.toHaveProperty("radius");
      |                                       ^
  171 |   });
  172 | 
  173 |   test("does NOT have expected property key", () => {

        at ./__typetests__/toHaveProperty.test.ts:170:39 ❭ when source is an intersection ❭ has expected property key

Error: Property 'shade' does not exist on type 'ColorfulCircle'.

  174 |     expect<ColorfulCircle>().type.not.toHaveProperty("shade");
  175 | 
> 176 |     expect<ColorfulCircle>().type.toHaveProperty("shade");
      |                                   ^
  177 |   });
  178 | });
  179 | 

        at ./__typetests__/toHaveProperty.test.ts:176:35 ❭ when source is an intersection ❭ does NOT have expected property key

Error: Property 'runTest' exists on type '{ 123: number; 0: boolean; B: null; __check: boolean; [kOne]: string; [kTwo]: string; runTest: () => boolean; }'.

  182 |     expect(sample).type.toHaveProperty("runTest");
  183 | 
> 184 |     expect(sample).type.not.toHaveProperty("runTest");
      |                             ^
  185 |   });
  186 | 
  187 |   test("has expected escaped string property key", () => {

        at ./__typetests__/toHaveProperty.test.ts:184:29 ❭ when source is a value ❭ has expected string property key

Error: Property '__check' exists on type '{ 123: number; 0: boolean; B: null; __check: boolean; [kOne]: string; [kTwo]: string; runTest: () => boolean; }'.

  188 |     expect(sample).type.toHaveProperty("__check");
  189 | 
> 190 |     expect(sample).type.not.toHaveProperty("__check");
      |                             ^
  191 |   });
  192 | 
  193 |   test("does NOT have expected string property key", () => {

        at ./__typetests__/toHaveProperty.test.ts:190:29 ❭ when source is a value ❭ has expected escaped string property key

Error: Property 'endTest' does not exist on type '{ 123: number; 0: boolean; B: null; __check: boolean; [kOne]: string; [kTwo]: string; runTest: () => boolean; }'.

  194 |     expect(sample).type.not.toHaveProperty("endTest");
  195 | 
> 196 |     expect(sample).type.toHaveProperty("endTest");
      |                         ^
  197 |   });
  198 | 
  199 |   test("has expected number property key", () => {

        at ./__typetests__/toHaveProperty.test.ts:196:25 ❭ when source is a value ❭ does NOT have expected string property key

Error: Property '123' exists on type '{ 123: number; 0: boolean; B: null; __check: boolean; [kOne]: string; [kTwo]: string; runTest: () => boolean; }'.

  200 |     expect(sample).type.toHaveProperty(123);
  201 | 
> 202 |     expect(sample).type.not.toHaveProperty(123);
      |                             ^
  203 |   });
  204 | 
  205 |   test("does NOT have expected number property key", () => {

        at ./__typetests__/toHaveProperty.test.ts:202:29 ❭ when source is a value ❭ has expected number property key

Error: Property '456' does not exist on type '{ 123: number; 0: boolean; B: null; __check: boolean; [kOne]: string; [kTwo]: string; runTest: () => boolean; }'.

  206 |     expect(sample).type.not.toHaveProperty(456);
  207 | 
> 208 |     expect(sample).type.toHaveProperty(456);
      |                         ^
  209 |   });
  210 | 
  211 |   test("has expected symbol property key", () => {

        at ./__typetests__/toHaveProperty.test.ts:208:25 ❭ when source is a value ❭ does NOT have expected number property key

Error: Property '[kOne]' exists on type '{ 123: number; 0: boolean; B: null; __check: boolean; [kOne]: string; [kTwo]: string; runTest: () => boolean; }'.

  212 |     expect(sample).type.toHaveProperty(kOne);
  213 | 
> 214 |     expect(sample).type.not.toHaveProperty(kOne);
      |                             ^
  215 |   });
  216 | 
  217 |   test("has expected global symbol property key", () => {

        at ./__typetests__/toHaveProperty.test.ts:214:29 ❭ when source is a value ❭ has expected symbol property key

Error: Property '[kTwo]' exists on type '{ 123: number; 0: boolean; B: null; __check: boolean; [kOne]: string; [kTwo]: string; runTest: () => boolean; }'.

  218 |     expect(sample).type.toHaveProperty(kTwo);
  219 | 
> 220 |     expect(sample).type.not.toHaveProperty(kTwo);
      |                             ^
  221 |   });
  222 | 
  223 |   test("does NOT have expected symbol property key", () => {

        at ./__typetests__/toHaveProperty.test.ts:220:29 ❭ when source is a value ❭ has expected global symbol property key

Error: Property '[kFour]' does not exist on type '{ 123: number; 0: boolean; B: null; __check: boolean; [kOne]: string; [kTwo]: string; runTest: () => boolean; }'.

  224 |     expect(sample).type.not.toHaveProperty(kFour);
  225 | 
> 226 |     expect(sample).type.toHaveProperty(kFour);
      |                         ^
  227 |   });
  228 | 
  229 |   test("has expected numeric enum property key", () => {

        at ./__typetests__/toHaveProperty.test.ts:226:25 ❭ when source is a value ❭ does NOT have expected symbol property key

Error: Property '0' exists on type '{ 123: number; 0: boolean; B: null; __check: boolean; [kOne]: string; [kTwo]: string; runTest: () => boolean; }'.

  230 |     expect(sample).type.toHaveProperty(E1.A);
  231 | 
> 232 |     expect(sample).type.not.toHaveProperty(E1.A);
      |                             ^
  233 |   });
  234 | 
  235 |   test("does NOT have expected numeric enum property key", () => {

        at ./__typetests__/toHaveProperty.test.ts:232:29 ❭ when source is a value ❭ has expected numeric enum property key

Error: Property '1' does not exist on type '{ 123: number; 0: boolean; B: null; __check: boolean; [kOne]: string; [kTwo]: string; runTest: () => boolean; }'.

  236 |     expect(sample).type.not.toHaveProperty(E1.B);
  237 | 
> 238 |     expect(sample).type.toHaveProperty(E1.B);
      |                         ^
  239 |   });
  240 | 
  241 |   test("has expected string enum property key", () => {

        at ./__typetests__/toHaveProperty.test.ts:238:25 ❭ when source is a value ❭ does NOT have expected numeric enum property key

Error: Property 'B' exists on type '{ 123: number; 0: boolean; B: null; __check: boolean; [kOne]: string; [kTwo]: string; runTest: () => boolean; }'.

  242 |     expect(sample).type.toHaveProperty(E2.B);
  243 | 
> 244 |     expect(sample).type.not.toHaveProperty(E2.B);
      |                             ^
  245 |   });
  246 | 
  247 |   test("does NOT have expected string enum property key", () => {

        at ./__typetests__/toHaveProperty.test.ts:244:29 ❭ when source is a value ❭ has expected string enum property key

Error: Property 'A' does not exist on type '{ 123: number; 0: boolean; B: null; __check: boolean; [kOne]: string; [kTwo]: string; runTest: () => boolean; }'.

  248 |     expect(sample).type.not.toHaveProperty(E2.A);
  249 | 
> 250 |     expect(sample).type.toHaveProperty(E2.A);
      |                         ^
  251 |   });
  252 | });
  253 | 

        at ./__typetests__/toHaveProperty.test.ts:250:25 ❭ when source is a value ❭ does NOT have expected string enum property key

"
`;

exports[`toHaveProperty: stdout 1`] = `
"uses TypeScript <<version>> with ./tsconfig.json

fail ./__typetests__/toHaveProperty.test.ts
  when source is a type
    × has expected string property key
    × has expected optional string property key
    × has expected escaped string property key
    × does NOT have expected string property key
    × has expected number property key
    × has expected optional number property key
    × does NOT have expected number property key
    × has expected symbol property key
    × has expected global symbol property key
    × does NOT have expected symbol property key
    × has expected numeric enum property key
    × does NOT have expected numeric enum property key
    × has expected string enum property key
    × does NOT have expected string enum property key
  when source is an enum
    × has expected property key
    × does NOT have expected property key
  when source is an intersection
    × has expected property key
    × does NOT have expected property key
  when source is a value
    × has expected string property key
    × has expected escaped string property key
    × does NOT have expected string property key
    × has expected number property key
    × does NOT have expected number property key
    × has expected symbol property key
    × has expected global symbol property key
    × does NOT have expected symbol property key
    × has expected numeric enum property key
    × does NOT have expected numeric enum property key
    × has expected string enum property key
    × does NOT have expected string enum property key

Targets:    1 failed, 1 total
Test files: 1 failed, 1 total
Tests:      30 failed, 30 total
Assertions: 30 failed, 31 passed, 61 total
Duration:   <<timestamp>>

Ran all test files.
"
`;
