// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`toHaveProperty: stderr 1`] = `
"Error: Property 'abc' exist on type 'any'.

  20 |   // eslint-disable-next-line @typescript-eslint/no-explicit-any
  21 |   expect<any>().type.toHaveProperty("abc");
> 22 |   expect<any>().type.not.toHaveProperty("abc");
     |                          ^
  23 | 
  24 |   expect<never>().type.not.toHaveProperty("abc");
  25 |   expect<never>().type.toHaveProperty("abc");

       at ./__typetests__/toHaveProperty.test.ts:22:26 ❭ edge cases

Error: Property 'abc' does not exist on type 'never'.

  23 | 
  24 |   expect<never>().type.not.toHaveProperty("abc");
> 25 |   expect<never>().type.toHaveProperty("abc");
     |                        ^
  26 | 
  27 |   expect<null>().type.not.toHaveProperty("abc");
  28 |   expect<null>().type.toHaveProperty("abc");

       at ./__typetests__/toHaveProperty.test.ts:25:24 ❭ edge cases

Error: Property 'abc' does not exist on type 'null'.

  26 | 
  27 |   expect<null>().type.not.toHaveProperty("abc");
> 28 |   expect<null>().type.toHaveProperty("abc");
     |                       ^
  29 | 
  30 |   expect<undefined>().type.not.toHaveProperty("abc");
  31 |   expect<undefined>().type.toHaveProperty("abc");

       at ./__typetests__/toHaveProperty.test.ts:28:23 ❭ edge cases

Error: Property 'abc' does not exist on type 'undefined'.

  29 | 
  30 |   expect<undefined>().type.not.toHaveProperty("abc");
> 31 |   expect<undefined>().type.toHaveProperty("abc");
     |                            ^
  32 | 
  33 |   expect<unknown>().type.not.toHaveProperty("abc");
  34 |   expect<unknown>().type.toHaveProperty("abc");

       at ./__typetests__/toHaveProperty.test.ts:31:28 ❭ edge cases

Error: Property 'abc' does not exist on type 'unknown'.

  32 | 
  33 |   expect<unknown>().type.not.toHaveProperty("abc");
> 34 |   expect<unknown>().type.toHaveProperty("abc");
     |                          ^
  35 | 
  36 |   expect<void>().type.not.toHaveProperty("abc");
  37 |   expect<void>().type.toHaveProperty("abc");

       at ./__typetests__/toHaveProperty.test.ts:34:26 ❭ edge cases

Error: Property 'abc' does not exist on type 'void'.

  35 | 
  36 |   expect<void>().type.not.toHaveProperty("abc");
> 37 |   expect<void>().type.toHaveProperty("abc");
     |                       ^
  38 | 
  39 |   expect("abc").type.toHaveProperty("startsWith");
  40 |   expect("abc").type.not.toHaveProperty("startsWith");

       at ./__typetests__/toHaveProperty.test.ts:37:23 ❭ edge cases

Error: Property 'startsWith' exist on type '"abc"'.

  38 | 
  39 |   expect("abc").type.toHaveProperty("startsWith");
> 40 |   expect("abc").type.not.toHaveProperty("startsWith");
     |                          ^
  41 | });
  42 | 
  43 | describe("received type", () => {

       at ./__typetests__/toHaveProperty.test.ts:40:26 ❭ edge cases

Error: Property 'runTest' exist on type 'Worker<Sample>'.

  45 |     expect<Worker<Sample>>().type.toHaveProperty("runTest");
  46 | 
> 47 |     expect<Worker<Sample>>().type.not.toHaveProperty("runTest");
     |                                       ^
  48 |   });
  49 | 
  50 |   test("does NOT have expected property key", () => {

       at ./__typetests__/toHaveProperty.test.ts:47:39 ❭ received type ❭ has expected property key

Error: Property 'endTest' does not exist on type 'Worker<Sample>'.

  51 |     expect<Worker<Sample>>().type.not.toHaveProperty("endTest");
  52 | 
> 53 |     expect<Worker<Sample>>().type.toHaveProperty("endTest");
     |                                   ^
  54 |   });
  55 | 
  56 |   test("has expected property key, but it is optional", () => {

       at ./__typetests__/toHaveProperty.test.ts:53:35 ❭ received type ❭ does NOT have expected property key

Error: Property 'isBusy?' is optional in type 'Worker<Sample>'.

  57 |     expect<Worker<Sample>>().type.not.toHaveProperty("isBusy");
  58 | 
> 59 |     expect<Worker<Sample>>().type.toHaveProperty("isBusy");
     |                                   ^
  60 |   });
  61 | 
  62 |   test("has expected optional property key", () => {

       at ./__typetests__/toHaveProperty.test.ts:59:35 ❭ received type ❭ has expected property key, but it is optional

Error: Optional property 'isBusy?' exist on type 'Worker<Sample>'.

  63 |     expect<Worker<Sample>>().type.toHaveProperty("isBusy?");
  64 | 
> 65 |     expect<Worker<Sample>>().type.not.toHaveProperty("isBusy?");
     |                                       ^
  66 |   });
  67 | 
  68 |   test("does NOT have expected optional property key", () => {

       at ./__typetests__/toHaveProperty.test.ts:65:39 ❭ received type ❭ has expected optional property key

Error: Optional property 'isRunning?' does not exist on type 'Worker<Sample>'.

  69 |     expect<Worker<Sample>>().type.not.toHaveProperty("isRunning?");
  70 | 
> 71 |     expect<Worker<Sample>>().type.toHaveProperty("isRunning?");
     |                                   ^
  72 |   });
  73 | 
  74 |   test("has expected property key, but it is NOT optional", () => {

       at ./__typetests__/toHaveProperty.test.ts:71:35 ❭ received type ❭ does NOT have expected optional property key

Error: Property 'runTest' is not optional in type 'Worker<Sample>'.

  75 |     expect<Worker<Sample>>().type.not.toHaveProperty("runTest?");
  76 | 
> 77 |     expect<Worker<Sample>>().type.toHaveProperty("runTest?");
     |                                   ^
  78 |   });
  79 | });
  80 | 

       at ./__typetests__/toHaveProperty.test.ts:77:35 ❭ received type ❭ has expected property key, but it is NOT optional

"
`;

exports[`toHaveProperty: stdout 1`] = `
"uses TypeScript <<version>> with ./tsconfig.json

fail ./__typetests__/toHaveProperty.test.ts
  × edge cases
  received type
    × has expected property key
    × does NOT have expected property key
    × has expected property key, but it is optional
    × has expected optional property key
    × does NOT have expected optional property key
    × has expected property key, but it is NOT optional

Targets:    1 failed, 1 total
Test files: 1 failed, 1 total
Tests:      7 failed, 7 total
Assertions: 13 failed, 13 passed, 26 total
Duration:   <<timestamp>>

Ran all test files.
"
`;
