Error: Type 'number' is identical to type 'number'.

  1 | import { expect, test } from "tstyche";
  2 | test("is number?", () => {
  3 |   expect<number>().type.not.toBe<number>();
    |                                  ~~~~~~
  4 |   expect<number>().type.not.toBe<number>();
  5 | });
  6 | 

      at ./__typetests__/isNumber.tst.ts:3:34 ❭ is number?

Error: Type 'number' is identical to type 'number'.

  2 | test("is number?", () => {
  3 |   expect<number>().type.not.toBe<number>();
  4 |   expect<number>().type.not.toBe<number>();
    |                                  ~~~~~~
  5 | });
  6 | 

      at ./__typetests__/isNumber.tst.ts:4:34 ❭ is number?

Error: Type 'string' is identical to type 'string'.

  1 | import { expect, test } from "tstyche";
  2 | test("is string?", () => {
  3 |   expect<string>().type.not.toBe<string>();
    |                                  ~~~~~~
  4 |   expect<string>().type.not.toBe<string>();
  5 | });
  6 | 

      at ./__typetests__/isString.tst.ts:3:34 ❭ is string?

Error: Type 'string' is identical to type 'string'.

  2 | test("is string?", () => {
  3 |   expect<string>().type.not.toBe<string>();
  4 |   expect<string>().type.not.toBe<string>();
    |                                  ~~~~~~
  5 | });
  6 | 

      at ./__typetests__/isString.tst.ts:4:34 ❭ is string?

