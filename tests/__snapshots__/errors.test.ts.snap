// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`handles describe level type errors: stderr 1`] = `
"Error: Expected 2 arguments, but got 1. ts(2554)

  13 | 
  14 | describe("reported type error?", () => {
> 15 |   test("with type error");
     |   ^
  16 | 
  17 |   test("looks at this test?", () => {
  18 |     expect<number>().type.toBeNumber();

       at ./__typetests__/describe-level.tst.ts:15:3

"
`;

exports[`handles describe level type errors: stdout 1`] = `
"uses TypeScript <<version>> with ./tsconfig.json

fail ./__typetests__/describe-level.tst.ts
  + is string?
  skipped type error?
    - skip with type error
  reported type error?
  + continues to run tests?

Targets:    1 failed, 1 total
Test files: 1 failed, 1 total
Tests:      1 skipped, 2 passed, 3 total
Assertions: 2 passed, 2 total
Duration:   <<timestamp>>

Ran test files matching 'describe-level'.
"
`;

exports[`handles matcher level type errors: stderr 1`] = `
"Error: Expected 0 arguments, but got 1. ts(2554)

   5 | 
   6 | test("has matcher type error?", () => {
>  7 |   expect(one()).type.toBeVoid(true);
     |                               ^
   8 | });
   9 | 
  10 | test("has assertion type error?", () => {

       at ./__typetests__/matcher-level.tst.ts:7:31

Error: Expected 0 arguments, but got 1. ts(2554)

  11 |   expect(one("pass")).type.toRaiseError();
  12 | 
> 13 |   expect(one("fail")).type.toBeVoid();
     |              ^
  14 | });
  15 | 

       at ./__typetests__/matcher-level.tst.ts:13:14

"
`;

exports[`handles matcher level type errors: stdout 1`] = `
"uses TypeScript <<version>> with ./tsconfig.json

fail ./__typetests__/matcher-level.tst.ts
  × has matcher type error?
  × has assertion type error?

Targets:    1 failed, 1 total
Test files: 1 failed, 1 total
Tests:      2 failed, 2 total
Assertions: 1 failed, 1 passed, 2 total
Duration:   <<timestamp>>

Ran test files matching 'matcher-level'.
"
`;

exports[`handles syntax errors: stderr 1`] = `
"Error: Expression expected. ts(1109)

  4 | 
  5 | test("is syntax error?", () => {
> 6 |   one(());
    |        ^
  7 | });
  8 | 
  9 | test("is syntax error?", () => {

      at ./__typetests__/syntax-error.tst.ts:6:8

Error: Argument expression expected. ts(1135)

   9 | test("is syntax error?", () => {
  10 |   one(
> 11 | });
     | ^
  12 | 
  13 | test("is skipped?", () => {
  14 |   expect(one("abc")).type.toBeVoid();

       at ./__typetests__/syntax-error.tst.ts:11:1

Error: ')' expected. ts(1005)

  16 | 
  17 | test("is broken?"
> 18 | 
     | ^

       at ./__typetests__/syntax-error.tst.ts:18:1

"
`;

exports[`handles syntax errors: stdout 1`] = `
"uses TypeScript <<version>> with ./tsconfig.json

fail ./__typetests__/syntax-error.tst.ts

Targets:    1 failed, 1 total
Test files: 1 failed, 1 total
Duration:   <<timestamp>>

Ran all test files.
"
`;

exports[`handles test level type errors: stderr 1`] = `
"Error: Property 'toBeString' does not exist on type 'Modifier'. ts(2339)

  12 | test("reported type error?", () => {
  13 |   // eslint-disable-next-line @typescript-eslint/no-unsafe-call -- Testing purpose
> 14 |   expect<string>().toBeString();
     |                    ^
  15 | });
  16 | 

       at ./__typetests__/test-level.tst.ts:14:20

"
`;

exports[`handles test level type errors: stdout 1`] = `
"uses TypeScript <<version>> with ./tsconfig.json

fail ./__typetests__/test-level.tst.ts
  + is string?
  - skip skipped type error?
  × reported type error?

Targets:    1 failed, 1 total
Test files: 1 failed, 1 total
Tests:      1 failed, 1 skipped, 1 passed, 3 total
Assertions: 1 passed, 1 total
Duration:   <<timestamp>>

Ran test files matching 'test-level'.
"
`;

exports[`handles top level type errors: stderr 1`] = `
"Error: Type 'string' is not assignable to type 'number'. ts(2322)

   5 | });
   6 | 
>  7 | const a: number = "nine";
     |       ^
   8 | 
   9 | if (a > 9) {
  10 |   //

       at ./__typetests__/top-level.tst.ts:7:7

Error: Argument of type 'number' is not assignable to parameter of type 'string'. ts(2345)

  11 | }
  12 | 
> 13 | test(284963, () => {
     |      ^
  14 |   expect<string>().type.toBeString();
  15 | });
  16 | 

       at ./__typetests__/top-level.tst.ts:13:6

"
`;

exports[`handles top level type errors: stdout 1`] = `
"uses TypeScript <<version>> with ./tsconfig.json

fail ./__typetests__/top-level.tst.ts

Targets:    1 failed, 1 total
Test files: 1 failed, 1 total
Duration:   <<timestamp>>

Ran test files matching 'top-level'.
"
`;
